function mapRange(e,r,t,o,n){return o+(n-o)*(e-r)/(t-r)}function buildCountryTooltip(e,r){var t=countryTooltip;return $.each(Object.keys(r),function(e,o){t=t.replace(o,r[o])}),t}function resetFiltersBox(){for(var e=0;numFilters>e;e++){$("#fbox"+e).text(""),$("#fbox"+e).val("")}var r=generateColorsForTheCountries();reloadMap(r),filteredMarkers=jsonMarkers,addMarkersToMap()}function createFiltersBoxCheckboxes(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(jsonFiltersArray,function(e,r){function t(e){return"<p>"+JSON.stringify(e)+"</p>"}function o(){var e=$("p.status").empty();e.append(t(widget.checked()))}numFilters++;var n="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];r.continuous||$.each(r.values,function(e,r){a.push({id:e+1,label:r,isChecked:!1})});var i=r.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(n).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(n).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",o()),o()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var e={},r=jsonFiltersArray.length,t=0,o=0;o<jsonFiltersArray.length;o++){for(var n="#box"+(o+1),a=getSelectedItems(n),i=[],s=Object.keys(a),c=0;c<s.length;c++)i.push(a[s[c]].label);s.length>0?e[jsonFiltersArray[o].name]=i.join():t++}t!=r&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function createFiltersBoxWithEnumeration(e){numFilters=e.length,$.each(e,function(e,r){var t=r.name.toLowerCase();t=t.charAt(0).toUpperCase()+t.slice(1);var o="";o+="<p><b>"+t+":</b></p>",o+='<div class="form-group">',o+='<input type="text" class="form-control" id="fbox'+e+'"',o+=r.continuous?'placeholder="'+r.min+"..."+r.max+'" +>':'placeholder="'+r.values.join()+'" +>',o+="</div>",$("filter-box").append(o),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})}),$(".form-control").append('<span class="glyphicon glyphicon-remove form-control-feedback">');var r='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(r),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var r={},t=e.length,o=0,n=0;n<e.length;n++){var a="#fbox"+n,i=$(a).val();""!==i?r[e[n].name]=i:o++}o!=t&&filter(r)}),$("#filter_box_reset_filters").click(function(){restoreInputBoxes(),resetFiltersBox()})}function getAllFilterValues(e){var r=[];if(-1!=String(e).indexOf(",")){var t=String(e).split(",");$.each(t,function(e,t){if(-1!=t.indexOf("-")){var o=String(t).split("-");checkFilterValuesAreValid(filterObject,o);for(var n=o[0],a=o[1];a>=n;n++)r.push(n)}else r.push(t)})}else if(console.log("single"),-1!=e.indexOf("-")){console.log("range");var o=String(e).split("-");console.log(o),checkFilterValuesAreValid(filterObject,o);for(var n=o[0],a=o[1];a>=n;n++)r.push(n)}else console.log("single value"),checkFilterValuesAreValid(filterObject,e.split("")),r.push(e);return r}function checkWhatCountriesToAdd(e,r){var t=[];return $.each(jsonCountries,function(e,o){for(var n=0;;){n++;var a="name"+n,i="value"+n;if(!o[a])break;o[i]==r&&(countryValueToCheck=i,o[i]==r&&(t[o.country]=o.Count))}}),t}function checkWhatMarkersToAdd(e,r){var t=[];return $.each(jsonMarkers,function(o,n){$.each(Object.keys(n),function(o,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==r&&t.push(n)})}),t}function checkWhatCountriesMarkersToAdd(e,r){var t=[],o=[];return t=checkWhatCountriesToAdd(e,r),o=checkWhatMarkersToAdd(e,r),[t,o]}function checkFilterNameIsValid(e){var r=!1;return $.each(jsonFiltersArray,function(t,o){return o.name.toLowerCase()===e.toLowerCase()?(filterObject=o,void(r=!0)):void 0}),r}function restoreInputBoxes(){for(var e=0;e<jsonFiltersArray.length;e++)$("#fbox"+e).parent().removeClass("has-error")}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function checkFilterValuesAreValid(e,r){var t=!0;if(1==e.continuous){var o=e.min,n=e.max;$.each(r,function(r,a){return console.log(+a),o>+a||+a>n?(t=!1,void highlightInputBoxError(e,a)):void 0})}else $.each(r,function(r,o){t=!1,$.each(e.values,function(e,r){return r==o?void(t=!0):void 0}),t||highlightInputBoxError(e,o)});return t}function highlightInputBoxError(e,r){console.log("Invalid value for the filter: "+r);var t=e.name;$.each(jsonFiltersArray,function(e,r){t==r.name&&$("#fbox"+e).parent().addClass("has-error")})}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readFiltersFromJSON(e){var r=[];return $.each(e,function(e,t){r.push(new Filter(t))}),r}function jsonMapCountries(e,r){var t=[];$.getJSON(r,function(r){$.each(e,function(e,o){var n=o[r.country],a=0;t[e]=new Country("",n,a)}),mappingCountries=t,console.log(mappingCountries)})}function jsonMapMarkers(e,r){var t=[];$.getJSON(r,function(r){$.each(e,function(e,o){var n=o[r.country],a=0,i=o[r.Latitude],s=o[r.Longitude];t[e]=new Marker("",n,a,i,s)}),mappingMarkers=t,console.log(mappingMarkers)})}function removeBackButton(){$(".jvectormap-goback").remove()}function readMarkersFromJSON(e){var r=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,t){r.push(new Marker(t));var o=r[e].Count;o>maxCount&&(maxCount=o),o<minCount&&(minCount=o)}),r}function buildMarkerTooltip(e,r){var t=markerTooltip;return $.each(Object.keys(r),function(e,o){t=t.replace(o,r[o])}),t}function filter(e){var r=Object.keys(e),t=r.length,o=0,n=new Array,a=new Array;for(c=0;t>c;c++)n[c]=new Array,a[c]=new Array;var i=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(r,function(r,t){if(!checkFilterNameIsValid(t))return void console.log("Invalid filter name!("+t+")");var i=e[t],s=getAllFilterValues(i);o++,$.each(s,function(e,t){var o=checkWhatCountriesMarkersToAdd(filterObject,t),i=o[0],s=o[1];$.each(Object.keys(i),function(e,t){var o=i[t];n[r][t]=o}),$.each(s,function(e,t){a[r].push(t)})})});var s=[];if(n.length>0){s=n[0];for(var c=0;c<n.length-1;c++)s=getCountriesIntersection(s,n[c+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var c=0;c<a.length-1;c++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[c+1])}addMarkersToMap()}}function getMarkersIntersection(e,r){var t=[];return $.each(e,function(e,o){var n=o.country;$.each(r,function(e,r){var a=r.country;n==a&&t.push(o)})}),t}function getCountriesIntersection(e,r){var t=[];return $.each(Object.keys(e),function(o,n){$.each(Object.keys(r),function(r,o){n==o&&(t[n]=e[n])})}),t}function applyMultipleFiltersProgramattically(e){var r=Object.keys(e),t=r.length,o=[],n=[];$.each(r,function(r,t){e[t]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(t,n){o[t]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[c]==e[a]&&o[t]++}})}),$.each(jsonCountries,function(e,r){o[e]==t&&(a[r.country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(t,o){n[t]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!o[s])break;o[s].toLowerCase()==a.toLowerCase()&&o[c]==e[a]&&n[t]++}})}),$.each(jsonMarkers,function(e,r){n[e]==t&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,r){var t=e.filter(function(e){return void 0!==e}).length,o=[],n=[];$.each(jsonCountries,function(t,n){o[t]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(void 0==n[s])break;n[s]===r[e].Name&&n[c]==a&&o[t]++}})});var a=[];$.each(jsonCountries,function(e,r){o[e]==t&&(a[r.country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(t,o){n[t]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!o[s])break;o[s].toLowerCase()==r[e].Name.toLowerCase()&&o[c]==a&&n[t]++}})}),$.each(jsonMarkers,function(e,r){n[e]==t&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,r){var t=[];return $.each(e,function(e,o){t[e]=new Region(o,r)}),e}function generateColorsForTheRegions(e){var r=e.split("_")[0].toUpperCase(),t=[];return $.each(jsonCountries,function(e,o){if(o.country==r&&o.Regions){var n=o.Regions;$.each(n,function(e,r){t[r.name]=100})}}),t}function buildRegionTooltip(e){var r=regionTooltip;return r=r.replace("name",e.name)}function addRegionsToMap(e){var r=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,t){function o(){var e,r={};r[maps.region];for(e in maps.regions)r[e]=n[Math.floor(Math.random()*n.length)];return r}if(t.country==r&&t.Regions){var n=(t.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(o()),maps.series.regions[0].setValues(o())}})}var VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,r,t,o,n,a,i,s,c){if(this.background=s,this.mType=i,this.dataType=c,this.jsonCountries=[],this.jsonMarkers=[],this.mDiv=o,this.minColorMap=n,this.maxColorMap=a,"countries"==c)this.jsonCountries=this.readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=c)return void console.error("You must give as input a list of markers or countries!");this.thereAreMarkers=!0,this.jsonMarkers=readMarkersFromJSON(e),this.filteredMarkers=this.jsonMarkers,this.numMarkers=this.jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}this.auxColors="countries"==c?this.generateColorsForTheCountries():[];var u={vertical:!0};markersWithLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount],legend:u},markersWithoutLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount]},finalMarkersInMap=markersWithLegend,"markers"==c&&(finalMarkersInMap=markersWithoutLegend);var l=this;this.map=new jvm.Map({container:$("#"+l.mDiv),map:l.mType,backgroundColor:l.background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var t=countryCode+"_mill_en";l.switchMap(t)},onMarkerTipShow:function(e,r,t){var o=buildMarkerTooltip(l.jsonMarkers,l.jsonMarkers[t]);r.html(o)},onRegionTipShow:function(e,r,t){var o=-1;if($.each(l.jsonCountries,function(e,r){return r.name===t?void(o=r):void 0}),-1!=o){var n=buildCountryTooltip(r,o);r.html(n)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[l.minColorMap,l.maxColorMap],attribute:"fill",values:this.auxColors}]}}),"markers"==c&&(this.filteredMarkers=this.jsonMarkers,this.addMarkersToMap(this.filteredMarkers))};var Country=function(e){var r=e.attributes,t=this;$.each(Object.keys(r),function(e,o){t[o]=r[o]}),e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"};VectorialMap.prototype.generateColorsForTheCountries=function(e){e||(e=this.jsonCountries);var r=[];return $.each(e,function(e,t){r[t.name]=t.count}),r},VectorialMap.prototype.readCountriesFromJSON=function(e){var r=[];return this.minCount=1/0,this.maxCount=-(1/0),$.each(e,function(e,t){r.push(new Country(t)),r[e].Count>this.maxCount&&(this.maxCount=r[e].Count),r[e].Count<this.minCount&&(this.minCount=r[e].Count)}),r},VectorialMap.prototype.findCountryByName=function(e){var r=null;return $.each(this.jsonCountries,function(t,o){return o.name==e?r=o:void 0}),r},VectorialMap.prototype.readMinMax=function(e){this.minCount=1/0,this.maxCount=-(1/0);var r=[];for(var t in e)e.hasOwnProperty(t)&&r.push(t);var o=this;$.each(r,function(e,r){var t=o.findCountryByName(r);t.Count>o.maxCount&&(o.maxCount=t.Count),t.Count<o.minCount&&(o.minCount=t.Count)})};var numFilters=0,Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,r,t){var r="../mappingJSON/mappingCountriesSample.json",t="../mappingJSON/mappingMarkersSample.json";return r?t?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,r),jsonMapMarkers(e,t)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var r=JSON.stringify(e),t="http://serverFiltering.com/?data="+encodeURIComponent(r);t="../json/countries_plus_markers2.json",$.getJSON(t,function(e){jsonCountries=readCountriesFromJSON(e.countries);var r=generateColorsForTheCountries(jsonCountries);reloadMap(r),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})},VectorialMap.prototype.reloadMap=function(e){this.jsonCountries.length>0&&this.readMinMax(e),$("#"+this.mDiv).empty();var r=this;this.map=new jvm.Map({map:r.mType,backgroundColor:r.background,container:$("#"+r.mDiv),onRegionClick:function(e,t){countryCode=t.toLowerCase();var o=countryCode+"_mill_en";r.switchMap(o)},onMarkerTipShow:function(e,t,o){var n=buildMarkerTooltip(r.jsonMarkers,o);t.html(n)},onRegionTipShow:function(e,t,o){var n=-1;if($.each(r.jsonCountries,function(e,r){return r.name===o?void(n=r):void 0}),-1!=n){var a=buildCountryTooltip(t,n);t.html(a)}else t.html(t.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[r.minColorMap,r.maxColorMap],attribute:"fill",values:e}]}}),r.thereAreMarkers&&r.addMarkersToMap()},VectorialMap.prototype.removeTooltip=function(){$(".jvectormap-tip").remove()},VectorialMap.prototype.switchMap=function(e){$("#"+this.mDiv).empty(),this.removeTooltip();var r="countries"==dataType?this.generateColorsForTheCountries(this.jsonCountries):[],t=this;this.map=new jvm.Map({map:e,backgroundColor:t.background,container:$("#"+t.mDiv),onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(t.jsonMarkers,o);r.html(n)},onRegionTipShow:function(r,o,n){var a=e.split("_")[0].toUpperCase(),i=-1;$.each(t.jsonCountries,function(e,r){return r.country==a?void(i=r):void 0});var s,c=!1;$.each(t.map.regions,function(e,r){return r.name==n?(s=r,void(c=!0)):void 0}),o.html(c?buildRegionTooltip(s):o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[t.minColorMap,t.maxColorMap],attribute:"fill",values:r}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+this.mDiv).empty(),t.removeTooltip(),t.reloadMap(t.auxColors)}),this.thereAreMarkers&&this.addMarkersToMap(this.filteredMarkers)};var Marker=function(e){var r=e.attributes,t=this;$.each(Object.keys(r),function(e,o){t[o]=r[o]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"};VectorialMap.prototype.addMarkersToMap=function(){var e=[];$.each(this.filteredMarkers,function(r,t){var o={latLng:[t.latitude,t.longitude],name:t.desc,style:{r:mapRange(t.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+t.icon+".png"}};e.push(o)}),this.map.addMarkers(e)};var Region=function(e,r){this.Region=e.name,this.country=r,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,