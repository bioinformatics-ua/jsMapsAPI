function buildCountryTooltip(e,r){var o=countryTooltip;return o=o.replace("name",e.html()),o=o.replace("count",r.Count)}function buildMarkerTooltip(e,r){var o=markerTooltip;return o=o.replace("description",e[r].desc),o=o.replace("latitude",e[r].Latitude),o=o.replace("longitude",e[r].Longitude)}function buildRegionTooltip(e){var r=regionTooltip;return r=r.replace("name",e.name)}function mapRange(e,r,o,n,t){return n+(t-n)*(e-r)/(o-r)}function generateColorsForTheCountries(e){e||(e=jsonCountries);var r=[];return $.each(e,function(e,o){r[o.Country]=o.Count}),r}function readCountriesFromJSON(e){{var r=[];e.length}return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r[e]=new Country(o),r[e].Count>maxCount&&(maxCount=r[e].Count),r[e].Count<minCount&&(minCount=r[e].Count)}),r}function findCountryByName(e){var r=null;return $.each(jsonCountries,function(o,n){return n.Country==e?r=n:void 0}),r}function readMinMax(e){minCount=1/0,maxCount=-(1/0);var r=[];for(var o in e)e.hasOwnProperty(o)&&r.push(o);$.each(r,function(e,r){var o=findCountryByName(r);o.Count>maxCount&&(maxCount=o.Count),o.Count<minCount&&(minCount=o.Count)})}function createFiltersBoxCheckboxes(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(jsonFiltersArray,function(e,r){function o(e){return"<p>"+JSON.stringify(e)+"</p>"}function n(){var e=$("p.status").empty();e.append(o(widget.checked()))}var t="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];$.each(r.Values,function(e,r){a.push({id:e+1,label:r,isChecked:!1})});var i=r.Name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(t).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(t).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",n()),n()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){for(var e={},r=jsonFiltersArray.length,o=0,n=0;n<jsonFiltersArray.length;n++){for(var t="#box"+(n+1),a=getSelectedItems(t),i=[],s=Object.keys(a),l=0;l<s.length;l++)i.push(a[s[l]].label);s.length>0?e[jsonFiltersArray[n].Name]=i.join():o++}o!=r&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function createFiltersBoxWithEnumeration(e){e.length;$.each(e,function(e,r){var o=r.Name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var n="";n+="<p><b>"+o+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+e+'"';var t=r.Values;n+='placeholder="'+t+'" +>',n+="</div>",$("filter-box").append(n),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})});var r='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(r),$("#filter_box_apply_filters").click(function(){for(var r={},o=e.length,n=0,t=0;t<e.length;t++){var a="#fbox"+t,i=$(a).val();""!==i?r[e[t].Name]=i:n++}n!=o&&filter(r)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getAllFilterValues(e){var r=[];if(-1!=String(e).indexOf(",")){var o=String(e).split(",");$.each(o,function(e,o){if(-1!=o.indexOf("-")){var n=String(o).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(o)})}else if(-1!=e.indexOf("-")){var n=String(e).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(e);return r}function checkWhatCountriesToAdd(e,r){var o=[];return $.each(jsonCountries,function(e,n){for(var t=0;;){t++;var a="Name"+t,i="Value"+t;if(!n[a])break;n[i]==r&&(countryValueToCheck=i,n[i]==r&&(o[n.Country]=n.Count))}}),o}function checkWhatMarkersToAdd(e,r){var o=[];return $.each(jsonMarkers,function(n,t){for(var a=0;;){a++;var i="Name"+a,s="Value"+a;if(!t[i])break;t[i]==e.Name&&t[s]==r&&o.push(t)}}),o}function checkWhatCountriesMarkersToAdd(e,r){var o=[],n=[];return o=checkWhatCountriesToAdd(e,r),n=checkWhatMarkersToAdd(e,r),[o,n]}function checkFilterNameIsValid(e){var r=!1;return $.each(jsonFiltersArray,function(o,n){return n.Name.toLowerCase()===e.toLowerCase()?(filterObject=n,void(r=!0)):void 0}),r}function checkFilterValuesAreValid(e,r){var o=!1;return $.each(r,function(e,r){return $.each(filterObject.Values,function(e,n){return n==r?void(o=!0):void 0}),o?void 0:void console.log("Invalid value for the filter: "+r)}),o}function addMarkersToMap(e){$.each(e,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function filterFromMenuSelected(e,r){currentFilter=e;var o=checkWhatCountriesToAdd(e,r);if(reloadMap(o),$.each(jsonMarkers,function(o,n){for(var t=0;;){t++;var a="Name"+t,i="Value"+t;if(!n[a])break;n[a]===e.Name&&n[i]===r&&map.addMarker(o,{latLng:[n.Latitude,n.Longitude],name:n.desc,style:{fill:"green",r:mapRange(n.Count,minCount,maxCount,minRadius,maxRadius)}})}}),isNaN(e.Values[0]))$("#slider").hide(),$("#minSlider").hide(),$("#maxSlider").hide();else{$("#slider").show(),$("#minSlider").show(),$("#maxSlider").show();var n=$("#slider").slider(),t=e.Values[0],a=e.Values[e.Values.length-1];n.slider("option","min",t),n.slider("option","max",a),$("#minSlider").text(t),$("#maxSlider").text(a)}}function sliderChanged(){var e=slider.slider("option","values"),r=e[0],o=e[1],n=currentFilter.Name;$("#minSlider").text(r),$("#maxSlider").text(o);var t=[];$.each(jsonCountries,function(e,n){var a=+n[countryValueToCheck];a>=r&&o>=a&&(t[n.Country]=n.Count)}),reloadMap(t);for(var a,i=jsonCountries[0],s=0;;){s++;var l="Name"+s,u="Value"+s;if(i[l]===n){a=u;break}}$.each(jsonMarkers,function(e,n){n[a]>=r&&n[a]<=o&&map.addMarker(e,{latLng:[n.Latitude,n.Longitude],name:n.desc,style:{fill:"green",r:mapRange(n.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readFiltersFromJSON(e){for(var r=[],o=0;o<e.values.length;o++){currentFilter=e.values[o];for(var n=currentFilter.name,t=currentFilter.value,a=[],i=0;i<currentFilter.values.length;i++)a.push(currentFilter.values[i]);r[o]=new Filter(n,t,a)}return numFilters=r.length,r}function jsonMapCountries(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.Country],a=0;o[e]=new Country("",t,a)}),mappingCountries=o,console.log(mappingCountries)})}function jsonMapMarkers(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.Country],a=0,i=n[r.Latitude],s=n[r.Longitude];o[e]=new Marker("",t,a,i,s)}),mappingMarkers=o,console.log(mappingMarkers)})}function reloadMap(e){if(map.params.map==mType){jsonCountries.length>0&&readMinMax(e);var r={vertical:!0},o={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:r},n={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]};finalMarkersInMap=o,"markers"==dataType&&(finalMarkersInMap=n),$("#"+mDiv).empty(),map=new jvm.Map({map:mType,backgroundColor:background,container:$("#"+mDiv),onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.Country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:e}]}})}else jsonCountries.length>0&&readMinMax(e),$("#"+mDiv).empty(),removeTooltip(),switchMap(mapType)}function removeTooltip(){$(".jvectormap-tip").remove()}function switchMap(e){$("#"+mDiv).empty(),removeTooltip();var r=generateColorsForTheRegions(e);map=new jvm.Map({map:e,backgroundColor:background,container:$("#"+mDiv),onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(r,o,n){var t=e.split("_")[0].toUpperCase(),a=-1;$.each(jsonCountries,function(e,r){return r.Country==t?void(a=r):void 0});var i,s=!1;$.each(map.regions,function(e,r){return r.name==n?(console.log("+"),i=r,void(s=!0)):void 0}),o.html(s?buildRegionTooltip(i):o.html())},series:{markers:[{scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:{vertical:!0}}],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:r}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+mDiv).empty(),removeTooltip(),map=new jvm.Map({container:$("#"+mDiv),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.Country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[{scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:{vertical:!0}}],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),thereAreMarkers&&addMarkersToMap()}),thereAreMarkers&&addMarkersToMap(),jsonCountries}function addMarkersToMap(){var e=[];$.each(filteredMarkers,function(r,o){var n={latLng:[o.Latitude,o.Longitude],name:o.desc,style:{fill:"green",r:mapRange(o.Count,minCount,maxCount,minRadius,maxRadius)}};e.push(n)}),map.addMarkers(e)}function readMarkersFromJSON(e){var r=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r[e]=new Marker(o);var n=r[e].Count;n>maxCount&&(maxCount=n),n<minCount&&(minCount=n)}),r}function filter(e){var r=Object.keys(e),o=r.length,n=0,t=new Array,a=new Array;for(l=0;o>l;l++)t[l]=new Array,a[l]=new Array;var i=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(r,function(r,o){if(!checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var i=e[o],s=getAllFilterValues(i);n++,$.each(s,function(e,o){var n=checkWhatCountriesMarkersToAdd(filterObject,o),i=n[0],s=n[1];$.each(Object.keys(i),function(e,o){var n=i[o];t[r][o]=n}),$.each(s,function(e,o){a[r].push(o)})})});var s=[];if(t.length>0){s=t[0];for(var l=0;l<t.length-1;l++)s=getCountriesIntersection(s,t[l+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var l=0;l<a.length-1;l++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[l+1])}addMarkersToMap()}}function getMarkersIntersection(e,r){var o=[];return $.each(e,function(e,n){var t=n.Country;$.each(r,function(e,r){var a=r.Country;t==a&&o.push(n)})}),o}function getCountriesIntersection(e,r){var o=[];return $.each(Object.keys(e),function(n,t){$.each(Object.keys(r),function(r,n){t==n&&(o[t]=e[t])})}),o}function applyMultipleFiltersProgramattically(e){var r=Object.keys(e),o=r.length,n=[],t=[];$.each(r,function(r,o){e[o]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(o,t){n[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!t[s])break;t[s].toLowerCase()==a.toLowerCase()&&t[l]==e[a]&&n[o]++}})}),$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.Country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[l]==e[a]&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,r){var o=e.filter(function(e){return void 0!==e}).length,n=[],t=[];$.each(jsonCountries,function(o,t){n[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(void 0==t[s])break;t[s]===r[e].Name&&t[l]==a&&n[o]++}})});var a=[];$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.Country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!n[s])break;n[s].toLowerCase()==r[e].Name.toLowerCase()&&n[l]==a&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,r){var o=[];return $.each(e,function(e,n){o[e]=new Region(n,r)}),e}function generateColorsForTheRegions(e){var r=e.split("_")[0].toUpperCase(),o=[];return $.each(jsonCountries,function(e,n){if(n.Country==r&&n.Regions){var t=n.Regions;$.each(t,function(e,r){o[r.name]=100})}}),o}function addRegionsToMap(e){var r=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,o){function n(){var e,r={};r[maps.region];for(e in maps.regions)r[e]=t[Math.floor(Math.random()*t.length)];return r}if(o.Country==r&&o.Regions){var t=(o.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(n()),maps.series.regions[0].setValues(n())}})}var vectorMap,jsonFilters=[],minColorMap,maxColorMap,mDiv,mType,background,filteredMarkers,thereAreMarkers=!1,VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,r,o,n,t,a,i,s,l){if(background=s,mType=i,jsonCountries=[],jsonMarkers=[],mDiv=n,minColorMap=t,maxColorMap=a,"countries"==l)jsonCountries=readCountriesFromJSON(e);else{if("markers"!=l)return void console.error("You must give as input a list of markers or countries!");thereAreMarkers=!0,jsonMarkers=readMarkersFromJSON(e),filteredMarkers=jsonMarkers,numMarkers=jsonMarkers.length}auxColors=generateColorsForTheCountries(),jQuery.ajax({url:"./tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"./tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1}),jQuery.ajax({url:"./tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});var u={vertical:!0},c={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:u},d={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]};finalMarkersInMap=c,"markers"==l&&(finalMarkersInMap=d),map=new jvm.Map({container:$("#"+n),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.Country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),"markers"==l&&(filteredMarkers=jsonMarkers,addMarkersToMap())},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var r=JSON.stringify(e),o="http://serverFiltering.com/?data="+encodeURIComponent(r);o="../json/countries_plus_markers2.json",$.getJSON(o,function(e){jsonCountries=readCountriesFromJSON(e.countries);var r=generateColorsForTheCountries(jsonCountries);reloadMap(r),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})};var Country=function(e,r,o){if(""==e)this.Country=r,this.Count=+o,this.Var=0,this.desc="abc";else{var n=!0,t=0;do{t++;var a="Name"+t,i="Value"+t;void 0===e[a]?n=!1:(this[a]=e[a],this[i]=e[i])}while(n);e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.Country)),this.Country=e.Country,this.Count=+e.Count,this.Var=e.Var,this.desc="abc"}},resetFiltersBox=function(){for(var e=0;numFilters>e;e++)$("#fbox"+e).text(""),$("#fbox"+e).val("");var r=generateColorsForTheCountries();reloadMap(r),filteredMarkers=jsonMarkers,addMarkersToMap()},Filter=function(e,r,o){this.Name=e,this.Value=r,this.Values=o},numFilters,currentFilter,countryValueToCheck;VectorialMap.prototype.createSlider=function(){slider=$("#slider").slider(),slider.slider("option","min",minRadius),slider.slider("option","max",maxRadius),slider.slider("option","range",!0),slider.slider("option","animate","slow"),slider.on("slidechange",function(e,r){sliderChanged()}),$("#slider").hide(),$("#minSlider").hide(),$("#maxSlider").hide()};var mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,r,o){var r="../mappingJSON/mappingCountriesSample.json",o="../mappingJSON/mappingMarkersSample.json";return r?o?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,r),jsonMapMarkers(e,o)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")};var Marker=function(e,r,o,n,t){if(""==e)this.Country=r,this.Count=+o,this.Var="",this.Latitude=n,this.Longitude=t,this.desc="abc";else{var a=!0,i=0;do{i++;var s="Name"+i,l="Value"+i;e[s]?(this[s]=e[s],this[l]=e[l]):a=!1}while(a);this.Country=e.Country,this.Count=+e.Count,this.Var=e.Var,this.Latitude=e.Latitude,this.Longitude=e.Longitude,this.desc="abc"}},Region=function(e,r){this.Region=e.name,this.Country=r,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,