function mapRange(e,r,o,n,t){return n+(t-n)*(e-r)/(o-r)}function buildCountryTooltip(e,r){var o=countryTooltip;return $.each(Object.keys(r),function(e,n){o=o.replace(n,r[n])}),o}function generateColorsForTheCountries(e){e||(e=jsonCountries);var r=[];return $.each(e,function(e,o){r[o.name]=o.count}),r}function readCountriesFromJSON(e){var r=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r.push(new Country(o)),r[e].Count>maxCount&&(maxCount=r[e].Count),r[e].Count<minCount&&(minCount=r[e].Count)}),r}function findCountryByName(e){var r=null;return $.each(jsonCountries,function(o,n){return n.country==e?r=n:void 0}),r}function readMinMax(e){minCount=1/0,maxCount=-(1/0);var r=[];for(var o in e)e.hasOwnProperty(o)&&r.push(o);$.each(r,function(e,r){var o=findCountryByName(r);o.Count>maxCount&&(maxCount=o.Count),o.Count<minCount&&(minCount=o.Count)})}function createFiltersBoxCheckboxes(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(jsonFiltersArray,function(e,r){function o(e){return"<p>"+JSON.stringify(e)+"</p>"}function n(){var e=$("p.status").empty();e.append(o(widget.checked()))}numFilters++;var t="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];r.continuous||$.each(r.values,function(e,r){a.push({id:e+1,label:r,isChecked:!1})});var i=r.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(t).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(t).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",n()),n()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){for(var e={},r=jsonFiltersArray.length,o=0,n=0;n<jsonFiltersArray.length;n++){for(var t="#box"+(n+1),a=getSelectedItems(t),i=[],s=Object.keys(a),u=0;u<s.length;u++)i.push(a[s[u]].label);s.length>0?e[jsonFiltersArray[n].name]=i.join():o++}o!=r&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function createFiltersBoxWithEnumeration(e){e.length;$.each(e,function(e,r){var o=r.Name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var n="";n+="<p><b>"+o+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+e+'"';var t=r.Values;n+='placeholder="'+t+'" +>',n+="</div>",$("filter-box").append(n),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})});var r='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(r),$("#filter_box_apply_filters").click(function(){for(var r={},o=e.length,n=0,t=0;t<e.length;t++){var a="#fbox"+t,i=$(a).val();""!==i?r[e[t].Name]=i:n++}n!=o&&filter(r)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getAllFilterValues(e){var r=[];if(-1!=String(e).indexOf(",")){var o=String(e).split(",");$.each(o,function(e,o){if(-1!=o.indexOf("-")){var n=String(o).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(o)})}else if(-1!=e.indexOf("-")){var n=String(e).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(e);return r}function checkWhatCountriesToAdd(e,r){var o=[];return $.each(jsonCountries,function(e,n){for(var t=0;;){t++;var a="name"+t,i="value"+t;if(!n[a])break;n[i]==r&&(countryValueToCheck=i,n[i]==r&&(o[n.country]=n.Count))}}),o}function checkWhatMarkersToAdd(e,r){var o=[];return $.each(jsonMarkers,function(n,t){$.each(Object.keys(t),function(n,a){a.toLowerCase()==e.name.toLowerCase()&&t[a]==r&&o.push(t)})}),o}function checkWhatCountriesMarkersToAdd(e,r){var o=[],n=[];return o=checkWhatCountriesToAdd(e,r),n=checkWhatMarkersToAdd(e,r),[o,n]}function checkFilterNameIsValid(e){var r=!1;return $.each(jsonFiltersArray,function(o,n){return n.name.toLowerCase()===e.toLowerCase()?(filterObject=n,void(r=!0)):void 0}),r}function checkFilterValuesAreValid(e,r){var o=!1;return $.each(r,function(e,r){return $.each(filterObject.Values,function(e,n){return n==r?void(o=!0):void 0}),o?void 0:void console.log("Invalid value for the filter: "+r)}),o}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readFiltersFromJSON(e){var r=[];return $.each(e,function(e,o){r.push(new Filter(o))}),console.log(r),r}function jsonMapCountries(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.country],a=0;o[e]=new Country("",t,a)}),mappingCountries=o,console.log(mappingCountries)})}function jsonMapMarkers(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.country],a=0,i=n[r.Latitude],s=n[r.Longitude];o[e]=new Marker("",t,a,i,s)}),mappingMarkers=o,console.log(mappingMarkers)})}function reloadMap(e){map.params.map==mType?(jsonCountries.length>0&&readMinMax(e),$("#"+mDiv).empty(),map=new jvm.Map({map:mType,backgroundColor:background,container:$("#"+mDiv),onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:e}]}})):(jsonCountries.length>0&&readMinMax(e),$("#"+mDiv).empty(),removeTooltip(),switchMap(mapType))}function removeTooltip(){$(".jvectormap-tip").remove()}function switchMap(e){$("#"+mDiv).empty(),removeTooltip();var r="countries"==dataType?generateColorsForTheCountries(e):[];map=new jvm.Map({map:e,backgroundColor:background,container:$("#"+mDiv),onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(r,o,n){var t=e.split("_")[0].toUpperCase(),a=-1;$.each(jsonCountries,function(e,r){return r.country==t?void(a=r):void 0});var i,s=!1;$.each(map.regions,function(e,r){return r.name==n?(i=r,void(s=!0)):void 0}),o.html(s?buildRegionTooltip(i):o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:r}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+mDiv).empty(),removeTooltip(),reloadMap(auxColors)}),thereAreMarkers&&addMarkersToMap()}function readMarkersFromJSON(e){var r=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r.push(new Marker(o));var n=r[e].Count;n>maxCount&&(maxCount=n),n<minCount&&(minCount=n)}),r}function addMarkersToMap(){var e=[];$.each(filteredMarkers,function(r,o){var n={latLng:[o.latitude,o.longitude],name:o.desc,style:{r:mapRange(o.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+o.icon+".png"}};e.push(n)}),map.addMarkers(e)}function buildMarkerTooltip(e,r){var o=markerTooltip;return $.each(Object.keys(r),function(e,n){o=o.replace(n,r[n])}),o}function filter(e){var r=Object.keys(e),o=r.length,n=0,t=new Array,a=new Array;for(u=0;o>u;u++)t[u]=new Array,a[u]=new Array;var i=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(r,function(r,o){if(!checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var i=e[o],s=getAllFilterValues(i);n++,$.each(s,function(e,o){var n=checkWhatCountriesMarkersToAdd(filterObject,o),i=n[0],s=n[1];$.each(Object.keys(i),function(e,o){var n=i[o];t[r][o]=n}),$.each(s,function(e,o){a[r].push(o)})})});var s=[];if(t.length>0){s=t[0];for(var u=0;u<t.length-1;u++)s=getCountriesIntersection(s,t[u+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var u=0;u<a.length-1;u++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[u+1])}addMarkersToMap()}}function getMarkersIntersection(e,r){var o=[];return $.each(e,function(e,n){var t=n.country;$.each(r,function(e,r){var a=r.country;t==a&&o.push(n)})}),o}function getCountriesIntersection(e,r){var o=[];return $.each(Object.keys(e),function(n,t){$.each(Object.keys(r),function(r,n){t==n&&(o[t]=e[t])})}),o}function applyMultipleFiltersProgramattically(e){var r=Object.keys(e),o=r.length,n=[],t=[];$.each(r,function(r,o){e[o]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(o,t){n[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,u="Value"+i;if(!t[s])break;t[s].toLowerCase()==a.toLowerCase()&&t[u]==e[a]&&n[o]++}})}),$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,u="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[u]==e[a]&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,r){var o=e.filter(function(e){return void 0!==e}).length,n=[],t=[];$.each(jsonCountries,function(o,t){n[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,u="Value"+i;if(void 0==t[s])break;t[s]===r[e].Name&&t[u]==a&&n[o]++}})});var a=[];$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,u="Value"+i;if(!n[s])break;n[s].toLowerCase()==r[e].Name.toLowerCase()&&n[u]==a&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,r){var o=[];return $.each(e,function(e,n){o[e]=new Region(n,r)}),e}function generateColorsForTheRegions(e){var r=e.split("_")[0].toUpperCase(),o=[];return $.each(jsonCountries,function(e,n){if(n.country==r&&n.Regions){var t=n.Regions;$.each(t,function(e,r){o[r.name]=100})}}),o}function buildRegionTooltip(e){var r=regionTooltip;return r=r.replace("name",e.name)}function addRegionsToMap(e){var r=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,o){function n(){var e,r={};r[maps.region];for(e in maps.regions)r[e]=t[Math.floor(Math.random()*t.length)];return r}if(o.country==r&&o.Regions){var t=(o.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(n()),maps.series.regions[0].setValues(n())}})}var vectorMap,jsonFilters=[],minColorMap,maxColorMap,mDiv,mType,background,filteredMarkers,thereAreMarkers=!1,VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,r,o,n,t,a,i,s,u){if(background=s,mType=i,jsonCountries=[],jsonMarkers=[],mDiv=n,minColorMap=t,maxColorMap=a,"countries"==u)jsonCountries=readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=u)return void console.error("You must give as input a list of markers or countries!");thereAreMarkers=!0,jsonMarkers=readMarkersFromJSON(e),filteredMarkers=jsonMarkers,numMarkers=jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}auxColors="countries"==u?generateColorsForTheCountries():[];var c={vertical:!0};markersWithLegend={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:c},markersWithoutLegend={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]},finalMarkersInMap=markersWithLegend,"markers"==u&&(finalMarkersInMap=markersWithoutLegend),map=new jvm.Map({container:$("#"+n),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,jsonMarkers[o]);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.name===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),"markers"==u&&(filteredMarkers=jsonMarkers,addMarkersToMap())};var Country=function(e){var r=e.attributes,o=this;$.each(Object.keys(r),function(e,n){o[n]=r[n]}),e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"},numFilters=0,resetFiltersBox=function(){for(var e=0;numFilters>e;e++)$("#fbox"+e).text(""),$("#fbox"+e).val("");var r=generateColorsForTheCountries();reloadMap(r),filteredMarkers=jsonMarkers,addMarkersToMap()},Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,r,o){var r="../mappingJSON/mappingCountriesSample.json",o="../mappingJSON/mappingMarkersSample.json";return r?o?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,r),jsonMapMarkers(e,o)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var r=JSON.stringify(e),o="http://serverFiltering.com/?data="+encodeURIComponent(r);o="../json/countries_plus_markers2.json",$.getJSON(o,function(e){jsonCountries=readCountriesFromJSON(e.countries);var r=generateColorsForTheCountries(jsonCountries);reloadMap(r),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})};var Marker=function(e){var r=e.attributes,o=this;$.each(Object.keys(r),function(e,n){o[n]=r[n]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"},Region=function(e,r){this.Region=e.name,this.country=r,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,