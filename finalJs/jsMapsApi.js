function mapRange(e,t,r,o,n){return o+(n-o)*(e-t)/(r-t)}function buildCountryTooltip(e,t){var r=countryTooltip;return $.each(Object.keys(t),function(e,o){r=r.replace(o,t[o])}),r}function getAllFilterValues(e){var t=[];if(-1!=String(e).indexOf(",")){var r=String(e).split(",");$.each(r,function(e,r){if(-1!=r.indexOf("-")){var o=String(r).split("-");checkFilterValuesAreValid(filterObject,o);for(var n=o[0],a=o[1];a>=n;n++)t.push(n)}else t.push(r)})}else if(console.log("single"),-1!=e.indexOf("-")){console.log("range");var o=String(e).split("-");console.log(o),checkFilterValuesAreValid(filterObject,o);for(var n=o[0],a=o[1];a>=n;n++)t.push(n)}else console.log("single value"),checkFilterValuesAreValid(filterObject,e.split("")),t.push(e);return t}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function checkFilterValuesAreValid(e,t){var r=!0;if(1==e.continuous){var o=e.min,n=e.max;$.each(t,function(t,a){return console.log(+a),o>+a||+a>n?(r=!1,void highlightInputBoxError(e,a)):void 0})}else $.each(t,function(t,o){r=!1,$.each(e.values,function(e,t){return t==o?void(r=!0):void 0}),r||highlightInputBoxError(e,o)});return r}function highlightInputBoxError(e,t){console.log("Invalid value for the filter: "+t);var r=e.name;$.each(jsonFiltersArray,function(e,t){r==t.name&&$("#fbox"+e).parent().addClass("has-error")})}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,t){map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function jsonMapCountries(e,t){var r=[];$.getJSON(t,function(t){$.each(e,function(e,o){var n=o[t.country],a=0;r[e]=new Country("",n,a)}),mappingCountries=r,console.log(mappingCountries)})}function jsonMapMarkers(e,t){var r=[];$.getJSON(t,function(t){$.each(e,function(e,o){var n=o[t.country],a=0,i=o[t.Latitude],s=o[t.Longitude];r[e]=new Marker("",n,a,i,s)}),mappingMarkers=r,console.log(mappingMarkers)})}function findMapById(e){var t=null;return $.each(vMaps,function(r,o){o.id==e&&(t=o)}),t}function removeBackButton(){$(".jvectormap-goback").remove()}function readMarkersFromJSON(e){var t=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,r){t.push(new Marker(r));var o=t[e].Count;o>maxCount&&(maxCount=o),o<minCount&&(minCount=o)}),t}function buildMarkerTooltip(e,t){var r=markerTooltip;return $.each(Object.keys(t),function(e,o){r=r.replace(o,t[o])}),r}function getMarkersIntersection(e,t){var r=[];return $.each(e,function(e,o){var n=o.country;$.each(t,function(e,t){var a=t.country;n==a&&r.push(o)})}),r}function getCountriesIntersection(e,t){var r=[];return $.each(Object.keys(e),function(o,n){$.each(Object.keys(t),function(t,o){n==o&&(r[n]=e[n])})}),r}function applyMultipleFiltersProgramattically(e){var t=Object.keys(e),r=t.length,o=[],n=[];$.each(t,function(t,r){e[r]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(r,n){o[r]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[c]==e[a]&&o[r]++}})}),$.each(jsonCountries,function(e,t){o[e]==r&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(r,o){n[r]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!o[s])break;o[s].toLowerCase()==a.toLowerCase()&&o[c]==e[a]&&n[r]++}})}),$.each(jsonMarkers,function(e,t){n[e]==r&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,t){var r=e.filter(function(e){return void 0!==e}).length,o=[],n=[];$.each(jsonCountries,function(r,n){o[r]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(void 0==n[s])break;n[s]===t[e].Name&&n[c]==a&&o[r]++}})});var a=[];$.each(jsonCountries,function(e,t){o[e]==r&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(r,o){n[r]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!o[s])break;o[s].toLowerCase()==t[e].Name.toLowerCase()&&o[c]==a&&n[r]++}})}),$.each(jsonMarkers,function(e,t){n[e]==r&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,t){var r=[];return $.each(e,function(e,o){r[e]=new Region(o,t)}),e}function generateColorsForTheRegions(e){var t=e.split("_")[0].toUpperCase(),r=[];return $.each(jsonCountries,function(e,o){if(o.country==t&&o.Regions){var n=o.Regions;$.each(n,function(e,t){r[t.name]=100})}}),r}function buildRegionTooltip(e){var t=regionTooltip;return t=t.replace("name",e.name)}function addRegionsToMap(e){var t=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,r){function o(){var e,t={};t[maps.region];for(e in maps.regions)t[e]=n[Math.floor(Math.random()*n.length)];return t}if(r.country==t&&r.Regions){var n=(r.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(o()),maps.series.regions[0].setValues(o())}})}var vMaps=[],VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,t,r,o,n,a,i,s,c,u){if(vMaps.push(this),this.id=u,this.background=s,this.mType=i,this.dataType=c,this.jsonCountries=[],this.jsonMarkers=[],this.mDiv=o,this.minColorMap=n,this.maxColorMap=a,"countries"==c)this.jsonCountries=this.readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=c)return void console.error("You must give as input a list of markers or countries!");this.thereAreMarkers=!0,this.jsonMarkers=readMarkersFromJSON(e),this.filteredMarkers=this.jsonMarkers,this.numMarkers=this.jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}this.auxColors="countries"==c?this.generateColorsForTheCountries():[];var l={vertical:!0};markersWithLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount],legend:l},markersWithoutLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount]},finalMarkersInMap=markersWithLegend,"markers"==c&&(finalMarkersInMap=markersWithoutLegend);var p=this;this.map=new jvm.Map({container:$("#"+p.mDiv),map:p.mType,backgroundColor:p.background,onRegionClick:function(e,t){countryCode=t.toLowerCase();var r=countryCode+"_mill_en";p.switchMap(r)},onMarkerTipShow:function(e,t,r){var o=buildMarkerTooltip(p.jsonMarkers,p.jsonMarkers[r]);t.html(o)},onRegionTipShow:function(e,t,r){var o=-1;if($.each(p.jsonCountries,function(e,t){return t.name===r?void(o=t):void 0}),-1!=o){var n=buildCountryTooltip(t,o);t.html(n)}else t.html(t.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[p.minColorMap,p.maxColorMap],attribute:"fill",values:this.auxColors}]}}),"markers"==c&&(this.filteredMarkers=this.jsonMarkers,this.addMarkersToMap(this.filteredMarkers))};var Country=function(e){var t=e.attributes,r=this;$.each(Object.keys(t),function(e,o){r[o]=t[o]}),e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"};VectorialMap.prototype.generateColorsForTheCountries=function(e){e||(e=this.jsonCountries);var t=[];return $.each(e,function(e,r){t[r.name]=r.count}),t},VectorialMap.prototype.readCountriesFromJSON=function(e){var t=[];return this.minCount=1/0,this.maxCount=-(1/0),$.each(e,function(e,r){t.push(new Country(r)),t[e].Count>this.maxCount&&(this.maxCount=t[e].Count),t[e].Count<this.minCount&&(this.minCount=t[e].Count)}),t},VectorialMap.prototype.findCountryByName=function(e){var t=null;return $.each(this.jsonCountries,function(r,o){return o.name==e?t=o:void 0}),t},VectorialMap.prototype.readMinMax=function(e){this.minCount=1/0,this.maxCount=-(1/0);var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);var o=this;$.each(t,function(e,t){var r=o.findCountryByName(t);r.Count>o.maxCount&&(o.maxCount=r.Count),r.Count<o.minCount&&(o.minCount=r.Count)})};var FiltersBox=function(e,t,r){this.id=e,this.map=t,this.filterType=r};FiltersBox.prototype.resetFiltersBox=function(){for(var e=0;e<this.filters.length;e++){var t="#fbox"+e+"-"+fBox.map;$(current).text(""),$(t).val("")}var r=generateColorsForTheCountries();reloadMap(r),filteredMarkers=jsonMarkers,addMarkersToMap()},FiltersBox.prototype.createFiltersBoxWithEnumeration=function(){var e=this;$.each(this.filters,function(t,r){var o=r.name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var n="";n+="<p><b>"+o+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+t+"-"+e.map+'"',n+=r.continuous?'placeholder="'+r.min+"..."+r.max+'" +>':'placeholder="'+r.values.join()+'" +>',n+="</div>",$("#"+e.id).append(n)});var t='<button id="'+e.id+'_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="'+e.id+'_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button>';$("#"+e.id).append(t),$("#"+e.id+"_apply_filters").click(function(){console.log("applying filters..."),e.restoreInputBoxes();for(var t={},r=e.filters.length,o=0,n=0;r>n;n++){var a="#fbox"+n+"-"+e.map,i=$(a).val();""!==i?t[e.filters[n].name]=i:o++}o!=r&&e.filter(t)}),$("#"+e.id+"_reset_filters").click(function(){e.restoreInputBoxes(),e.resetFiltersBox()})},FiltersBox.prototype.createFiltersBoxCheckboxes=function(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(this.filters,function(e,t){function r(e){return"<p>"+JSON.stringify(e)+"</p>"}function o(){var e=$("p.status").empty();e.append(r(widget.checked()))}var n="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];t.continuous||$.each(t.values,function(e,t){a.push({id:e+1,label:t,isChecked:!1})});var i=t.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(n).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(n).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",o()),o()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var e={},t=jsonFiltersArray.length,r=0,o=0;o<jsonFiltersArray.length;o++){for(var n="#box"+(o+1),a=getSelectedItems(n),i=[],s=Object.keys(a),c=0;c<s.length;c++)i.push(a[s[c]].label);s.length>0?e[jsonFiltersArray[o].name]=i.join():r++}r!=t&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})},FiltersBox.prototype.checkWhatCountriesToAdd=function(e,t){var r=[];return $.each(jsonCountries,function(e,o){for(var n=0;;){n++;var a="name"+n,i="value"+n;if(!o[a])break;o[i]==t&&(countryValueToCheck=i,o[i]==t&&(r[o.country]=o.Count))}}),r},FiltersBox.prototype.checkWhatMarkersToAdd=function(e,t,r){var o=[];return $.each(r.jsonMarkers,function(r,n){$.each(Object.keys(n),function(r,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==t&&o.push(n)})}),o},FiltersBox.prototype.checkWhatCountriesMarkersToAdd=function(e,t,r){var o=[],n=[];return"countries"==r.datatype?o=this.checkWhatCountriesToAdd(e,t,r):n=this.checkWhatMarkersToAdd(e,t,r),[o,n]},FiltersBox.prototype.checkFilterNameIsValid=function(e){var t=!1;return $.each(this.filters,function(r,o){return o.name.toLowerCase()===e.toLowerCase()?(filterObject=o,void(t=!0)):void 0}),t},FiltersBox.prototype.restoreInputBoxes=function(){for(var e=this,t=0;t<this.filters.length;t++)$("#fbox"+t+"-"+e.map).parent().removeClass("has-error")},FiltersBox.prototype.readFiltersFromJSON=function(e){var t=[];$.each(e,function(e,r){t.push(new Filter(r))}),this.filters=t};var Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,t,r){var t="../mappingJSON/mappingCountriesSample.json",r="../mappingJSON/mappingMarkersSample.json";return t?r?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,t),jsonMapMarkers(e,r)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var t=JSON.stringify(e),r="http://serverFiltering.com/?data="+encodeURIComponent(t);r="../json/countries_plus_markers2.json",$.getJSON(r,function(e){jsonCountries=readCountriesFromJSON(e.countries);var t=generateColorsForTheCountries(jsonCountries);reloadMap(t),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})},VectorialMap.prototype.reloadMap=function(e){this.jsonCountries.length>0&&this.readMinMax(e),$("#"+this.mDiv).empty();var t=this;this.map=new jvm.Map({map:t.mType,backgroundColor:t.background,container:$("#"+t.mDiv),onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";t.switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(t.jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(t.jsonCountries,function(e,t){return t.name===o?void(n=t):void 0}),-1!=n){var a=buildCountryTooltip(r,n);r.html(a)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[t.minColorMap,t.maxColorMap],attribute:"fill",values:e}]}}),t.thereAreMarkers&&t.addMarkersToMap()},VectorialMap.prototype.removeTooltip=function(){$(".jvectormap-tip").remove()},VectorialMap.prototype.switchMap=function(e){$("#"+this.mDiv).empty(),this.removeTooltip();var t="countries"==dataType?this.generateColorsForTheCountries(this.jsonCountries):[],r=this;this.map=new jvm.Map({map:e,backgroundColor:r.background,container:$("#"+r.mDiv),onMarkerTipShow:function(e,t,o){var n=buildMarkerTooltip(r.jsonMarkers,o);t.html(n)},onRegionTipShow:function(t,o,n){var a=e.split("_")[0].toUpperCase(),i=-1;$.each(r.jsonCountries,function(e,t){return t.country==a?void(i=t):void 0});var s,c=!1;$.each(r.map.regions,function(e,t){return t.name==n?(s=t,void(c=!0)):void 0}),o.html(c?buildRegionTooltip(s):o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[r.minColorMap,r.maxColorMap],attribute:"fill",values:t}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+this.mDiv).empty(),r.removeTooltip(),r.reloadMap(r.auxColors)}),this.thereAreMarkers&&this.addMarkersToMap(this.filteredMarkers)};var Marker=function(e){var t=e.attributes,r=this;$.each(Object.keys(t),function(e,o){r[o]=t[o]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"};VectorialMap.prototype.addMarkersToMap=function(){console.log("adding markers to map");var e=[];$.each(this.filteredMarkers,function(t,r){var o={latLng:[r.latitude,r.longitude],name:r.desc,style:{r:mapRange(r.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+r.icon+".png"}};e.push(o)}),this.map.addMarkers(e)},FiltersBox.prototype.filter=function(e){var t=this,r=Object.keys(e),o=r.length,n=0,a=new Array,i=new Array;for(l=0;o>l;l++)a[l]=new Array,i[l]=new Array;var s=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(s=!0,t.resetFilters(),void t.resetFiltersBox()):void 0}),!s){var c=findMapById(this.map);$.each(r,function(r,o){if(!t.checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var s=e[o],u=getAllFilterValues(s);n++,$.each(u,function(e,o){var n=t.checkWhatCountriesMarkersToAdd(filterObject,s,c),u=n[0],l=n[1];$.each(Object.keys(u),function(e,t){var o=u[t];a[r][t]=o}),$.each(l,function(e,t){i[r].push(t)})})});var u=[];if(a.length>0){u=a[0];for(var l=0;l<a.length-1;l++)u=getCountriesIntersection(u,a[l+1])}if(c.reloadMap(u),filteredMarkers=[],i.length>0){filteredMarkers=i[0];for(var l=0;l<i.length-1;l++)filteredMarkers=getMarkersIntersection(filteredMarkers,i[l+1])}console.log(filteredMarkers.length),c.filteredMarkers=filteredMarkers,c.addMarkersToMap()}};var Region=function(e,t){this.Region=e.name,this.country=t,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,