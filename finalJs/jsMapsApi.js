function mapRange(e,t,o,r,n){return r+(n-r)*(e-t)/(o-t)}function buildCountryTooltip(e,t){var o=countryTooltip;return $.each(Object.keys(t),function(e,r){o=o.replace(r,t[r])}),o}function resetFiltersBox(){for(var e=0;e<numFilters;e++){$("#fbox"+e).text(""),$("#fbox"+e).val("")}var t=generateColorsForTheCountries();reloadMap(t),filteredMarkers=jsonMarkers,addMarkersToMap()}function getAllFilterValues(e){var t=[];if(-1!=String(e).indexOf(",")){var o=String(e).split(",");$.each(o,function(e,o){if(-1!=o.indexOf("-")){var r=String(o).split("-");checkFilterValuesAreValid(filterObject,r);for(var n=r[0],a=r[1];a>=n;n++)t.push(n)}else t.push(o)})}else if(console.log("single"),-1!=e.indexOf("-")){console.log("range");var r=String(e).split("-");console.log(r),checkFilterValuesAreValid(filterObject,r);for(var n=r[0],a=r[1];a>=n;n++)t.push(n)}else console.log("single value"),checkFilterValuesAreValid(filterObject,e.split("")),t.push(e);return t}function checkWhatCountriesToAdd(e,t){var o=[];return $.each(jsonCountries,function(e,r){for(var n=0;;){n++;var a="name"+n,i="value"+n;if(!r[a])break;r[i]==t&&(countryValueToCheck=i,r[i]==t&&(o[r.country]=r.Count))}}),o}function checkWhatMarkersToAdd(e,t){var o=[];return $.each(jsonMarkers,function(r,n){$.each(Object.keys(n),function(r,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==t&&o.push(n)})}),o}function checkWhatCountriesMarkersToAdd(e,t){var o=[],r=[];return o=checkWhatCountriesToAdd(e,t),r=checkWhatMarkersToAdd(e,t),[o,r]}function checkFilterNameIsValid(e){var t=!1;return $.each(jsonFiltersArray,function(o,r){return r.name.toLowerCase()===e.toLowerCase()?(filterObject=r,void(t=!0)):void 0}),t}function restoreInputBoxes(){for(var e=0;e<jsonFiltersArray.length;e++)$("#fbox"+e).parent().removeClass("has-error")}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function checkFilterValuesAreValid(e,t){var o=!0;if(1==e.continuous){var r=e.min,n=e.max;$.each(t,function(t,a){return console.log(+a),r>+a||+a>n?(o=!1,void highlightInputBoxError(e,a)):void 0})}else $.each(t,function(t,r){o=!1,$.each(e.values,function(e,t){return t==r?void(o=!0):void 0}),o||highlightInputBoxError(e,r)});return o}function highlightInputBoxError(e,t){console.log("Invalid value for the filter: "+t);var o=e.name;$.each(jsonFiltersArray,function(e,t){o==t.name&&$("#fbox"+e).parent().addClass("has-error")})}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,t){map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function jsonMapCountries(e,t){var o=[];$.getJSON(t,function(t){$.each(e,function(e,r){var n=r[t.country],a=0;o[e]=new Country("",n,a)}),mappingCountries=o,console.log(mappingCountries)})}function jsonMapMarkers(e,t){var o=[];$.getJSON(t,function(t){$.each(e,function(e,r){var n=r[t.country],a=0,i=r[t.Latitude],s=r[t.Longitude];o[e]=new Marker("",n,a,i,s)}),mappingMarkers=o,console.log(mappingMarkers)})}function removeBackButton(){$(".jvectormap-goback").remove()}function readMarkersFromJSON(e){var t=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){t.push(new Marker(o));var r=t[e].Count;r>maxCount&&(maxCount=r),r<minCount&&(minCount=r)}),t}function buildMarkerTooltip(e,t){var o=markerTooltip;return $.each(Object.keys(t),function(e,r){o=o.replace(r,t[r])}),o}function filter(e){var t=Object.keys(e),o=t.length,r=0,n=new Array,a=new Array;for(c=0;o>c;c++)n[c]=new Array,a[c]=new Array;var i=!1;if($.each(t,function(e,t){return"all"==t.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(t,function(t,o){if(!checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var i=e[o],s=getAllFilterValues(i);r++,$.each(s,function(e,o){var r=checkWhatCountriesMarkersToAdd(filterObject,o),i=r[0],s=r[1];$.each(Object.keys(i),function(e,o){var r=i[o];n[t][o]=r}),$.each(s,function(e,o){a[t].push(o)})})});var s=[];if(n.length>0){s=n[0];for(var c=0;c<n.length-1;c++)s=getCountriesIntersection(s,n[c+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var c=0;c<a.length-1;c++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[c+1])}addMarkersToMap()}}function getMarkersIntersection(e,t){var o=[];return $.each(e,function(e,r){var n=r.country;$.each(t,function(e,t){var a=t.country;n==a&&o.push(r)})}),o}function getCountriesIntersection(e,t){var o=[];return $.each(Object.keys(e),function(r,n){$.each(Object.keys(t),function(t,r){n==r&&(o[n]=e[n])})}),o}function applyMultipleFiltersProgramattically(e){var t=Object.keys(e),o=t.length,r=[],n=[];$.each(t,function(t,o){e[o]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(o,n){r[o]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[c]==e[a]&&r[o]++}})}),$.each(jsonCountries,function(e,t){r[e]==o&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,r){n[o]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!r[s])break;r[s].toLowerCase()==a.toLowerCase()&&r[c]==e[a]&&n[o]++}})}),$.each(jsonMarkers,function(e,t){n[e]==o&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,t){var o=e.filter(function(e){return void 0!==e}).length,r=[],n=[];$.each(jsonCountries,function(o,n){r[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(void 0==n[s])break;n[s]===t[e].Name&&n[c]==a&&r[o]++}})});var a=[];$.each(jsonCountries,function(e,t){r[e]==o&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,r){n[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!r[s])break;r[s].toLowerCase()==t[e].Name.toLowerCase()&&r[c]==a&&n[o]++}})}),$.each(jsonMarkers,function(e,t){n[e]==o&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,t){var o=[];return $.each(e,function(e,r){o[e]=new Region(r,t)}),e}function generateColorsForTheRegions(e){var t=e.split("_")[0].toUpperCase(),o=[];return $.each(jsonCountries,function(e,r){if(r.country==t&&r.Regions){var n=r.Regions;$.each(n,function(e,t){o[t.name]=100})}}),o}function buildRegionTooltip(e){var t=regionTooltip;return t=t.replace("name",e.name)}function addRegionsToMap(e){var t=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,o){function r(){var e,t={};t[maps.region];for(e in maps.regions)t[e]=n[Math.floor(Math.random()*n.length)];return t}if(o.country==t&&o.Regions){var n=(o.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(r()),maps.series.regions[0].setValues(r())}})}var VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,t,o,r,n,a,i,s,c){if(this.background=s,this.mType=i,this.dataType=c,this.jsonCountries=[],this.jsonMarkers=[],this.mDiv=r,this.minColorMap=n,this.maxColorMap=a,"countries"==c)this.jsonCountries=this.readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=c)return void console.error("You must give as input a list of markers or countries!");this.thereAreMarkers=!0,this.jsonMarkers=readMarkersFromJSON(e),this.filteredMarkers=this.jsonMarkers,this.numMarkers=this.jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}this.auxColors="countries"==c?this.generateColorsForTheCountries():[];var u={vertical:!0};markersWithLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount],legend:u},markersWithoutLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount]},finalMarkersInMap=markersWithLegend,"markers"==c&&(finalMarkersInMap=markersWithoutLegend);var l=this;this.map=new jvm.Map({container:$("#"+l.mDiv),map:l.mType,backgroundColor:l.background,onRegionClick:function(e,t){countryCode=t.toLowerCase();var o=countryCode+"_mill_en";l.switchMap(o)},onMarkerTipShow:function(e,t,o){var r=buildMarkerTooltip(l.jsonMarkers,l.jsonMarkers[o]);t.html(r)},onRegionTipShow:function(e,t,o){var r=-1;if($.each(l.jsonCountries,function(e,t){return t.name===o?void(r=t):void 0}),-1!=r){var n=buildCountryTooltip(t,r);t.html(n)}else t.html(t.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[l.minColorMap,l.maxColorMap],attribute:"fill",values:this.auxColors}]}}),"markers"==c&&(this.filteredMarkers=this.jsonMarkers,this.addMarkersToMap(this.filteredMarkers))};var Country=function(e){var t=e.attributes,o=this;$.each(Object.keys(t),function(e,r){o[r]=t[r]}),e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"};VectorialMap.prototype.generateColorsForTheCountries=function(e){e||(e=this.jsonCountries);var t=[];return $.each(e,function(e,o){t[o.name]=o.count}),t},VectorialMap.prototype.readCountriesFromJSON=function(e){var t=[];return this.minCount=1/0,this.maxCount=-(1/0),$.each(e,function(e,o){t.push(new Country(o)),t[e].Count>this.maxCount&&(this.maxCount=t[e].Count),t[e].Count<this.minCount&&(this.minCount=t[e].Count)}),t},VectorialMap.prototype.findCountryByName=function(e){var t=null;return $.each(this.jsonCountries,function(o,r){return r.name==e?t=r:void 0}),t},VectorialMap.prototype.readMinMax=function(e){this.minCount=1/0,this.maxCount=-(1/0);var t=[];for(var o in e)e.hasOwnProperty(o)&&t.push(o);var r=this;$.each(t,function(e,t){var o=r.findCountryByName(t);o.Count>r.maxCount&&(r.maxCount=o.Count),o.Count<r.minCount&&(r.minCount=o.Count)})};var FiltersBox=function(e,t){this.map=e,this.filterType=t};FiltersBox.prototype.createFiltersBoxWithEnumeration=function(){$.each(this.filters,function(e,t){var o=t.name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var r="";r+="<p><b>"+o+":</b></p>",r+='<div class="form-group">',r+='<input type="text" class="form-control" id="fbox'+e+'"',r+=t.continuous?'placeholder="'+t.min+"..."+t.max+'" +>':'placeholder="'+t.values.join()+'" +>',r+="</div>",$("filter-box").append(r),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})}),$(".form-control").append('<span class="glyphicon glyphicon-remove form-control-feedback">');var e='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(e),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var e={},t=jsonFilters.length,o=0,r=0;r<jsonFilters.length;r++){var n="#fbox"+r,a=$(n).val();""!==a?e[jsonFilters[r].name]=a:o++}o!=t&&filter(e)}),$("#filter_box_reset_filters").click(function(){restoreInputBoxes(),resetFiltersBox()})},FiltersBox.prototype.createFiltersBoxCheckboxes=function(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(this.filters,function(e,t){function o(e){return"<p>"+JSON.stringify(e)+"</p>"}function r(){var e=$("p.status").empty();e.append(o(widget.checked()))}var n="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];t.continuous||$.each(t.values,function(e,t){a.push({id:e+1,label:t,isChecked:!1})});var i=t.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(n).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(n).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",r()),r()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var e={},t=jsonFiltersArray.length,o=0,r=0;r<jsonFiltersArray.length;r++){for(var n="#box"+(r+1),a=getSelectedItems(n),i=[],s=Object.keys(a),c=0;c<s.length;c++)i.push(a[s[c]].label);s.length>0?e[jsonFiltersArray[r].name]=i.join():o++}o!=t&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})},FiltersBox.prototype.readFiltersFromJSON=function(e){var t=[];$.each(e,function(e,o){t.push(new Filter(o))}),this.filters=t};var Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,t,o){var t="../mappingJSON/mappingCountriesSample.json",o="../mappingJSON/mappingMarkersSample.json";return t?o?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,t),jsonMapMarkers(e,o)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var t=JSON.stringify(e),o="http://serverFiltering.com/?data="+encodeURIComponent(t);o="../json/countries_plus_markers2.json",$.getJSON(o,function(e){jsonCountries=readCountriesFromJSON(e.countries);var t=generateColorsForTheCountries(jsonCountries);reloadMap(t),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})},VectorialMap.prototype.reloadMap=function(e){this.jsonCountries.length>0&&this.readMinMax(e),$("#"+this.mDiv).empty();var t=this;this.map=new jvm.Map({map:t.mType,backgroundColor:t.background,container:$("#"+t.mDiv),onRegionClick:function(e,o){countryCode=o.toLowerCase();var r=countryCode+"_mill_en";t.switchMap(r)},onMarkerTipShow:function(e,o,r){var n=buildMarkerTooltip(t.jsonMarkers,r);o.html(n)},onRegionTipShow:function(e,o,r){var n=-1;if($.each(t.jsonCountries,function(e,t){return t.name===r?void(n=t):void 0}),-1!=n){var a=buildCountryTooltip(o,n);o.html(a)}else o.html(o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[t.minColorMap,t.maxColorMap],attribute:"fill",values:e}]}}),t.thereAreMarkers&&t.addMarkersToMap()},VectorialMap.prototype.removeTooltip=function(){$(".jvectormap-tip").remove()},VectorialMap.prototype.switchMap=function(e){$("#"+this.mDiv).empty(),this.removeTooltip();var t="countries"==dataType?this.generateColorsForTheCountries(this.jsonCountries):[],o=this;this.map=new jvm.Map({map:e,backgroundColor:o.background,container:$("#"+o.mDiv),onMarkerTipShow:function(e,t,r){var n=buildMarkerTooltip(o.jsonMarkers,r);t.html(n)},onRegionTipShow:function(t,r,n){var a=e.split("_")[0].toUpperCase(),i=-1;$.each(o.jsonCountries,function(e,t){return t.country==a?void(i=t):void 0});var s,c=!1;$.each(o.map.regions,function(e,t){return t.name==n?(s=t,void(c=!0)):void 0}),r.html(c?buildRegionTooltip(s):r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[o.minColorMap,o.maxColorMap],attribute:"fill",values:t}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+this.mDiv).empty(),o.removeTooltip(),o.reloadMap(o.auxColors)}),this.thereAreMarkers&&this.addMarkersToMap(this.filteredMarkers)};var Marker=function(e){var t=e.attributes,o=this;$.each(Object.keys(t),function(e,r){o[r]=t[r]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"};VectorialMap.prototype.addMarkersToMap=function(){var e=[];$.each(this.filteredMarkers,function(t,o){var r={latLng:[o.latitude,o.longitude],name:o.desc,style:{r:mapRange(o.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+o.icon+".png"}};e.push(r)}),this.map.addMarkers(e)};var Region=function(e,t){this.Region=e.name,this.country=t,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJjb3VudHJpZXMuanMiLCJjcmVhdGVGaWx0ZXJzLmpzIiwiZmlsdGVycy1hdXhpbGlhcnkuanMiLCJmaWx0ZXJzLmpzIiwianNvbi1tYXBwaW5nLmpzIiwibWFwcy1hdXhpbGlhcnkuanMiLCJtYXJrZXJzLmpzIiwibXVsdGlwbGUtZmlsdGVycy5qcyIsInJlZ2lvbnMuanMiXSwibmFtZXMiOlsibWFwUmFuZ2UiLCJ2YWx1ZSIsImxvdzEiLCJoaWdoMSIsImxvdzIiLCJoaWdoMiIsImJ1aWxkQ291bnRyeVRvb2x0aXAiLCJjb3VudHJ5TmFtZSIsImNvdW50cnkiLCJmaW5hbFRvb2x0aXAiLCJjb3VudHJ5VG9vbHRpcCIsIiQiLCJlYWNoIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4IiwiYXR0ciIsInJlcGxhY2UiLCJyZXNldEZpbHRlcnNCb3giLCJpIiwibnVtRmlsdGVycyIsInRleHQiLCJ2YWwiLCJjb2xvcnMiLCJnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyIsInJlbG9hZE1hcCIsImZpbHRlcmVkTWFya2VycyIsImpzb25NYXJrZXJzIiwiYWRkTWFya2Vyc1RvTWFwIiwiZ2V0QWxsRmlsdGVyVmFsdWVzIiwiZmlsdGVyVmFsdWUiLCJyZXR1cm5QYXJ0cyIsIlN0cmluZyIsImluZGV4T2YiLCJlbnVtZXJhdGlvblBhcnRzIiwic3BsaXQiLCJjdXJyZW50RW51bWVyYXRpb24iLCJyYW5nZVBhcnRzIiwiY2hlY2tGaWx0ZXJWYWx1ZXNBcmVWYWxpZCIsImZpbHRlck9iamVjdCIsIm1pbiIsIm1heCIsInB1c2giLCJjb25zb2xlIiwibG9nIiwic3ViUGFydHMiLCJjaGVja1doYXRDb3VudHJpZXNUb0FkZCIsInNlbGVjdGVkRmlsdGVyIiwiY291bnRyaWVzIiwianNvbkNvdW50cmllcyIsImN1cnJlbnRDb3VudHJ5IiwiY3VycmVudE5hbWVUb0NoZWNrIiwiY3VycmVudFZhbHVlIiwiY291bnRyeVZhbHVlVG9DaGVjayIsIkNvdW50IiwiY2hlY2tXaGF0TWFya2Vyc1RvQWRkIiwibWFya2VycyIsImN1cnJlbnRNYXJrZXIiLCJ0b0xvd2VyQ2FzZSIsIm5hbWUiLCJjaGVja1doYXRDb3VudHJpZXNNYXJrZXJzVG9BZGQiLCJjb3VudHJpZXNUb0FkZCIsIm1hcmtlcnNUb0FkZCIsImNoZWNrRmlsdGVyTmFtZUlzVmFsaWQiLCJmaWx0ZXJOYW1lIiwidmFsaWQiLCJqc29uRmlsdGVyc0FycmF5IiwiY3VycmVudEZpbHRlciIsInJlc3RvcmVJbnB1dEJveGVzIiwibGVuZ3RoIiwicGFyZW50IiwicmVtb3ZlQ2xhc3MiLCJnZXRTZWxlY3RlZEl0ZW1zIiwiYm94SUQiLCJkcm9wZG93bkNoZWNrYm94IiwiZmlsdGVyIiwiZmlsdGVyVmFsdWVzIiwiY29udGludW91cyIsImhpZ2hsaWdodElucHV0Qm94RXJyb3IiLCJ2YWx1ZXMiLCJmaWx0ZXJUb0ZpbmQiLCJhZGRDbGFzcyIsInJlc2V0RmlsdGVycyIsIm1hcCIsImFkZE1hcmtlciIsImxhdExuZyIsIkxhdGl0dWRlIiwiTG9uZ2l0dWRlIiwiZGVzYyIsInN0eWxlIiwiZmlsbCIsInIiLCJtaW5Db3VudCIsIm1heENvdW50IiwibWluUmFkaXVzIiwibWF4UmFkaXVzIiwianNvbk1hcENvdW50cmllcyIsImpzb24iLCJjb3VudHJpZXNNYXBwaW5nSnNvbiIsImdldEpTT04iLCJqc29uTWFwcGluZyIsImN1cnJlbnRKU09OIiwiY291bnQiLCJDb3VudHJ5IiwibWFwcGluZ0NvdW50cmllcyIsImpzb25NYXBNYXJrZXJzIiwibWFya2Vyc01hcHBpbmdKc29uIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJNYXJrZXIiLCJtYXBwaW5nTWFya2VycyIsInJlbW92ZUJhY2tCdXR0b24iLCJyZW1vdmUiLCJyZWFkTWFya2Vyc0Zyb21KU09OIiwiSW5maW5pdHkiLCJjdXJyZW50SlNPTk1hcmtlciIsImN1cnJlbnRDb3VudFZhbHVlIiwiYnVpbGRNYXJrZXJUb29sdGlwIiwibWFya2VyIiwibWFya2VyVG9vbHRpcCIsImlucHV0QXJncyIsIm51bWJlcktleXMiLCJ2YWxpZEZpbHRlcnMiLCJjb3VudHJpZXNCeUZpbHRlciIsIkFycmF5IiwibWFya2Vyc0J5RmlsdGVyIiwiZXhpdCIsImZpbmFsUGFydHMiLCJwYXJ0IiwiY2hlY2tSZXR1cm4iLCJjb3VudHJpZXNBdXgiLCJtYXJrZXJzQXV4IiwiaiIsImN1cnJlbnRLZXkiLCJrZXlWYWx1ZSIsImZpbmFsQ291bnRyaWVzIiwiZ2V0Q291bnRyaWVzSW50ZXJzZWN0aW9uIiwiZ2V0TWFya2Vyc0ludGVyc2VjdGlvbiIsIm1hcmtlcnNHcm91cDEiLCJtYXJrZXJzR3JvdXAyIiwibWFya2VyMSIsIm1hcmtlcjFDb3VudHJ5IiwibWFya2VyMiIsIm1hcmtlcjJDb3VudHJ5IiwiY291bnRyaWVzR3JvdXAxIiwiY291bnRyaWVzR3JvdXAyIiwiY291bnRyeU5hbWUxIiwiY291bnRyeU5hbWUyIiwiYXBwbHlNdWx0aXBsZUZpbHRlcnNQcm9ncmFtYXR0aWNhbGx5IiwiZmlsdGVyc1RvQXBwbHkiLCJudW1GaWx0ZXJzVG9BcHBseSIsImNvdW50cmllc0hhdmVGaWx0ZXIiLCJtYXJrZXJzSGF2ZUZpbHRlciIsInJlbW92ZUFsbE1hcmtlcnMiLCJjb3VudHJ5SW5kZXgiLCJjdXJyZW50RmlsdGVyTmFtZSIsIm1hcmtlckluZGV4IiwiYXBwbHlNdWx0aXBsZUZpbHRlcnMiLCJzZWxlY3RlZE11bHRpcGxlRmlsdGVycyIsImpzb25GaWx0ZXJzIiwidW5kZWZpbmVkIiwiY3VycmVudEZpbHRlclZhbHVlIiwiTmFtZSIsInJlYWRSZWdpb25zRnJvbUpTT04iLCJyZWdpb25zIiwicmVnaW9uc0FyciIsImN1cnJlbnRSZWdpb24iLCJSZWdpb24iLCJnZW5lcmF0ZUNvbG9yc0ZvclRoZVJlZ2lvbnMiLCJpc29Db2RlIiwidG9VcHBlckNhc2UiLCJyZWdpb25Db2xvcnMiLCJSZWdpb25zIiwiYnVpbGRSZWdpb25Ub29sdGlwIiwicmVnaW9uIiwicmVnaW9uVG9vbHRpcCIsImFkZFJlZ2lvbnNUb01hcCIsImtleSIsImdlbmVyYXRlQ29sb3JzIiwibWFwcyIsInBhbGV0dGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzZXJpZXMiLCJzZXRWYWx1ZXMiLCJWZWN0b3JpYWxNYXAiLCJwcm90b3R5cGUiLCJjcmVhdGVNYXAiLCJpbnB1dEpTT04iLCJtYXBEaXYiLCJtaW5Db2xvciIsIm1heENvbG9yIiwibWFwVHlwZSIsImJhY2tncm91bmRDb2xvciIsImRhdGFUeXBlIiwidGhpcyIsImJhY2tncm91bmQiLCJtVHlwZSIsIm1EaXYiLCJtaW5Db2xvck1hcCIsIm1heENvbG9yTWFwIiwicmVhZENvdW50cmllc0Zyb21KU09OIiwialF1ZXJ5IiwiYWpheCIsInVybCIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJhc3luYyIsImVycm9yIiwidGhlcmVBcmVNYXJrZXJzIiwibnVtTWFya2VycyIsImF1eENvbG9ycyIsImxlZ2VuZFZhciIsInZlcnRpY2FsIiwibWFya2Vyc1dpdGhMZWdlbmQiLCJzY2FsZSIsImxlZ2VuZCIsIm1hcmtlcnNXaXRob3V0TGVnZW5kIiwiZmluYWxNYXJrZXJzSW5NYXAiLCJ2TWFwIiwianZtIiwiTWFwIiwiY29udGFpbmVyIiwib25SZWdpb25DbGljayIsImUiLCJjb2RlIiwiY291bnRyeUNvZGUiLCJuZXdNYXAiLCJzd2l0Y2hNYXAiLCJvbk1hcmtlclRpcFNob3ciLCJsYWJlbCIsImh0bWwiLCJvblJlZ2lvblRpcFNob3ciLCJzZWxlY3RlZENvdW50cnkiLCJhdHRyaWJ1dGUiLCJjb3VudHJ5T2JqZWN0IiwiYXR0cmlidXRlcyIsImNvdW50cnlDb2xvcnMiLCJjb3VudHJpZXNKU09OIiwiZmluZENvdW50cnlCeU5hbWUiLCJyZXR1cm5Db3VudHJ5IiwicmVhZE1pbk1heCIsImNvdW50cmllc05hbWVzIiwiaGFzT3duUHJvcGVydHkiLCJjdXJyZW50Q291bnRyeU5hbWUiLCJGaWx0ZXJzQm94IiwiZmlsdGVyVHlwZSIsImNyZWF0ZUZpbHRlcnNCb3hXaXRoRW51bWVyYXRpb24iLCJmaWx0ZXJzIiwiY2hhckF0Iiwic2xpY2UiLCJ0b0FwcGVuZCIsImpvaW4iLCJhcHBlbmQiLCJ0b29sdGlwIiwidGl0bGUiLCJwbGFjZW1lbnQiLCJ0ZXh0VG9BcHBlbmQiLCJjbGljayIsImpzb25PYmplY3QiLCJlbXB0eUZpbHRlcnMiLCJjcmVhdGVGaWx0ZXJzQm94Q2hlY2tib3hlcyIsInAiLCJ3YXQiLCJKU09OIiwic3RyaW5naWZ5IiwidXBkYXRlU3RhdHVzIiwiJHAiLCJlbXB0eSIsIndpZGdldCIsImNoZWNrZWQiLCJ0YWIiLCJpZCIsImlzQ2hlY2tlZCIsImRhdGEiLCJhdXRvc2VhcmNoIiwiaGlkZUhlYWRlciIsInNob3dOYlNlbGVjdGVkIiwidGVtcGxhdGVCdXR0b24iLCJvbiIsInNlbGVjdGVkSXRlbXMiLCJpdGVtc0FycmF5IiwicmVhZEZpbHRlcnNGcm9tSlNPTiIsImZpbHRlcnNKU09OIiwiRmlsdGVyIiwicmVnaXN0ZXJUcmFuc2Zvcm1lciIsImpzb25Mb2NhdGlvbiIsImZpbHRlck9uU2VydmVyIiwiZmlsdGVyc1N0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZVRvb2x0aXAiLCJyZWdpb25OYW1lIiwiY3VycmVudE1hcCIsInNlbGVjdGVkUmVnaW9uIiwicmVnaW9uRm91bmQiLCJtYXJrZXJPYmplY3QiLCJpY29uIiwibWFya2Vyc0pTT05BcnJheSIsImN1cnJlbnRNYXJrZXJKU09OIiwiaW1hZ2UiLCJhZGRNYXJrZXJzIiwicmVnaW9uT2JqZWN0Il0sIm1hcHBpbmdzIjoiQUF5SUEsUUFBQUEsVUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxNQUFBRCxJQUFBQyxFQUFBRCxJQUFBSCxFQUFBQyxJQUFBQyxFQUFBRCxHQ3ZIQSxRQUFBSSxxQkFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBQyxjQUlBLE9BSEFDLEdBQUFDLEtBQUFDLE9BQUFDLEtBQUFOLEdBQUEsU0FBQU8sRUFBQUMsR0FDQVAsRUFBQUEsRUFBQVEsUUFBQUQs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UUFDQTRMLEtBQUE5RixPQUFBa00sRUFBQWxNLE1BQ0E4RixLQUFBekYsU0FBQTZMLEVBQUE3TCxTQUNBeUYsS0FBQXhGLFVBQUE0TCxFQUFBNUwsVUFDQXdGLEtBQUFxRyxLQUFBRCxFQUFBQyxLQUVBckcsS0FBQTVHLEtBQUEsTUF1QkFrRyxjQUFBQyxVQUFBL0osZ0JBQUEsV0FDQSxHQUFBOFEsS0FDQS9SLEdBQUFDLEtBQUF3TCxLQUFBMUssZ0JBQUEsU0FBQVgsRUFBQTBDLEdBQ0EsR0FBQWtQLElBQ0F0TixRQUFBNUIsRUFBQWtELFNBQUFsRCxFQUFBbUQsV0FDQWpELEtBQUFGLEVBQUErQixLQUVBQyxPQUNBRSxFQUFBM0YsU0FBQXlELEVBQUE2QyxNQUFBVixTQUFBQyxTQUFBQyxVQUFBQyxXQUNBNk0sTUFBQSxVQUFBblAsRUFBQWdQLEtBQUEsUUFHQUMsR0FBQWhRLEtBQUFpUSxLQUVBdkcsS0FBQWpILElBQUEwTixXQUFBSCxHRXBEQSxJQUFBbkksUUFBQSxTQUFBdUksRUFBQXRTLEdBRUE0TCxLQUFBN0IsT0FBQXVJLEVBQUFuUCxLQUNBeUksS0FBQTVMLFFBQUFBLEVBRUE0TCxLQUFBNUcsS0FBQSIsImZpbGUiOiJqc01hcHNBcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVmVjdG9yaWFsTWFwID0gZnVuY3Rpb24oKSB7fTtcblxuLy8gVmVjdG9yaWFsTWFwIFByb3RvdHlwZVxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5jcmVhdGVNYXAgPSBmdW5jdGlvbihpbnB1dEpTT04sIG1pblJhZGl1cywgbWF4UmFkaXVzLCBtYXBEaXYsIG1pbkNvbG9yLCBtYXhDb2xvciwgbWFwVHlwZSwgYmFja2dyb3VuZENvbG9yLCBkYXRhVHlwZSkge1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZENvbG9yO1xuICAgIHRoaXMubVR5cGUgPSBtYXBUeXBlO1xuICAgIHRoaXMuZGF0YVR5cGUgPSBkYXRhVHlwZTtcbiAgICAvLyBjb3VudHJpZXMgbGlzdFxuICAgIHRoaXMuanNvbkNvdW50cmllcyA9IFtdO1xuICAgIC8vIG1hcmtlcnMgbGlzdFxuICAgIHRoaXMuanNvbk1hcmtlcnMgPSBbXTtcbiAgICAvLyBpZCBvZiB0aGUgbWFcbiAgICB0aGlzLm1EaXYgPSBtYXBEaXY7XG4gICAgLy8gYXNzaWduIHRoZSBjb2xvcnMgZm9yIHRoZSByYW5nZVxuICAgIHRoaXMubWluQ29sb3JNYXAgPSBtaW5Db2xvcjtcbiAgICB0aGlzLm1heENvbG9yTWFwID0gbWF4Q29sb3I7XG5cbiAgICBpZiAoZGF0YVR5cGUgPT0gJ2NvdW50cmllcycpIHtcbiAgICAgICAgdGhpcy5qc29uQ291bnRyaWVzID0gdGhpcy5yZWFkQ291bnRyaWVzRnJvbUpTT04oaW5wdXRKU09OKTtcbiAgICAgICAgLy8gZ2V0IHRoZSB0b29sdGlwIHRlbXBsYXRlc1xuICAgICAgICAvLyBDT1VOVFJZIHRvb2x0aXBcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgdXJsOiAnLi4vdG9vbHRpcC10ZW1wbGF0ZXMvY291bnRyeV90b29sdGlwLmh0bWwnLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY291bnRyeVRvb2x0aXAgPSByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBSRUdJT04gdG9vbHRpcFxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcuLi90b29sdGlwLXRlbXBsYXRlcy9yZWdpb25fdG9vbHRpcC5odG1sJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlZ2lvblRvb2x0aXAgPSByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgIHRoaXMudGhlcmVBcmVNYXJrZXJzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5qc29uTWFya2VycyA9IHJlYWRNYXJrZXJzRnJvbUpTT04oaW5wdXRKU09OKTtcbiAgICAgICAgdGhpcy5maWx0ZXJlZE1hcmtlcnMgPSB0aGlzLmpzb25NYXJrZXJzO1xuICAgICAgICB0aGlzLm51bU1hcmtlcnMgPSB0aGlzLmpzb25NYXJrZXJzLmxlbmd0aDtcbiAgICAgICAgLy8gTUFSS0VSIHRvb2x0aXBcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgdXJsOiAnLi4vdG9vbHRpcC10ZW1wbGF0ZXMvbWFya2VyX3Rvb2x0aXAuaHRtbCcsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJUb29sdGlwID0gcmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgbXVzdCBnaXZlIGFzIGlucHV0IGEgbGlzdCBvZiBtYXJrZXJzIG9yIGNvdW50cmllcyEnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGdldCB0aGUgQ291bnQgdmFsdWUgZm9yIGVhY2ggQ291bnRyeVxuICAgIHRoaXMuYXV4Q29sb3JzID0gKChkYXRhVHlwZT09J2NvdW50cmllcycpID8gdGhpcy5nZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpIDogW10pO1xuXG4gICAgLy8gbWFya2VyIGxlZ2VuZFxuICAgIHZhciBsZWdlbmRWYXIgPSB7XG4gICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAvL3RpdGxlOiAnQ291bnRyaWVzJyxcbiAgICB9O1xuXG4gICAgbWFya2Vyc1dpdGhMZWdlbmQgPSB7XG4gICAgICAgIHNjYWxlOiBbdGhpcy5taW5Db2xvck1hcCwgdGhpcy5tYXhDb2xvck1hcF0sXG4gICAgICAgIC8vIHJhbmdlIG9mIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIENvdW50XG4gICAgICAgIHZhbHVlczogW3RoaXMubWluQ291bnQsIHRoaXMubWF4Q291bnRdLFxuICAgICAgICAvLyBhZGQgYSBsZWdlbmRcbiAgICAgICAgbGVnZW5kOiBsZWdlbmRWYXJcbiAgICB9O1xuICAgIG1hcmtlcnNXaXRob3V0TGVnZW5kID0ge1xuICAgICAgICBzY2FsZTogW3RoaXMubWluQ29sb3JNYXAsIHRoaXMubWF4Q29sb3JNYXBdLFxuICAgICAgICAvLyByYW5nZSBvZiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBDb3VudFxuICAgICAgICB2YWx1ZXM6IFt0aGlzLm1pbkNvdW50LCB0aGlzLm1heENvdW50XVxuICAgIH07XG4gICAgZmluYWxNYXJrZXJzSW5NYXAgPSBtYXJrZXJzV2l0aExlZ2VuZDtcbiAgICBpZiAoZGF0YVR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgIGZpbmFsTWFya2Vyc0luTWFwID0gbWFya2Vyc1dpdGhvdXRMZWdlbmQ7XG4gICAgfVxuXG4gICAgdmFyIHZNYXAgPSB0aGlzO1xuXG4gICAgLy8gY3JlYXRlIGEgbmV3IE1hcFxuICAgIHRoaXMubWFwID0gbmV3IGp2bS5NYXAoe1xuICAgICAgICBjb250YWluZXI6ICQoJyMnICsgdk1hcC5tRGl2KSxcbiAgICAgICAgLy8gY29uZmlndXJhdGlvbiBvZiB0aGUgbWFpbiBtYXBcbiAgICAgICAgLy8gdHlwZSBvZiBtYXAgKHdvcmxkLCBFdXJvcGUsIFVTQSwgZXRjKVxuICAgICAgICBtYXA6IHZNYXAubVR5cGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdk1hcC5iYWNrZ3JvdW5kLFxuICAgICAgICAvLyB0cmlnZ2VyZWQgd2hlbiBhIG1hcmtlciBpcyBob3ZlcmVkXG4gICAgICAgIG9uUmVnaW9uQ2xpY2s6IGZ1bmN0aW9uKGUsIGNvZGUpIHtcbiAgICAgICAgICAgIGNvdW50cnlDb2RlID0gY29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIG5ld01hcCA9IGNvdW50cnlDb2RlICsgJ19taWxsX2VuJztcbiAgICAgICAgICAgIHZNYXAuc3dpdGNoTWFwKG5ld01hcCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTWFya2VyVGlwU2hvdzogZnVuY3Rpb24oZSwgbGFiZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBzZWxlY3Qgd2hhdCB0ZXh0IHRvIGRpc3BsYXkgd2hlbiBtYXJrZXIgaXMgaG92ZXJlZFxuICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkTWFya2VyVG9vbHRpcCh2TWFwLmpzb25NYXJrZXJzLCB2TWFwLmpzb25NYXJrZXJzW2luZGV4XSk7XG4gICAgICAgICAgICBsYWJlbC5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgcmVnaW9uIGlzIGhvdmVyZWRcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCBjb3VudHJ5TmFtZSwgY29kZSkge1xuICAgICAgICAgICAgLy8gY29kZSBjb250YWlucyB0aGUgY29kZSBvZiB0aGUgY291bnRyeSAoaS5lLiwgUFQsIEVTLCBGUiwgZXRjKVxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgJC5lYWNoKHZNYXAuanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5Lm5hbWUgPT09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJ5ID0gY3VycmVudENvdW50cnk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIG9jY3VycmVuY2Ugb2Ygc2V2ZXJhbCBzdHJpbmdzIGluc2lkZSB0aGUgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRDb3VudHJ5VG9vbHRpcChjb3VudHJ5TmFtZSwgc2VsZWN0ZWRDb3VudHJ5KTtcbiAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZS5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZS5odG1sKGNvdW50cnlOYW1lLmh0bWwoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgbWFya2VyczogW2ZpbmFsTWFya2Vyc0luTWFwXSxcbiAgICAgICAgICAgIHJlZ2lvbnM6IFt7XG4gICAgICAgICAgICAgICAgLy8gbWluIGFuZCBtYXggdmFsdWVzIG9mIGNvdW50XG4gICAgICAgICAgICAgICAgc2NhbGU6IFt2TWFwLm1pbkNvbG9yTWFwLCB2TWFwLm1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHRoaXMuYXV4Q29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBkcmF3IG1hcmtlcnMgb24gdGhlIG1hcFxuICAgIGlmIChkYXRhVHlwZSA9PSAnbWFya2VycycpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJlZE1hcmtlcnMgPSB0aGlzLmpzb25NYXJrZXJzO1xuICAgICAgICB0aGlzLmFkZE1hcmtlcnNUb01hcCh0aGlzLmZpbHRlcmVkTWFya2Vycyk7XG4gICAgfVxufTtcblxuLy8gQXV4aWxpYXJ5IGZ1bmN0aW9uIHRvIHRyYW5zcG9zZSBhIHZhbHVlIGZyb20gYW4gaW5pdGlhbCByYW5nZSB0byBhbm90aGVyIHJhbmdlXG5mdW5jdGlvbiBtYXBSYW5nZSh2YWx1ZSwgbG93MSwgaGlnaDEsIGxvdzIsIGhpZ2gyKSB7XG4gICAgcmV0dXJuIGxvdzIgKyAoaGlnaDIgLSBsb3cyKSAqICh2YWx1ZSAtIGxvdzEpIC8gKGhpZ2gxIC0gbG93MSk7XG59XG4iLCJ2YXIgQ291bnRyeSA9IGZ1bmN0aW9uKGNvdW50cnlPYmplY3QpIHtcbiAgICAvLyByZWFkIGZyb20gdGhlIEpTT05cbiAgICAvLyBhZGQgYXR0cmlidXRlc1xuICAgIHZhciBhdHRyaWJ1dGVzID0gY291bnRyeU9iamVjdFtcImF0dHJpYnV0ZXNcIl07XG4gICAgdmFyIGNvdW50cnkgPSB0aGlzO1xuICAgICQuZWFjaChPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKSwgZnVuY3Rpb24oaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgY291bnRyeVthdHRyXSA9IGF0dHJpYnV0ZXNbYXR0cl07XG4gICAgfSk7XG5cbiAgICAvLyB0cnkgdG8gcmVhZCBpdHMgcmVnaW9ucyBpbiBjYXNlIGhlIGhhcyBhbnlcbiAgICBpZiAoY291bnRyeU9iamVjdC5SZWdpb25zKVxuICAgICAgICB0aGlzLlJlZ2lvbnMgPSByZWFkUmVnaW9uc0Zyb21KU09OKGNvdW50cnlPYmplY3QuUmVnaW9ucywgY291bnRyeU9iamVjdC5jb3VudHJ5KTtcblxuICAgIHRoaXMubmFtZSA9IGNvdW50cnlPYmplY3QubmFtZTtcbiAgICAvLyArIGlzIHVzZWQgdG8gYXNzdXJlIHRoYXQgYSBOdW1iZXIgaXMgYmVpbmcgcmVhZFxuICAgIHRoaXMuY291bnQgPSArY291bnRyeU9iamVjdC5jb3VudDtcbiAgICB0aGlzLmRlc2MgPSAnYWJjJztcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIGNvdW50cnkpIHtcbiAgICB2YXIgZmluYWxUb29sdGlwID0gY291bnRyeVRvb2x0aXA7XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKGNvdW50cnkpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuICAgICAgICBmaW5hbFRvb2x0aXAgPSBmaW5hbFRvb2x0aXAucmVwbGFjZShhdHRyLCBjb3VudHJ5W2F0dHJdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmluYWxUb29sdGlwO1xufVxuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLmdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzID0gZnVuY3Rpb24oY291bnRyaWVzKSB7XG4gICAgaWYgKCFjb3VudHJpZXMpXG4gICAgICAgIGNvdW50cmllcyA9IHRoaXMuanNvbkNvdW50cmllcztcbiAgICB2YXIgY291bnRyeUNvbG9ycyA9IFtdO1xuICAgICQuZWFjaChjb3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBjb3VudHJ5Q29sb3JzW2N1cnJlbnRDb3VudHJ5Lm5hbWVdID0gY3VycmVudENvdW50cnkuY291bnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50cnlDb2xvcnM7XG59O1xuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlYWRDb3VudHJpZXNGcm9tSlNPTiA9IGZ1bmN0aW9uKGNvdW50cmllc0pTT04pIHtcbiAgICB2YXIgY291bnRyaWVzID0gW107XG5cbiAgICB0aGlzLm1pbkNvdW50ID0gSW5maW5pdHk7XG4gICAgdGhpcy5tYXhDb3VudCA9IC1JbmZpbml0eTtcblxuXG4gICAgJC5lYWNoKGNvdW50cmllc0pTT04sIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBjb3VudHJpZXMucHVzaChuZXcgQ291bnRyeShjdXJyZW50Q291bnRyeSkpO1xuXG4gICAgICAgIGlmIChjb3VudHJpZXNbaW5kZXhdLkNvdW50ID4gdGhpcy5tYXhDb3VudClcbiAgICAgICAgICAgIHRoaXMubWF4Q291bnQgPSBjb3VudHJpZXNbaW5kZXhdLkNvdW50O1xuXG4gICAgICAgIGlmIChjb3VudHJpZXNbaW5kZXhdLkNvdW50IDwgdGhpcy5taW5Db3VudClcbiAgICAgICAgICAgIHRoaXMubWluQ291bnQgPSBjb3VudHJpZXNbaW5kZXhdLkNvdW50O1xuICAgIH0pO1xuICAgIHJldHVybiBjb3VudHJpZXM7XG59XG5cbi8vIHJldHVybiB0aGUgY291bnRyeSB3aG9zZSBuYW1lIGlzIHBhc3NlZCBhcyBhbiBhcmd1bWVudFxuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLmZpbmRDb3VudHJ5QnlOYW1lID0gZnVuY3Rpb24oY291bnRyeU5hbWUpIHtcbiAgICB2YXIgcmV0dXJuQ291bnRyeSA9IG51bGw7XG4gICAgJC5lYWNoKHRoaXMuanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5uYW1lID09IGNvdW50cnlOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm5Db3VudHJ5ID0gY3VycmVudENvdW50cnk7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuQ291bnRyeTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXR1cm5Db3VudHJ5O1xufVxuXG4vLyByZWFkIHRoZSBtaW4gYW5kIG1heCBjb3VudCBvZiB0aGUgY291bnRyaXNcblZlY3RvcmlhbE1hcC5wcm90b3R5cGUucmVhZE1pbk1heCA9IGZ1bmN0aW9uKGNvdW50cmllc05hbWVzKSB7XG4gICAgdGhpcy5taW5Db3VudCA9IEluZmluaXR5O1xuICAgIHRoaXMubWF4Q291bnQgPSAtSW5maW5pdHk7XG5cbiAgICAvLyBjb3VudHJpZXMgbmFtZXMgaXMgYSBKU09OIG9iamVjdFxuICAgIC8vIHJlYWQga2V5cyB0byBhbiBhcnJheVxuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGNvdW50cmllc05hbWVzKSB7XG4gICAgICAgIGlmIChjb3VudHJpZXNOYW1lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB2TWFwID0gdGhpcztcblxuICAgIC8vIGZpbmQgY291bnRyeSBieSBuYW1lXG4gICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeU5hbWUpIHtcbiAgICAgICAgLy8gZmluZCB0aGUgY291bnRyeSBieSBpdHMgbmFtZVxuICAgICAgICB2YXIgY3VycmVudENvdW50cnkgPSB2TWFwLmZpbmRDb3VudHJ5QnlOYW1lKGN1cnJlbnRDb3VudHJ5TmFtZSk7XG4gICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5Db3VudCA+IHZNYXAubWF4Q291bnQpXG4gICAgICAgICAgICB2TWFwLm1heENvdW50ID0gY3VycmVudENvdW50cnkuQ291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LkNvdW50IDwgdk1hcC5taW5Db3VudClcbiAgICAgICAgICAgIHZNYXAubWluQ291bnQgPSBjdXJyZW50Q291bnRyeS5Db3VudDtcbiAgICB9KTtcbn1cbiIsInZhciBGaWx0ZXJzQm94ID0gZnVuY3Rpb24obWFwLCBmaWx0ZXJUeXBlKSB7XG4gICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgdGhpcy5maWx0ZXJUeXBlID0gZmlsdGVyVHlwZTtcbn1cblxuZnVuY3Rpb24gcmVzZXRGaWx0ZXJzQm94KCkge1xuICAgIC8vIHJlc2V0IGFsbCB0aGUgJ2Zib3hlcydcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUZpbHRlcnM7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudElkID0gXCIjZmJveFwiICsgaTtcbiAgICAgICAgJChcIiNmYm94XCIgKyBpKS50ZXh0KCcnKTtcbiAgICAgICAgJChcIiNmYm94XCIgKyBpKS52YWwoJycpO1xuICAgIH1cblxuICAgIC8vIHJlbG9hZCB0aGUgbWFwXG4gICAgdmFyIGNvbG9ycyA9IGdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzKCk7XG4gICAgcmVsb2FkTWFwKGNvbG9ycyk7XG5cbiAgICBmaWx0ZXJlZE1hcmtlcnMgPSBqc29uTWFya2VycztcbiAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbn1cblxuRmlsdGVyc0JveC5wcm90b3R5cGUuY3JlYXRlRmlsdGVyc0JveFdpdGhFbnVtZXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICQuZWFjaCh0aGlzLmZpbHRlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyKSB7XG4gICAgICAgIHZhciBmaWx0ZXJOYW1lID0gY3VycmVudEZpbHRlci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGZpbHRlck5hbWUgPSBmaWx0ZXJOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZmlsdGVyTmFtZS5zbGljZSgxKTtcbiAgICAgICAgdmFyIGJ1dHRvbklkID0gJ2Ryb3Bkb3duJyArIGluZGV4ICsgJ2J1dHRvbic7XG4gICAgICAgIHZhciB1bElkID0gJ2Ryb3Bkb3duJyArIGluZGV4O1xuICAgICAgICB2YXIgdG9BcHBlbmQgPSAnJztcblxuICAgICAgICAvLyBmaWx0ZXIgdGV4dFxuICAgICAgICB0b0FwcGVuZCArPSAnPHA+PGI+JyArIGZpbHRlck5hbWUgKyAnOjwvYj48L3A+JztcbiAgICAgICAgdG9BcHBlbmQgKz0gJzxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+JztcbiAgICAgICAgdG9BcHBlbmQgKz0gJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJmYm94JyArIGluZGV4ICsgJ1wiJztcblxuICAgICAgICAvLyBidWlsZCB0aGUgcGxhY2Vob2xkZXIgLSBjaGVjayBpZiB3ZSBoYXZlIGNvbnRpbnVvdXMgb3IgZGlzY3JldGUgdmFsdWVzXG4gICAgICAgIGlmIChjdXJyZW50RmlsdGVyLmNvbnRpbnVvdXMpXG4gICAgICAgICAgICB0b0FwcGVuZCArPSAncGxhY2Vob2xkZXI9XCInICsgY3VycmVudEZpbHRlci5taW4gKyAnLi4uJyArIGN1cnJlbnRGaWx0ZXIubWF4ICsgJ1wiICs+JztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdG9BcHBlbmQgKz0gJ3BsYWNlaG9sZGVyPVwiJyArIGN1cnJlbnRGaWx0ZXIudmFsdWVzLmpvaW4oKSArICdcIiArPic7XG4gICAgICAgIHRvQXBwZW5kICs9ICc8L2Rpdj4nO1xuXG4gICAgICAgICQoJ2ZpbHRlci1ib3gnKS5hcHBlbmQodG9BcHBlbmQpO1xuXG4gICAgICAgIC8vIGFkZCBCb290c3RyYXAgdG9vbHRpcCB0byB0aGUgZmlsdGVycyBib3hcbiAgICAgICAgJCgnI2ZpbHRlci1ib3gnKS50b29sdGlwKHtcbiAgICAgICAgICAgIHRpdGxlOiBcIlVzZSB0aGlzIGZpbHRlciBib3ggdG8gZmlsdGVyIGJ5IG11bHRpcGxlIGZpbHRlcnNcIixcbiAgICAgICAgICAgIHBsYWNlbWVudDogXCJib3R0b21cIlxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIGFwcGVuZCBlcnJvcnNcbiAgICAkKCcuZm9ybS1jb250cm9sJykuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIGZvcm0tY29udHJvbC1mZWVkYmFja1wiPicpO1xuXG4gICAgLy8gYWRkIHRoZSBidXR0b25zXG4gICAgdmFyIHRleHRUb0FwcGVuZCA9ICc8ZGl2IGlkPVwiZmlsdGVyc19ib3hcIj4nICtcbiAgICAgICAgJzxidXR0b24gaWQ9XCJmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+RmlsdGVyPC9idXR0b24+JyArXG4gICAgICAgICc8YnV0dG9uIGlkPVwiZmlsdGVyX2JveF9yZXNldF9maWx0ZXJzXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGNvbC1zbS00IGNvbC1zbS1vZmZzZXQtMVwiPlJlc2V0PC9idXR0b24+PC9kaXY+JztcbiAgICAkKCdmaWx0ZXItYm94JykuYXBwZW5kKHRleHRUb0FwcGVuZCk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgc2VhcmNoIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgdGhlICdoYXMtZXJyb3InIGlucHV0IGJveGVzXG4gICAgICAgIHJlc3RvcmVJbnB1dEJveGVzKCk7XG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0ganNvbkZpbHRlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgZW1wdHlGaWx0ZXJzID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uRmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgaWQnc1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRGaWx0ZXIgPSBcIiNmYm94XCIgKyBpO1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgdmFsdWVzXG4gICAgICAgICAgICB2YXIgY3VycmVudEZpbHRlclZhbHVlID0gJChjdXJyZW50RmlsdGVyKS52YWwoKTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYW55IGZpbHRlcmluZyB0byBhcHBseSBvciBub3RcbiAgICAgICAgICAgIGlmIChjdXJyZW50RmlsdGVyVmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAganNvbk9iamVjdFtqc29uRmlsdGVyc1tpXS5uYW1lXSA9IGN1cnJlbnRGaWx0ZXJWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1wdHlGaWx0ZXJzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgdGhlIHVzZXIgc2VsZWN0aW5nIHRoZSBGaWx0ZXIgYnV0dG9uIHdpdGhvdXQgaW5wdXRpbmcgYW55IGRhdGFcbiAgICAgICAgaWYgKGVtcHR5RmlsdGVycyAhPSBudW1GaWx0ZXJzKSB7XG4gICAgICAgICAgICBmaWx0ZXIoanNvbk9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHRyaWdnZXJlZCB3aGVuIHRoZSByZXNldCBidXR0b24gaXMgY2xpY2tlZFxuICAgICQoXCIjZmlsdGVyX2JveF9yZXNldF9maWx0ZXJzXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXN0b3JlSW5wdXRCb3hlcygpO1xuICAgICAgICByZXNldEZpbHRlcnNCb3goKTtcbiAgICB9KTtcbn1cblxuXG5GaWx0ZXJzQm94LnByb3RvdHlwZS5jcmVhdGVGaWx0ZXJzQm94Q2hlY2tib3hlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgJCgnZmlsdGVyLWJveCcpLmFwcGVuZCgnPHVsIGNsYXNzPVwibmF2IG5hdmJhci1uYXZcIiBpZD1cImZpbHRlckJveENoZWNrYm94ZXNcIiBzdHlsZT1cImJvcmRlci1zdHlsZTogc29saWQ7IGJvcmRlci13aWR0aDogMnB4O1wiPjwvdWw+Jyk7XG5cbiAgICAvLyBnZXQgYWxsIHRoZSBmaWx0ZXJzXG4gICAgJC5lYWNoKHRoaXMuZmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXIpIHtcbiAgICAgICAgdmFyIGJveElEID0gJyNib3gnICsgKGluZGV4ICsgMSk7XG4gICAgICAgIC8vIGFwcGVuZCB0byB0aGUgSFRNTFxuICAgICAgICAkKCcjZmlsdGVyQm94Q2hlY2tib3hlcycpLmFwcGVuZCgnPGxpIGNsYXNzPVwiY29sLXNtLTZcIiBpZD1cImJveCcgKyAoaW5kZXggKyAxKSArICdcIiBjbGFzcz1cImRyb3Bkb3duLWNoZWNrYm94LWV4YW1wbGUgZHJvcGRvd24tY2hlY2tib3ggZHJvcGRvd25cIj48L2xpPicpO1xuXG4gICAgICAgIC8vIGZpbGwgdGhlIHRhYnMgZm9yIHRoZSB5ZWFyIGZpbHRlclxuICAgICAgICB2YXIgdGFiID0gW107XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSB2YWx1ZXMgYXJlIGNvbnRpbnVvdXMgb3IgZGlzY3JldGVcbiAgICAgICAgaWYgKGN1cnJlbnRGaWx0ZXIuY29udGludW91cykge1xuICAgICAgICAgICAgLy8gY29udGludW91cyB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRpc2NyZXRlIHZhbHVlc1xuICAgICAgICAgICAgJC5lYWNoKGN1cnJlbnRGaWx0ZXIudmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGFiLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAnaWQnOiBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgICAgICdsYWJlbCc6IGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2lzQ2hlY2tlZCc6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHAod2F0KSB7XG4gICAgICAgICAgICByZXR1cm4gJzxwPicgKyBKU09OLnN0cmluZ2lmeSh3YXQpICsgJzwvcD4nO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU3RhdHVzKCkge1xuICAgICAgICAgICAgdmFyICRwID0gJCgncC5zdGF0dXMnKS5lbXB0eSgpO1xuICAgICAgICAgICAgJHAuYXBwZW5kKHAod2lkZ2V0LmNoZWNrZWQoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHJvcGRvd24gd2l0aCBjaGVja2JveGVzIGluaXRpYWxpemF0aW9uXG4gICAgICAgIHZhciBuYW1lID0gY3VycmVudEZpbHRlci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICAgICAgJChib3hJRCkuZHJvcGRvd25DaGVja2JveCh7XG4gICAgICAgICAgICBkYXRhOiB0YWIsXG4gICAgICAgICAgICBhdXRvc2VhcmNoOiB0cnVlLFxuICAgICAgICAgICAgaGlkZUhlYWRlcjogZmFsc2UsXG4gICAgICAgICAgICAvLyBzaG93IG51bWJlciBvZiBzZWxlY3RlZCBpdGVtc1xuICAgICAgICAgICAgc2hvd05iU2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgdGVtcGxhdGVCdXR0b246ICc8YSBjbGFzcz1cImRyb3Bkb3duLWNoZWNrYm94LXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBocmVmPVwiI1wiPicgKyBuYW1lICsgJzxzcGFuIGNsYXNzPVwiZHJvcGRvd24tY2hlY2tib3gtbmJzZWxlY3RlZFwiPjwvc3Bhbj48YiBjbGFzcz1cImNhcmV0XCI+PC9iPidcbiAgICAgICAgfSk7XG4gICAgICAgIHdpZGdldCA9ICQoYm94SUQpLmRhdGEoJ2Ryb3Bkb3duQ2hlY2tib3gnKTtcblxuICAgICAgICAkKCdib2R5Jykub24oJ2NoYW5nZTpkcm9wZG93bi1jaGVja2JveCBjaGVja2VkIGNoZWNrZWQ6YWxsIGNoZWNrOmFsbCB1bmNoZWNrOmFsbCBjaGVjazpjaGVja2VkIHVuY2hlY2s6Y2hlY2tlZCcsIHVwZGF0ZVN0YXR1cygpKTtcbiAgICAgICAgdXBkYXRlU3RhdHVzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBlbmQgZmlsdGVyIGFuZCByZXNldCBidXR0b25cbiAgICB2YXIgdGV4dFRvQXBwZW5kID0gJzxkaXYgaWQ9XCJmaWx0ZXJzX2JveFwiIGNsYXNzPVwicm93IGNvbC1zbS0xMlwiPicgK1xuICAgICAgICAnPGJ1dHRvbiBpZD1cImZpbHRlcl9ib3hfYXBwbHlfZmlsdGVyc1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBjb2wtc20tNCBjb2wtc20tb2Zmc2V0LTFcIj5GaWx0ZXI8L2J1dHRvbj4nICtcbiAgICAgICAgJzxidXR0b24gaWQ9XCJmaWx0ZXJfYm94X3Jlc2V0X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+UmVzZXQ8L2J1dHRvbj48L2Rpdj4nO1xuICAgICQoJyNmaWx0ZXJCb3hDaGVja2JveGVzJykuYXBwZW5kKHRleHRUb0FwcGVuZCk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgc2VhcmNoIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgdGhlICdoYXMtZXJyb3InIGlucHV0IGJveGVzXG4gICAgICAgIHJlc3RvcmVJbnB1dEJveGVzKCk7XG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0ganNvbkZpbHRlcnNBcnJheS5sZW5ndGg7XG4gICAgICAgIHZhciBlbXB0eUZpbHRlcnMgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25GaWx0ZXJzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIG5leHQgZmlsdGVyIGlkJ3NcbiAgICAgICAgICAgIHZhciBjdXJyZW50RmlsdGVyID0gXCIjYm94XCIgKyAoaSArIDEpO1xuICAgICAgICAgICAgLy8gY3VycmVudCBmaWx0ZXIgdmFsdWVzIC0gc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEl0ZW1zID0gZ2V0U2VsZWN0ZWRJdGVtcyhjdXJyZW50RmlsdGVyKTtcbiAgICAgICAgICAgIHZhciBpdGVtc0FycmF5ID0gW107XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdGVkSXRlbXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNBcnJheS5wdXNoKHNlbGVjdGVkSXRlbXNba2V5c1tqXV0ubGFiZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbnkgZmlsdGVyaW5nIHRvIGFwcGx5IG9yIG5vdFxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGpzb25PYmplY3RbanNvbkZpbHRlcnNBcnJheVtpXS5uYW1lXSA9IGl0ZW1zQXJyYXkuam9pbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbXB0eUZpbHRlcnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhdm9pZCB0aGUgdXNlciBzZWxlY3RpbmcgdGhlIEZpbHRlciBidXR0b24gd2l0aG91dCBpbnB1dGluZyBhbnkgZGF0YVxuICAgICAgICBpZiAoZW1wdHlGaWx0ZXJzICE9IG51bUZpbHRlcnMpIHtcbiAgICAgICAgICAgIGZpbHRlcihqc29uT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdHJpZ2dlcmVkIHdoZW4gdGhlIHJlc2V0IGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X3Jlc2V0X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc2V0RmlsdGVyc0JveCgpO1xuICAgIH0pO1xufVxuIiwiZnVuY3Rpb24gZ2V0QWxsRmlsdGVyVmFsdWVzKGZpbHRlclZhbHVlKSB7XG4gICAgdmFyIHJldHVyblBhcnRzID0gW107XG4gICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbiBlbnVtZXJhdGlvbiAoY29tbWEtc2VwYXJhdGVkIHZhbHVlcyBhbmQvb3IgcmFuZ2VzKVxuICAgIGlmIChTdHJpbmcoZmlsdGVyVmFsdWUpLmluZGV4T2YoXCIsXCIpICE9IC0xKSB7XG4gICAgICAgIC8vIGdldCBhbGwgdGhlIGVudW1lcmF0ZWQgdmFsdWVzIChjYW4gYmUgc2luZ3VsYXIgb3IgcmFuZ2UpXG4gICAgICAgIHZhciBlbnVtZXJhdGlvblBhcnRzID0gU3RyaW5nKGZpbHRlclZhbHVlKS5zcGxpdChcIixcIik7XG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYSBzaW1wbGUgdmFsdWUgb3IgYSByYW5nZVxuICAgICAgICAkLmVhY2goZW51bWVyYXRpb25QYXJ0cywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRFbnVtZXJhdGlvbikge1xuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIHJhbmdlLi4uXG4gICAgICAgICAgICBpZiAoY3VycmVudEVudW1lcmF0aW9uLmluZGV4T2YoXCItXCIpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gYWxsIHRoZSByYW5nZSBwYXJ0c1xuICAgICAgICAgICAgICAgIHZhciByYW5nZVBhcnRzID0gU3RyaW5nKGN1cnJlbnRFbnVtZXJhdGlvbikuc3BsaXQoXCItXCIpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBleHRyZW1lIHZhbHVlcyBhcmUgdmFsaWRcbiAgICAgICAgICAgICAgICBjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlck9iamVjdCwgcmFuZ2VQYXJ0cyk7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgdmFsdWVzIGJldHdlZW4gdGhvc2UgdHdvIG51bWJlcnNcbiAgICAgICAgICAgICAgICAvLyBhbmQgYWRkIHRoZW1cbiAgICAgICAgICAgICAgICB2YXIgbWluID0gcmFuZ2VQYXJ0c1swXTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmFuZ2VQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgbWluIDw9IG1heDsgbWluKyspXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSBhIHJhbmdlXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNpbmdsZSB2YWx1ZSBpcyB2YWxpZFxuICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2goY3VycmVudEVudW1lcmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8ganVzdCBhIHNpbmdsZSBwYXJ0XG4gICAgICAgIGNvbnNvbGUubG9nKCdzaW5nbGUnKTtcbiAgICAgICAgaWYgKGZpbHRlclZhbHVlLmluZGV4T2YoXCItXCIpICE9IC0xKSB7XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGEgcmFuZ2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyYW5nZScpO1xuICAgICAgICAgICAgdmFyIHN1YlBhcnRzID0gU3RyaW5nKGZpbHRlclZhbHVlKS5zcGxpdChcIi1cIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdWJQYXJ0cyk7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgZXh0cmVtZSB2YWx1ZXMgYXJlIHZhbGlkXG4gICAgICAgICAgICBjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlck9iamVjdCwgc3ViUGFydHMpO1xuICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgdmFsdWVzIGJldHdlZW4gdGhvc2UgdHdvIG51bWJlcnNcbiAgICAgICAgICAgIHZhciBtaW4gPSBzdWJQYXJ0c1swXTtcbiAgICAgICAgICAgIHZhciBtYXggPSBzdWJQYXJ0c1sxXTtcbiAgICAgICAgICAgIGZvciAoOyBtaW4gPD0gbWF4OyBtaW4rKykge1xuICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGp1c3QgYSBzaW5nbGUgdmFsdWVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaW5nbGUgdmFsdWUnKTtcbiAgICAgICAgICAgIC8vIGNoZWNrIHRoZSB2YWxpZGl0eSBvZiB0aGlzIHZhbHVlXG4gICAgICAgICAgICBjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlck9iamVjdCxmaWx0ZXJWYWx1ZS5zcGxpdCgnJykpO1xuICAgICAgICAgICAgcmV0dXJuUGFydHMucHVzaChmaWx0ZXJWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblBhcnRzO1xufVxuXG5mdW5jdGlvbiBjaGVja1doYXRDb3VudHJpZXNUb0FkZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUpIHtcblxuICAgIHZhciBjb3VudHJpZXMgPSBbXTtcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgbmFtZXMgaXMgZXF1YWwgdG8gdGhlIHNlbGVjdGVkIGZpbHRlclxuICAgICAgICAvLyB0cnkgdG8gcmVhZCBhbGwgdGhlIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ25hbWUnICsgaTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSAndmFsdWUnICsgaTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50TmFtZVRvQ2hlY2tdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeVZhbHVlVG9DaGVjayA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYnkgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNbY3VycmVudENvdW50cnkuY291bnRyeV0gPSBjdXJyZW50Q291bnRyeS5Db3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnRyaWVzO1xufTtcblxuZnVuY3Rpb24gY2hlY2tXaGF0TWFya2Vyc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSkge1xuICAgIHZhciBtYXJrZXJzID0gW107XG4gICAgLy8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIGhhdmUgdGhhdCBmaWx0ZXIgdmFsdWVcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjdXJyZW50TWFya2VyKSwgZnVuY3Rpb24oaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgICAgIGlmIChhdHRyLnRvTG93ZXJDYXNlKCkgPT0gc2VsZWN0ZWRGaWx0ZXIubmFtZS50b0xvd2VyQ2FzZSgpICYmIGN1cnJlbnRNYXJrZXJbYXR0cl0gPT0gZmlsdGVyVmFsdWUpXG4gICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKGN1cnJlbnRNYXJrZXIpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJrZXJzO1xufTtcblxuZnVuY3Rpb24gY2hlY2tXaGF0Q291bnRyaWVzTWFya2Vyc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSkge1xuICAgIHZhciBjb3VudHJpZXNUb0FkZCA9IFtdO1xuICAgIHZhciBtYXJrZXJzVG9BZGQgPSBbXTtcblxuICAgIC8vIGNoZWNrIHdoYXQgY291bnRyaWVzIHRvIGNvbG91clxuICAgIGNvdW50cmllc1RvQWRkID0gY2hlY2tXaGF0Q291bnRyaWVzVG9BZGQoc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlKTtcbiAgICBtYXJrZXJzVG9BZGQgPSBjaGVja1doYXRNYXJrZXJzVG9BZGQoc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlKTtcblxuICAgIHJldHVybiBbY291bnRyaWVzVG9BZGQsIG1hcmtlcnNUb0FkZF07XG59XG5cbmZ1bmN0aW9uIGNoZWNrRmlsdGVyTmFtZUlzVmFsaWQoZmlsdGVyTmFtZSkge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgICQuZWFjaChqc29uRmlsdGVyc0FycmF5LCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuICAgICAgICBpZiAoY3VycmVudEZpbHRlci5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IGZpbHRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZmlsdGVyT2JqZWN0ID0gY3VycmVudEZpbHRlcjtcbiAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZDtcbn1cblxuZnVuY3Rpb24gcmVzdG9yZUlucHV0Qm94ZXMoKVxue1xuICAgIGZvcih2YXIgaSA9IDAgOyBpIDwganNvbkZpbHRlcnNBcnJheS5sZW5ndGggOyBpKyspXG4gICAgICAgICQoJyNmYm94JytpKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImhhcy1lcnJvclwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VsZWN0ZWRJdGVtcyhib3hJRCkge1xuICAgIHJldHVybiAkKGJveElEKS5kcm9wZG93bkNoZWNrYm94KFwiY2hlY2tlZFwiKTtcbn1cblxuXG5mdW5jdGlvbiBjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlciwgZmlsdGVyVmFsdWVzKSB7XG4gICAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgICAvLyBjaGVjayBpZiB0aGUgZmlsdGVyIGlzIGNvbnRpbnVvdXMgb3Igbm90XG4gICAgaWYgKGZpbHRlci5jb250aW51b3VzID09IHRydWUpIHtcbiAgICAgICAgdmFyIG1pbiA9IGZpbHRlci5taW47XG4gICAgICAgIHZhciBtYXggPSBmaWx0ZXIubWF4O1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgdmFsdWVzIGFyZSBiZXR3ZWVuIG1pbiBhbmQgbWF4XG4gICAgICAgICQuZWFjaChmaWx0ZXJWYWx1ZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYSB2YWx1ZSBvdXRzaWRlIHRoZSByYW5nZVxuICAgICAgICAgICAgY29uc29sZS5sb2coK2N1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoK2N1cnJlbnRWYWx1ZSA8IG1pbiB8fCArY3VycmVudFZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRJbnB1dEJveEVycm9yKGZpbHRlciwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSB2YWx1ZXMgYmVsb25nIGluIHRoZSBcInZhbHVlc1wiIHByb3BlcnR5IG9mIHRoZSBmaWx0ZXJcbiAgICAgICAgJC5lYWNoKGZpbHRlclZhbHVlcywgZnVuY3Rpb24oaW5kZXgsIGZpbHRlclZhbHVlKSB7XG4gICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGN1cnJlbnQgdmFsdWUgaXMgdmFsaWRcbiAgICAgICAgICAgICQuZWFjaChmaWx0ZXIudmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBmaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmKCF2YWxpZClcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRJbnB1dEJveEVycm9yKGZpbHRlciwgZmlsdGVyVmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkO1xufVxuXG5mdW5jdGlvbiBoaWdobGlnaHRJbnB1dEJveEVycm9yKGZpbHRlciwgZmlsdGVyVmFsdWUpXG57XG4gICAgY29uc29sZS5sb2coJ0ludmFsaWQgdmFsdWUgZm9yIHRoZSBmaWx0ZXI6ICcgKyBmaWx0ZXJWYWx1ZSk7XG4gICAgLy8gaGlnaGxpZ2h0IHRoZSBpbnB1dCB3aXRoIGVycm9yXG4gICAgdmFyIGZpbHRlclRvRmluZCA9IGZpbHRlci5uYW1lO1xuICAgIC8vIGZpbmQgaW5kZXggb2YgdGhlIGZpbHRlclxuICAgICQuZWFjaChqc29uRmlsdGVyc0FycmF5LCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuICAgICAgICBpZihmaWx0ZXJUb0ZpbmQgPT0gY3VycmVudEZpbHRlci5uYW1lKVxuICAgICAgICAgICAgJCgnI2Zib3gnK2luZGV4KS5wYXJlbnQoKS5hZGRDbGFzcyhcImhhcy1lcnJvclwiKTtcbiAgICB9KTtcbn1cbiIsIkZpbHRlcnNCb3gucHJvdG90eXBlLnJlYWRGaWx0ZXJzRnJvbUpTT04gPSBmdW5jdGlvbihmaWx0ZXJzSlNPTikge1xuICAgIHZhciBmaWx0ZXJzID0gW107XG4gICAgJC5lYWNoKGZpbHRlcnNKU09OLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyKSB7XG4gICAgICAgIGZpbHRlcnMucHVzaChuZXcgRmlsdGVyKGZpbHRlcikpO1xuICAgIH0pO1xuICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XG59XG5cbnZhciBGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXJPYmplY3QpIHtcbiAgICB0aGlzLm5hbWUgPSBmaWx0ZXJPYmplY3RbJ25hbWUnXTtcbiAgICAvLyBjaGVjayBpZiB0aGUgdmFsdWVzIGFyZSBjb250aW51b3VzIG9yIGRpc2NyZXRlXG4gICAgaWYgKGZpbHRlck9iamVjdFsnY29udGludW91cyddID09ICdmYWxzZScpIHtcbiAgICAgICAgLy8gZGlzY3JldGUgdmFsdWVzIC0gcmVhZCBmcm9tIHZhbHVlc1xuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IGZpbHRlck9iamVjdFsndmFsdWVzJ107XG4gICAgICAgIHRoaXMuY29udGludW91cyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnRpbnVvdXMgdmFsdWVzXG4gICAgICAgIHRoaXMuY29udGludW91cyA9IHRydWU7XG4gICAgICAgIHRoaXMubWluID0gZmlsdGVyT2JqZWN0WydtaW4nXVxuICAgICAgICB0aGlzLm1heCA9IGZpbHRlck9iamVjdFsnbWF4J11cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0RmlsdGVycygpIHtcbiAgICAvLyBjb2xvciB0aGUgb3JpZ2luYWwgbWFwXG4gICAgdmFyIGNvbG9ycyA9IGdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzKCk7XG4gICAgcmVsb2FkTWFwKGNvbG9ycyk7XG5cbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gaGF2ZSB0aGF0IGZpbHRlciB2YWx1ZVxuICAgICQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgbWFwLmFkZE1hcmtlcihpbmRleCwge1xuICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG4gICAgICAgICAgICAvLyBzZXQgdGhlIHN0eWxlIGZvciB0aGlzIG1hcmtlclxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgIHI6IG1hcFJhbmdlKGN1cnJlbnRNYXJrZXIuQ291bnQsIG1pbkNvdW50LCBtYXhDb3VudCwgbWluUmFkaXVzLCBtYXhSYWRpdXMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwidmFyIG1hcHBpbmdNYXJrZXJzID0gW107XG52YXIgbWFwcGluZ0NvdW50cmllcyA9IFtdO1xuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlZ2lzdGVyVHJhbnNmb3JtZXIgPSBmdW5jdGlvbihqc29uTG9jYXRpb24sIGNvdW50cmllc01hcHBpbmdKc29uLCBtYXJrZXJzTWFwcGluZ0pzb24pIHtcblx0Ly8ganNvbkxvY2F0aW9uIC0gdXJsIG9mIHRoZSBuZXcganNvblxuXHQvLyBjb3VudHJpZXNNYXBwaW5nSnNvbiAtIGpzb24gdGhhdCBjb250YWlucyB0aGUganNvbiBjb3VudHJ5IG1hcHBpbmdcblx0dmFyIGNvdW50cmllc01hcHBpbmdKc29uID0gXCIuLi9tYXBwaW5nSlNPTi9tYXBwaW5nQ291bnRyaWVzU2FtcGxlLmpzb25cIjtcblx0Ly8gbWFya2Vyc01hcHBpbmdKc29uIC0ganNvbiB0aGF0IGNvbnRhaW5zIHRoZSBqc29uIG1hcmtlcnMgbWFwcGluZ1xuXHR2YXIgbWFya2Vyc01hcHBpbmdKc29uID0gXCIuLi9tYXBwaW5nSlNPTi9tYXBwaW5nTWFya2Vyc1NhbXBsZS5qc29uXCI7XG5cblx0aWYoIWNvdW50cmllc01hcHBpbmdKc29uKSB7XG5cdFx0Y29uc29sZS5lcnJvcigneW91IG11c3Qgc3BlY2lmeSBhIGNvdW50cmllcyBtYXBwaW5nIGpzb24nKTtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYoIW1hcmtlcnNNYXBwaW5nSnNvbikge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ3lvdSBtdXN0IHNwZWNpZnkgYSBtYXJrZXJzIG1hcHBpbmcganNvbicpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIGdldCB0aGUgSlNPTlxuXHRqc29uTG9jYXRpb24gPSBcIi4uL2pzb24vZXNwaWQtc3BhaW4uanNvblwiO1xuXHQkLmdldEpTT04oanNvbkxvY2F0aW9uLCBmdW5jdGlvbihqc29uKSB7XG5cdFx0Ly8gcmVhZCBjb3VudHJpZXNcblx0XHRqc29uTWFwQ291bnRyaWVzKGpzb24sIGNvdW50cmllc01hcHBpbmdKc29uKTtcblx0XHQvLyByZWFkIG1hcmtlcnNcblx0XHRqc29uTWFwTWFya2Vycyhqc29uLCBtYXJrZXJzTWFwcGluZ0pzb24pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24ganNvbk1hcENvdW50cmllcyhqc29uLCBjb3VudHJpZXNNYXBwaW5nSnNvbikge1xuXHR2YXIgY291bnRyaWVzID0gW107XG5cdC8vIGFjY2VzcyB0aGUgSlNPTiBmaWxlIHRoYXQgc3BlY2lmaWVzIHRoZSBtYXBwaW5nXG5cdCQuZ2V0SlNPTihjb3VudHJpZXNNYXBwaW5nSnNvbiwgZnVuY3Rpb24oanNvbk1hcHBpbmcpIHtcblxuXHRcdC8vIGluIHRoaXMgY2FzZSB0aGUgJ2NvdW50cmllcycgYXJlIGRlZmluZWQgdGhlIHRvcCBsZXZlbFxuXHRcdC8vIGl0ZXJhdGUgdGhyb3VnaCBldmVyeSAnY291bnRyeSdcblx0XHQkLmVhY2goanNvbiwgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRKU09OKSB7XG5cdFx0XHR2YXIganNvbkNvdW50cnkgPSAneyc7XG5cdFx0XHQvLyBnZXQgdGhlIG5hbWUgb2YgdGhlIGNvdW50cnlcblx0XHRcdHZhciBuYW1lID0gY3VycmVudEpTT05banNvbk1hcHBpbmcuY291bnRyeV07XG5cdFx0XHQvLyB0aGUgY291bnRyeSBuYW1lIG11c3QgYmUgb24gdGhlIHR3by1kaWdpdCBmb3JtYXRcblx0XHRcdC8vIGdldCB0aGUgY291bnQgLSBXSEFUIElTIFRIRSBDT1VOVD9cblx0XHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XHQvL2dldCB0aGUgZGVzY3JpcHRpb24gLSBXSFQgSVMgVEhFIERFU0NSSVBUSU9OIE9GIEEgTUFSS0VSP1xuXHRcdFx0dmFyIGRlc2NyaXB0aW9uID0gJyc7XG5cdFx0XHQvKlxuXHRcdFx0V0hBVCBBUkUgVEhFIE5BTUVTPz8/XG5cdFx0XHQqL1xuXHRcdFx0Y291bnRyaWVzW2luZGV4XSA9IG5ldyBDb3VudHJ5KCcnLCBuYW1lLCBjb3VudCk7XG5cdFx0fSk7XG5cdFx0bWFwcGluZ0NvdW50cmllcyA9IGNvdW50cmllcztcblx0XHRjb25zb2xlLmxvZyhtYXBwaW5nQ291bnRyaWVzKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGpzb25NYXBNYXJrZXJzKGpzb24sIG1hcmtlcnNNYXBwaW5nSnNvbikge1xuXHR2YXIgbWFya2VycyA9IFtdO1xuXG5cdC8vIGFjY2VzcyB0aGUgSlNPTiBmaWxlIHRoYXQgc3BlY2lmaWVzIHRoZSBtYXBwaW5nXG5cdCQuZ2V0SlNPTihtYXJrZXJzTWFwcGluZ0pzb24sIGZ1bmN0aW9uKGpzb25NYXBwaW5nKSB7XG5cdFx0Ly8gaW4gdGhpcyBjYXNlIHRoZSAnbWFya2VycycgYXJlIGRlZmluZWQgdGhlIHRvcCBsZXZlbFxuXHRcdC8vIGl0ZXJhdGUgdGhyb3VnaCBldmVyeSAnbWFya2VyJ1xuXHRcdCQuZWFjaChqc29uLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEpTT04pIHtcblx0XHRcdC8vIGdldCB0aGUgbmFtZSBvZiB0aGUgY291bnRyeVxuXHRcdFx0dmFyIG5hbWUgPSBjdXJyZW50SlNPTltqc29uTWFwcGluZy5jb3VudHJ5XTtcblx0XHRcdC8vIHRoZSBjb3VudHJ5IG5hbWUgbXVzdCBiZSBvbiB0aGUgdHdvLWRpZ2l0IGZvcm1hdFxuXHRcdFx0Ly8gZ2V0IHRoZSBjb3VudCAtIFdIQVQgSVMgVEhFIENPVU5UP1xuXHRcdFx0dmFyIGNvdW50ID0gMDtcblx0XHRcdC8vIGdldCB0aGUgbGF0aXR1ZGVcblx0XHRcdHZhciBsYXRpdHVkZSA9IGN1cnJlbnRKU09OW2pzb25NYXBwaW5nLkxhdGl0dWRlXTtcblx0XHRcdC8vIGdldCB0aGUgbG9uZ2l0dWRlXG5cdFx0XHR2YXIgbG9uZ2l0dWRlID0gY3VycmVudEpTT05banNvbk1hcHBpbmcuTG9uZ2l0dWRlXTtcblx0XHRcdC8vZ2V0IHRoZSBkZXNjcmlwdGlvbiAtIFdIQVQgSVMgVEhFIERFU0NSSVBUSU9OIE9GIEEgTUFSS0VSP1xuXHRcdFx0dmFyIGRlc2NyaXB0aW9uID0gJyc7XG5cdFx0XHQvKlxuXHRcdFx0V0hBVCBBUkUgVEhFIE5BTUVTPz8/XG5cdFx0XHQqL1xuXHRcdFx0Ly8gY3JlYXRlIGEgbmV3IG1hcmtlclxuXHRcdFx0bWFya2Vyc1tpbmRleF0gPSBuZXcgTWFya2VyKCcnLCBuYW1lLCBjb3VudCwgbGF0aXR1ZGUsIGxvbmdpdHVkZSk7XG5cdFx0fSk7XG5cdFx0bWFwcGluZ01hcmtlcnMgPSBtYXJrZXJzO1xuXHRcdGNvbnNvbGUubG9nKG1hcHBpbmdNYXJrZXJzKTtcblx0fSk7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuZmlsdGVyT25TZXJ2ZXIgPSBmdW5jdGlvbihmaWx0ZXJzKSB7XG4gICAgLy8gcmVhZCB0aGUgZmlsdGVycyBmcm9tIGEgSlNPTiBmaWxlIChqdXN0IGZvciB0ZXN0aW5nKVxuICAgICQuZ2V0SlNPTihcIi4uL2pzb24vc2VydmVyRmlsdGVyLmpzb25cIiwgZnVuY3Rpb24oZmlsdGVyc0pTT04pIHtcbiAgICAgICAgLy8gY29udmVydCB0aGUgZmlsdGVyc0pTT04gdG8gYSBzdHJpbmdcbiAgICAgICAgdmFyIGZpbHRlcnNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShmaWx0ZXJzSlNPTik7XG4gICAgICAgIC8vIGJ1aWxkIHRoZSB1cmwgdG8gc2VuZCB0byB0aGUgc2VydmVyXG4gICAgICAgIHZhciB1cmwgPSAnaHR0cDovL3NlcnZlckZpbHRlcmluZy5jb20vP2RhdGE9JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJzU3RyaW5nKTtcbiAgICAgICAgLy8gRk9SIFRFU1RJTkcgUFVSUE9TRVMgLSB0aGlzIGZpbGUgY29udGFpbnMgYSBkaWZmZXJlbnQgc2V0XG4gICAgICAgIC8vIG9mIGNvdW50cmllcyBhbmQgbWFya2Vyc1xuICAgICAgICB1cmwgPSAnLi4vanNvbi9jb3VudHJpZXNfcGx1c19tYXJrZXJzMi5qc29uJztcbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdG8gZ2V0IHRoZSBtYXJrZXJzIGFuZCBjb3VudHJpZXNcbiAgICAgICAgJC5nZXRKU09OKHVybCwgZnVuY3Rpb24oanNvbikge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBUSElTIENPREUgSVMgU0VSVkVSIFNJREVcbiAgICAgICAgICAgIHZhciBteVBhcmFtID0gdXJsLnNwbGl0KCdkYXRhPScpWzFdO1xuICAgICAgICAgICAgdmFyIHJldHVybkpTT04gPSBkZWNvZGVVUklDb21wb25lbnQobXlQYXJhbSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKHJldHVybkpTT04pKTtcbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBKU09OIHRvIGdldCB0aGUgY291bnRyaWVzIGFuZCBtYXJrZXJzXG4gICAgICAgICAgICBqc29uQ291bnRyaWVzID0gcmVhZENvdW50cmllc0Zyb21KU09OKGpzb24uY291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgY29sb3VycyBmb3IgdGhlIGNvdW50cmllc1xuICAgICAgICAgICAgdmFyIGNvdW50cnlDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyhqc29uQ291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGNvdW50cmllcyBvbiB0aGUgbWFwXG4gICAgICAgICAgICByZWxvYWRNYXAoY291bnRyeUNvbG9ycyk7XG5cbiAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UgYWxzbyBoYXZlIG1hcmtlcnNcbiAgICAgICAgICAgIGlmIChqc29uLm1hcmtlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyByZWFkIHRoZSBtYXJrZXJzIGZyb20gdGhlIEpTT04gZmlsZVxuICAgICAgICAgICAgICAgIGpzb25NYXJrZXJzID0gcmVhZE1hcmtlcnNGcm9tSlNPTihqc29uLm1hcmtlcnMpO1xuICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXJzIHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCIvLyByZWRyYXcgdGhlIG1hcFxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5yZWxvYWRNYXAgPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAvLyB1cGRhdGUgbWluIGFuZCBtYXggQ291bnQgb2YgdGhlIGNvdW50cmllc1xuICAgIGlmICh0aGlzLmpzb25Db3VudHJpZXMubGVuZ3RoID4gMClcbiAgICAgICAgdGhpcy5yZWFkTWluTWF4KGNvbG9ycyk7XG5cbiAgICAvLyBlcmFzZSB0aGUgbWFwXG4gICAgJChcIiNcIiArIHRoaXMubURpdikuZW1wdHkoKTtcblxuICAgIHZhciB2TWFwID0gdGhpcztcblxuICAgIHRoaXMubWFwID0gbmV3IGp2bS5NYXAoe1xuICAgICAgICBtYXA6IHZNYXAubVR5cGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdk1hcC5iYWNrZ3JvdW5kLFxuICAgICAgICBjb250YWluZXI6ICQoJyMnICsgdk1hcC5tRGl2KSxcbiAgICAgICAgb25SZWdpb25DbGljazogZnVuY3Rpb24oZSwgY29kZSkge1xuICAgICAgICAgICAgY291bnRyeUNvZGUgPSBjb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgbmV3TWFwID0gY291bnRyeUNvZGUgKyAnX21pbGxfZW4nO1xuICAgICAgICAgICAgLy8gc3dpdGggdG8gbmV3IG1hcFxuICAgICAgICAgICAgdk1hcC5zd2l0Y2hNYXAobmV3TWFwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZE1hcmtlclRvb2x0aXAodk1hcC5qc29uTWFya2VycywgaW5kZXgpO1xuICAgICAgICAgICAgbGFiZWwuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICB9LFxuICAgICAgICBvblJlZ2lvblRpcFNob3c6IGZ1bmN0aW9uKGUsIGNvdW50cnlOYW1lLCBjb2RlKSB7XG4gICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSBjb3VudHJ5IChpLmUuLCBQVCwgRVMsIEZSLCBldGMpXG4gICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgQ291bnRyeSAtIGxvb2sgZm9yIHRoZSBjb3VudHJ5XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRDb3VudHJ5ID0gLTE7XG4gICAgICAgICAgICAkLmVhY2godk1hcC5qc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkubmFtZSA9PT0gY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ291bnRyeSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZENvdW50cnlUb29sdGlwKGNvdW50cnlOYW1lLCBzZWxlY3RlZENvdW50cnkpO1xuICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoY291bnRyeU5hbWUuaHRtbCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICBtYXJrZXJzOiBbZmluYWxNYXJrZXJzSW5NYXBdLFxuICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgY291bnRcbiAgICAgICAgICAgICAgICBzY2FsZTogW3ZNYXAubWluQ29sb3JNYXAsIHZNYXAubWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ2ZpbGwnLFxuICAgICAgICAgICAgICAgIHZhbHVlczogY29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgdGhlIG1hcmtlcyB0byB0aGUgbWFwXG4gICAgaWYgKHZNYXAudGhlcmVBcmVNYXJrZXJzKVxuICAgICAgICB2TWFwLmFkZE1hcmtlcnNUb01hcCgpO1xufVxuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlbW92ZVRvb2x0aXAgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBlcmFzZSB0aGUgcHJldmlvdXMgbWFwIHRvb2x0aXBcbiAgICAkKCcuanZlY3Rvcm1hcC10aXAnKS5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQmFja0J1dHRvbigpIHtcbiAgICAvLyBlcmFzZSB0aGUgcHJldmlvdXMgbWFwIHRvb2x0aXBcbiAgICAkKCcuanZlY3Rvcm1hcC1nb2JhY2snKS5yZW1vdmUoKTtcbn1cblxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5zd2l0Y2hNYXAgPSBmdW5jdGlvbihuZXdNYXApIHtcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIHdoZW4gYSBjb3VudHJ5IG9uIHRoZSB3b3JsZCBtYXAgaXMgY2xpY2tlZFxuICAgIC8vIGVyYXNlIHRoZSBwcmV2aW91cyBtYXBcbiAgICAkKCcjJyArIHRoaXMubURpdikuZW1wdHkoKTtcbiAgICB0aGlzLnJlbW92ZVRvb2x0aXAoKTtcbiAgICB2YXIgcmVnaW9uQ29sb3JzID0gKChkYXRhVHlwZSA9PSAnY291bnRyaWVzJykgPyB0aGlzLmdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzKHRoaXMuanNvbkNvdW50cmllcykgOiBbXSk7XG4gICAgdmFyIHZNYXAgPSB0aGlzO1xuXG4gICAgdGhpcy5tYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgIG1hcDogbmV3TWFwLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZNYXAuYmFja2dyb3VuZCxcbiAgICAgICAgY29udGFpbmVyOiAkKCcjJyArIHZNYXAubURpdiksXG4gICAgICAgIG9uTWFya2VyVGlwU2hvdzogZnVuY3Rpb24oZSwgbGFiZWwsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRNYXJrZXJUb29sdGlwKHZNYXAuanNvbk1hcmtlcnMsIGluZGV4KTtcbiAgICAgICAgICAgIGxhYmVsLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCByZWdpb25OYW1lLCBjb2RlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudE1hcCA9IG5ld01hcC5zcGxpdCgnXycpWzBdLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSByZWdpb24gKGkuZS4sIFBULTEsIEVTLU0sIGV0YylcbiAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgUmVnaW9uIC0gbG9vayBmb3IgdGhlIFJlZ2lvblxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgY29ycmVzcG9uZGluZyBjb3VudHJ5XG4gICAgICAgICAgICAkLmVhY2godk1hcC5qc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkuY291bnRyeSA9PSBjdXJyZW50TWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyeSA9IGN1cnJlbnRDb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2VsZWN0ZWQgcmVnaW9uIGhhcyBhbnkgZGF0YSBpbnNpZGUgdGhhdCBjb3VudHJ5XG4gICAgICAgICAgICB2YXIgcmVnaW9uRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJlZ2lvbjtcbiAgICAgICAgICAgICQuZWFjaCh2TWFwLm1hcC5yZWdpb25zLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFJlZ2lvbikge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVnaW9uLm5hbWUgPT0gY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJlZ2lvbiA9IGN1cnJlbnRSZWdpb247XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlZ2lvbkZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVnaW9uTmFtZS5odG1sKGJ1aWxkUmVnaW9uVG9vbHRpcChzZWxlY3RlZFJlZ2lvbikpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgcmVnaW9uTmFtZS5odG1sKHJlZ2lvbk5hbWUuaHRtbCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICBtYXJrZXJzOiBbZmluYWxNYXJrZXJzSW5NYXBdLFxuICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgY291bnRcbiAgICAgICAgICAgICAgICBzY2FsZTogW3ZNYXAubWluQ29sb3JNYXAsIHZNYXAubWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ2ZpbGwnLFxuICAgICAgICAgICAgICAgIHZhbHVlczogcmVnaW9uQ29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgYmFjayBidXR0b25cbiAgICAkKCcjbXlfbWFwJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwianZlY3Rvcm1hcC1nb2JhY2tcIj5CYWNrPC9kaXY+Jyk7XG4gICAgJChcIi5qdmVjdG9ybWFwLWdvYmFja1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZXJhc2UgdGhlIHByZXZpb3VzIG1hcFxuICAgICAgICAkKCcjJyArIHRoaXMubURpdikuZW1wdHkoKTtcbiAgICAgICAgdk1hcC5yZW1vdmVUb29sdGlwKCk7XG4gICAgICAgIHZNYXAucmVsb2FkTWFwKHZNYXAuYXV4Q29sb3JzKTtcbiAgICB9KTtcblxuICAgIC8vIGFkZCB0aGUgbWFya2VzIHRvIHRoZSBtYXBcbiAgICBpZiAodGhpcy50aGVyZUFyZU1hcmtlcnMpIHtcbiAgICAgICAgdGhpcy5hZGRNYXJrZXJzVG9NYXAodGhpcy5maWx0ZXJlZE1hcmtlcnMpO1xuICAgIH1cbn1cbiIsIi8vIE1hcmtlciBkZWZpbml0aW9uXG52YXIgTWFya2VyID0gZnVuY3Rpb24obWFya2VyT2JqZWN0KSB7XG4gICAgLy8gYWRkIGF0dHJpYnV0ZXNcbiAgICB2YXIgYXR0cmlidXRlcyA9IG1hcmtlck9iamVjdFtcImF0dHJpYnV0ZXNcIl07XG4gICAgdmFyIG1hcmtlciA9IHRoaXM7XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuICAgICAgICBtYXJrZXJbYXR0cl0gPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb3VudHJ5ID0gbWFya2VyT2JqZWN0LmNvdW50cnk7XG4gICAgdGhpcy5jb3VudCA9ICttYXJrZXJPYmplY3QuY291bnQ7XG4gICAgdGhpcy5sYXRpdHVkZSA9IG1hcmtlck9iamVjdC5sYXRpdHVkZTtcbiAgICB0aGlzLmxvbmdpdHVkZSA9IG1hcmtlck9iamVjdC5sb25naXR1ZGU7XG4gICAgdGhpcy5pY29uID0gbWFya2VyT2JqZWN0Lmljb247XG4gICAgLy8gVE9ETyAtIGFkZCBlc2NyaXB0aW9uIHRvIGEgTWFya2VyIGZyb20gdGhlIEpTT04gZmlsZVxuICAgIHRoaXMuZGVzYyA9ICdhYmMnO1xufTtcblxuLy8gcmVhZCB0aGUgbWFya2VycyBmcm9tIGEgSlNPTiBmaWxlXG5mdW5jdGlvbiByZWFkTWFya2Vyc0Zyb21KU09OKGpzb25NYXJrZXJzKSB7XG4gICAgdmFyIG1hcmtlcnMgPSBbXTtcblxuICAgIG1pbkNvdW50ID0gSW5maW5pdHk7XG4gICAgbWF4Q291bnQgPSAtSW5maW5pdHk7XG5cbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50SlNPTk1hcmtlcikge1xuICAgICAgICBtYXJrZXJzLnB1c2gobmV3IE1hcmtlcihjdXJyZW50SlNPTk1hcmtlcikpO1xuICAgICAgICB2YXIgY3VycmVudENvdW50VmFsdWUgPSBtYXJrZXJzW2luZGV4XS5Db3VudDtcblxuICAgICAgICBpZiAoY3VycmVudENvdW50VmFsdWUgPiBtYXhDb3VudCkge1xuICAgICAgICAgICAgbWF4Q291bnQgPSBjdXJyZW50Q291bnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudENvdW50VmFsdWUgPCBtaW5Db3VudClcbiAgICAgICAgICAgIG1pbkNvdW50ID0gY3VycmVudENvdW50VmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcmtlcnM7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuYWRkTWFya2Vyc1RvTWFwID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgbWFya2Vyc0pTT05BcnJheSA9IFtdO1xuICAgICQuZWFjaCh0aGlzLmZpbHRlcmVkTWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRNYXJrZXJKU09OID0ge1xuICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5sYXRpdHVkZSwgY3VycmVudE1hcmtlci5sb25naXR1ZGVdLFxuICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuICAgICAgICAgICAgLy8gc2V0IHRoZSBzdHlsZSBmb3IgdGhpcyBtYXJrZXJcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5jb3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cyksXG4gICAgICAgICAgICAgICAgaW1hZ2U6ICcuLi9pbWcvJyArIGN1cnJlbnRNYXJrZXIuaWNvbiArICcucG5nJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtYXJrZXJzSlNPTkFycmF5LnB1c2goY3VycmVudE1hcmtlckpTT04pO1xuICAgIH0pO1xuICAgIHRoaXMubWFwLmFkZE1hcmtlcnMobWFya2Vyc0pTT05BcnJheSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTWFya2VyVG9vbHRpcChqc29uTWFya2VycywgbWFya2VyKSB7XG4gICAgdmFyIGZpbmFsVG9vbHRpcCA9IG1hcmtlclRvb2x0aXA7XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKG1hcmtlciksIGZ1bmN0aW9uKGluZGV4LCBhdHRyKSB7XG4gICAgICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKGF0dHIsIG1hcmtlclthdHRyXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbmFsVG9vbHRpcDtcbn1cbiIsImZ1bmN0aW9uIGZpbHRlcihpbnB1dEFyZ3MpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0QXJncylcbiAgICB2YXIgbnVtYmVyS2V5cyA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWxpZEZpbHRlcnMgPSAwO1xuXG4gICAgdmFyIGNvdW50cmllc0J5RmlsdGVyID0gbmV3IEFycmF5KCk7XG4gICAgdmFyIG1hcmtlcnNCeUZpbHRlciA9IG5ldyBBcnJheSgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJLZXlzOyBpKyspIHtcbiAgICAgICAgY291bnRyaWVzQnlGaWx0ZXJbaV0gPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgbWFya2Vyc0J5RmlsdGVyW2ldID0gbmV3IEFycmF5KCk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgYW55IG9mIHRoZSBuYW1lcyBpcyBhbGwgKHJlc2V0IGFsbCBhcHBsaWVkIGZpbHRlcnNcdClcbiAgICB2YXIgZXhpdCA9IGZhbHNlO1xuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICBpZiAoZmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpID09ICdhbGwnKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHJlbG9hZHMgdGhlIG9yaWdpbmFsIG1hcmtlcnMgYW5kIGNvdW50cmllcyBvbiB0aGUgbWFwXG4gICAgICAgICAgICByZXNldEZpbHRlcnMoKTtcbiAgICAgICAgICAgIC8vIGVyYXNlIHRoZSB0ZXh0IGZyb20gdGhlIGZpbHRlcnMgYm94XG4gICAgICAgICAgICByZXNldEZpbHRlcnNCb3goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChleGl0KVxuICAgICAgICByZXR1cm47XG5cbiAgICAvLyBmb3IgZXZlcnkga2V5L2ZpbHRlclxuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgZmlsdGVyTmFtZSBpcyB2YWxpZFxuICAgICAgICBpZiAoIWNoZWNrRmlsdGVyTmFtZUlzVmFsaWQoZmlsdGVyTmFtZSkpIHtcbiAgICAgICAgICAgIC8vIGludmFsaWQgZmlsdGVyIG5hbWVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIGZpbHRlciBuYW1lISgnICsgZmlsdGVyTmFtZSArICcpJyk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgZmlsdGVyIHZhbHVlIChjYW4gY29udGFpbiBlbnVtZXJhdGlvbiBhbmQgcmFuZ2UpXG4gICAgICAgICAgICAvLyAnMjAwNC0yMDA2JyAsICdGLE0nLCBldGNcbiAgICAgICAgICAgIHZhciBmaWx0ZXJWYWx1ZSA9IGlucHV0QXJnc1tmaWx0ZXJOYW1lXTtcbiAgICAgICAgICAgIC8vIGdldCBhbGwgc2luZ2xlIGZpbHRlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhciBmaW5hbFBhcnRzID0gZ2V0QWxsRmlsdGVyVmFsdWVzKGZpbHRlclZhbHVlKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZmluYWxQYXJ0cyk7XG4gICAgICAgICAgICB2YWxpZEZpbHRlcnMrKztcblxuICAgICAgICAgICAgLy8gZm9yIGV2ZXJ5IHNpbmdsZSB2YWx1ZSBnZXQgYWxsIHRoZSBjb3VudHJ1ZXMgYW5kIG1hcmtlcnNcbiAgICAgICAgICAgICQuZWFjaChmaW5hbFBhcnRzLCBmdW5jdGlvbihpLCBwYXJ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrUmV0dXJuID0gY2hlY2tXaGF0Q291bnRyaWVzTWFya2Vyc1RvQWRkKGZpbHRlck9iamVjdCwgcGFydCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cmllc0F1eCA9IGNoZWNrUmV0dXJuWzBdO1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzQXV4ID0gY2hlY2tSZXR1cm5bMV07XG4gICAgICAgICAgICAgICAgLy8gYWRkIGV2ZXJ5IGNvdW50cnkgdG8gdGhlIGxpc3Qgb2YgY291bnRyaWVzQnlGaWx0ZXJcbiAgICAgICAgICAgICAgICAvLyBhZGQgZXZlcnkgbWFya2VyIHRvIHRoZSBsaXN0IG9mIG1hcmtlcnNCeUZpbHRlclxuICAgICAgICAgICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNBdXgpLCBmdW5jdGlvbihqLCBjdXJyZW50S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb2xvcnMgdGhhdCBhcmUgcmV0dXJuZWQgYXJlIGluIGEganNvbiBmb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gY291bnRyaWVzQXV4W2N1cnJlbnRLZXldO1xuICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUZpbHRlcltpbmRleF1bY3VycmVudEtleV0gPSBrZXlWYWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIG1hcmtlcnNcbiAgICAgICAgICAgICAgICAkLmVhY2gobWFya2Vyc0F1eCwgZnVuY3Rpb24oaiwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzQnlGaWx0ZXJbaW5kZXhdLnB1c2goY3VycmVudE1hcmtlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZ2V0IHRoZSBmaW5hbCBjb3VudHJpZXNcbiAgICB2YXIgZmluYWxDb3VudHJpZXMgPSBbXTtcbiAgICBpZiAoY291bnRyaWVzQnlGaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBmaW5hbENvdW50cmllcyA9IGNvdW50cmllc0J5RmlsdGVyWzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50cmllc0J5RmlsdGVyLmxlbmd0aCAtIDE7IGkrKylcbiAgICAgICAgICAgIGZpbmFsQ291bnRyaWVzID0gZ2V0Q291bnRyaWVzSW50ZXJzZWN0aW9uKGZpbmFsQ291bnRyaWVzLCBjb3VudHJpZXNCeUZpbHRlcltpICsgMV0pO1xuICAgIH1cblxuICAgIC8vIGFkZCBjb3VudHJpZXMgdG8gTWFwXG4gICAgcmVsb2FkTWFwKGZpbmFsQ291bnRyaWVzKTtcblxuICAgIC8vIGdldCB0aGUgZmluYWwgbWFya2Vyc1xuICAgIGZpbHRlcmVkTWFya2VycyA9IFtdO1xuICAgIGlmIChtYXJrZXJzQnlGaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBmaWx0ZXJlZE1hcmtlcnMgPSBtYXJrZXJzQnlGaWx0ZXJbMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya2Vyc0J5RmlsdGVyLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgZmlsdGVyZWRNYXJrZXJzID0gZ2V0TWFya2Vyc0ludGVyc2VjdGlvbihmaWx0ZXJlZE1hcmtlcnMsIG1hcmtlcnNCeUZpbHRlcltpICsgMV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIG1hcmtlcnMgdG8gdGhlIG1hcFxuICAgIGFkZE1hcmtlcnNUb01hcCgpO1xufVxuXG5mdW5jdGlvbiBnZXRNYXJrZXJzSW50ZXJzZWN0aW9uKG1hcmtlcnNHcm91cDEsIG1hcmtlcnNHcm91cDIpIHtcbiAgICB2YXIgbWFya2VycyA9IFtdO1xuXG4gICAgLy8gbWFya2VycyB0aGF0IGJlbG9uZyB0byB0aGUgdHdvIGdyb3Vwc1xuICAgICQuZWFjaChtYXJrZXJzR3JvdXAxLCBmdW5jdGlvbihpbmRleCwgbWFya2VyMSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGlzIG1hcmtlciBuYW1lIGlzIGluc2lkZSB0aGUgc2Vjb25kIGdyb3VwXG4gICAgICAgIHZhciBtYXJrZXIxQ291bnRyeSA9IG1hcmtlcjEuY291bnRyeTtcbiAgICAgICAgJC5lYWNoKG1hcmtlcnNHcm91cDIsIGZ1bmN0aW9uKGluZGV4LCBtYXJrZXIyKSB7XG4gICAgICAgICAgICB2YXIgbWFya2VyMkNvdW50cnkgPSBtYXJrZXIyLmNvdW50cnk7XG4gICAgICAgICAgICBpZiAobWFya2VyMUNvdW50cnkgPT0gbWFya2VyMkNvdW50cnkpXG4gICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKG1hcmtlcjEpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJrZXJzO1xufVxuXG5mdW5jdGlvbiBnZXRDb3VudHJpZXNJbnRlcnNlY3Rpb24oY291bnRyaWVzR3JvdXAxLCBjb3VudHJpZXNHcm91cDIpIHtcbiAgICAvLyBjb3VudHJpZXMgdGhhdCBiZWxvbmcgdG8gdGhlIHR3byBncm91cHNcbiAgICB2YXIgY291bnRyaWVzID0gW107XG5cbiAgICAkLmVhY2goT2JqZWN0LmtleXMoY291bnRyaWVzR3JvdXAxKSwgZnVuY3Rpb24oaW5kZXgsIGNvdW50cnlOYW1lMSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGNvdW50cnkgbmFtZSBpcyBpbnNpZGUgdGhlIHNlY29uZCBncm91cFxuICAgICAgICAkLmVhY2goT2JqZWN0LmtleXMoY291bnRyaWVzR3JvdXAyKSwgZnVuY3Rpb24oaW5kZXgsIGNvdW50cnlOYW1lMikge1xuICAgICAgICAgICAgaWYgKGNvdW50cnlOYW1lMSA9PSBjb3VudHJ5TmFtZTIpXG4gICAgICAgICAgICAgICAgY291bnRyaWVzW2NvdW50cnlOYW1lMV0gPSBjb3VudHJpZXNHcm91cDFbY291bnRyeU5hbWUxXTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50cmllcztcbn1cblxuZnVuY3Rpb24gYXBwbHlNdWx0aXBsZUZpbHRlcnNQcm9ncmFtYXR0aWNhbGx5KGZpbHRlcnNUb0FwcGx5KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmaWx0ZXJzVG9BcHBseSlcbiAgICB2YXIgbnVtRmlsdGVyc1RvQXBwbHkgPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgY291bnRyaWVzSGF2ZUZpbHRlciA9IFtdO1xuICAgIHZhciBtYXJrZXJzSGF2ZUZpbHRlciA9IFtdO1xuXG4gICAgLy8gZm9yIGV2ZXJ5IGtleVxuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICB2YXIgZmlsdGVyVmFsdWUgPSBmaWx0ZXJzVG9BcHBseVtmaWx0ZXJOYW1lXTtcbiAgICB9KTtcbiAgICB2YXIgY29sb3JzID0gW107XG5cbiAgICAvLyByZW1vdmUgYWxsIG1hcmtlcnMgZnJvbSB0aGUgbWFwXG4gICAgbWFwLnJlbW92ZUFsbE1hcmtlcnMoKTtcblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBjb3VudHJpZXNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlck5hbWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10udG9Mb3dlckNhc2UoKSA9PSBjdXJyZW50RmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50VmFsdWVdID09IGZpbHRlcnNUb0FwcGx5W2N1cnJlbnRGaWx0ZXJOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0hhdmVGaWx0ZXJbY291bnRyeUluZGV4XSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gY29sb3VyIG9ubHkgdGhlIGNvdW50cmlzIHdob3NlIGNvdW50cmllc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bWJlckZpbHRlcnNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBpZiAoY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KVxuICAgICAgICAgICAgY29sb3JzW2N1cnJlbnRDb3VudHJ5LmNvdW50cnldID0gY3VycmVudENvdW50cnkuQ291bnQ7XG4gICAgfSk7XG4gICAgcmVsb2FkTWFwKGNvbG9ycyk7XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8qXG4gICAgTWFya2Vyc1xuICAgICovXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBtYXJrZXJzXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihtYXJrZXJJbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlck5hbWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdLnRvTG93ZXJDYXNlKCkgPT0gY3VycmVudEZpbHRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBieSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50VmFsdWVdID09IGZpbHRlcnNUb0FwcGx5W2N1cnJlbnRGaWx0ZXJOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNIYXZlRmlsdGVyW21hcmtlckluZGV4XSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIHNhdGlzZnkgdGhlIGNyaXRlcmlhXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICBpZiAobWFya2Vyc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KSB7XG4gICAgICAgICAgICBtYXAuYWRkTWFya2VyKGluZGV4LCB7XG4gICAgICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRNYXJrZXIuZGVzYyxcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2dyZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIGFwcGx5TXVsdGlwbGVGaWx0ZXJzKHNlbGVjdGVkTXVsdGlwbGVGaWx0ZXJzLCBqc29uRmlsdGVycykge1xuXG4gICAgLy8gbnVtYmVyIG9mIGZpbHRlcnMgdG8gYmUgYXBwbGllZFxuICAgIHZhciBudW1GaWx0ZXJzVG9BcHBseSA9IHNlbGVjdGVkTXVsdGlwbGVGaWx0ZXJzLmZpbHRlcihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgIH0pLmxlbmd0aDtcblxuICAgIHZhciBjb3VudHJpZXNIYXZlRmlsdGVyID0gW107XG4gICAgdmFyIG1hcmtlcnNIYXZlRmlsdGVyID0gW107XG5cbiAgICAvLyBmb3IgZWFjaCBvZiB0aGUgY291bnRyaWVzXG4gICAgJC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGNvdW50cnlJbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgLy8gc2V0IHRvIDAgdGhlIG51bWJlciBvZiBmaWx0ZXJzXG4gICAgICAgIGNvdW50cmllc0hhdmVGaWx0ZXJbY291bnRyeUluZGV4XSA9IDA7XG4gICAgICAgIC8vIGNoZWNrIGlmIGl0IGhhcyB0aGUgbmVlZGVkIHZhbHVlc1xuICAgICAgICAkLmVhY2goc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10gPT09IGpzb25GaWx0ZXJzW2luZGV4XS5OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50VmFsdWVdID09IGN1cnJlbnRGaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBjb2xvcnMgPSBbXTtcblxuICAgIC8vIGNvbG91ciBvbmx5IHRoZSBjb3VudHJpcyB3aG9zZSBjb3VudHJpZXNIYXZlRmlsdGVyW2luZGV4XSA9PSBudW1iZXJGaWx0ZXJzXG4gICAgJC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGNvdW50cnlJbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGNvdW50cmllc0hhdmVGaWx0ZXJbY291bnRyeUluZGV4XSA9PSBudW1GaWx0ZXJzVG9BcHBseSlcbiAgICAgICAgICAgIGNvbG9yc1tjdXJyZW50Q291bnRyeS5jb3VudHJ5XSA9IGN1cnJlbnRDb3VudHJ5LkNvdW50O1xuICAgIH0pO1xuXG4gICAgLy8gY29sb3VyIHRoZSBjb3VudHJpZXNcbiAgICByZWxvYWRNYXAoY29sb3JzKTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvKlxuICAgIE1hcmtlcnNcbiAgICAqL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBmb3IgZWFjaCBvZiB0aGUgbWFya2Vyc1xuICAgICQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24obWFya2VySW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgLy8gc2V0IHRvIDAgdGhlIG51bWJlciBvZiBmaWx0ZXJzXG4gICAgICAgIG1hcmtlcnNIYXZlRmlsdGVyW21hcmtlckluZGV4XSA9IDA7XG4gICAgICAgIC8vIGNoZWNrIGlmIGl0IGhhcyB0aGUgbmVlZGVkIHZhbHVlc1xuICAgICAgICAkLmVhY2goc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdLnRvTG93ZXJDYXNlKCkgPT0ganNvbkZpbHRlcnNbaW5kZXhdLk5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBieSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50VmFsdWVdID09IGN1cnJlbnRGaWx0ZXJWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNIYXZlRmlsdGVyW21hcmtlckluZGV4XSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIHNhdGlzZnkgdGhlIGNyaXRlcmlhXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICBpZiAobWFya2Vyc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KSB7XG4gICAgICAgICAgICBtYXAuYWRkTWFya2VyKGluZGV4LCB7XG4gICAgICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRNYXJrZXIuZGVzYyxcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2dyZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwidmFyIFJlZ2lvbiA9IGZ1bmN0aW9uKHJlZ2lvbk9iamVjdCwgY291bnRyeSkge1xuICAgIC8vIHJlYWQgZnJvbSB0aGUgaW5wdXQgcGFyYW1ldGVyc1xuICAgIHRoaXMuUmVnaW9uID0gcmVnaW9uT2JqZWN0Lm5hbWU7XG4gICAgdGhpcy5jb3VudHJ5ID0gY291bnRyeTtcbiAgICAvLyArIGlzIHVzZWQgdG8gYXNzdXJlIHRoYXQgYSBOdW1iZXIgaXMgYmVpbmcgcmVhZFxuICAgIHRoaXMuZGVzYyA9ICdqdXN0IGEgcmVnaW9uLi4uJztcbn07XG5cbmZ1bmN0aW9uIHJlYWRSZWdpb25zRnJvbUpTT04ocmVnaW9ucywgY291bnRyeSkge1xuICAgIHZhciByZWdpb25zQXJyID0gW107XG4gICAgJC5lYWNoKHJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgIHJlZ2lvbnNBcnJbaW5kZXhdID0gbmV3IFJlZ2lvbihjdXJyZW50UmVnaW9uLCBjb3VudHJ5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVnaW9ucztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2xvcnNGb3JUaGVSZWdpb25zKGNvdW50cnkpe1xuICAgIHZhciBpc29Db2RlID0gY291bnRyeS5zcGxpdChcIl9cIilbMF0udG9VcHBlckNhc2UoKTtcbiAgICAvLyBmaW5kIHRoZSBjb3VudHJ5IHdpdGggdGhhdCBpc29Db2RlXG4gICAgdmFyIHJlZ2lvbkNvbG9ycyA9IFtdO1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LmNvdW50cnkgPT0gaXNvQ29kZSkge1xuICAgICAgICAgICAgLy8gY291bnRyeSB3YXMgZm91bmQsIGNoZWNrIGlmIGl0IGhhcyBhbnkgcmVnaW9uXG4gICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkuUmVnaW9ucykge1xuICAgICAgICAgICAgICAgIHZhciByZWdpb25zID0gY3VycmVudENvdW50cnkuUmVnaW9ucztcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHJlZ2lvbnMgb2YgdGhlIGNvdW50cnlcbiAgICAgICAgICAgIFx0JC5lYWNoKHJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgICAgICBcdFx0cmVnaW9uQ29sb3JzW2N1cnJlbnRSZWdpb24ubmFtZV0gPSAxMDA7XG4gICAgICAgICAgICBcdH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cdHJldHVybiByZWdpb25Db2xvcnM7XG59XG5cblxuZnVuY3Rpb24gYnVpbGRSZWdpb25Ub29sdGlwKHJlZ2lvbikge1xuICAgIHZhciBmaW5hbFRvb2x0aXAgPSByZWdpb25Ub29sdGlwO1xuICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKCduYW1lJywgcmVnaW9uLm5hbWUpO1xuICAgIHJldHVybiBmaW5hbFRvb2x0aXA7XG59XG5cbmZ1bmN0aW9uIGFkZFJlZ2lvbnNUb01hcChrZXkpIHtcbiAgICAvLyBjaGVjayBpZiB0aGUgaGlnaGxpZ2h0ZWQgY291bnRyeSBoYXMgYW55IHJlZ2lvblxuICAgIHZhciBpc29Db2RlID0ga2V5LnNwbGl0KFwiX1wiKVswXS50b1VwcGVyQ2FzZSgpO1xuICAgIC8vIGZpbmQgdGhlIGNvdW50cnkgd2l0aCB0aGF0IGlzb0NvZGVcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5jb3VudHJ5ID09IGlzb0NvZGUpIHtcbiAgICAgICAgICAgIC8vIGNvdW50cnkgd2FzIGZvdW5kLCBjaGVjayBpZiBpdCBoYXMgYW55IHJlZ2lvblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LlJlZ2lvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9ucyA9IGN1cnJlbnRDb3VudHJ5LlJlZ2lvbnM7XG4gICAgICAgICAgICAgICAgdmFyIHBhbGV0dGUgPSBbJyM2NkMyQTUnLCAnI0ZDOEQ2MicsICcjOERBMENCJywgJyNFNzhBQzMnLCAnI0E2RDg1NCddO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ29sb3JzKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3JzID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yc1ttYXBzLnJlZ2lvbl1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBtYXBzLnJlZ2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc1trZXldID0gcGFsZXR0ZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYWxldHRlLmxlbmd0aCldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnZW5lcmF0ZUNvbG9ycygpKTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGNvbG9ycyBvZiB0aGUgcmVnaW9uc1xuICAgICAgICAgICAgICAgIG1hcHMuc2VyaWVzLnJlZ2lvbnNbMF0uc2V0VmFsdWVzKGdlbmVyYXRlQ29sb3JzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=