function mapRange(e,t,o,r,n){return r+(n-r)*(e-t)/(o-t)}function buildCountryTooltip(e,t){var o=countryTooltip;return $.each(Object.keys(t),function(e,r){o=o.replace(r,t[r])}),o}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,t){map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function jsonMapCountries(e,t){var o=[];$.getJSON(t,function(t){$.each(e,function(e,r){var n=r[t.country],a=0;o[e]=new Country("",n,a)}),mappingCountries=o,console.log(mappingCountries)})}function jsonMapMarkers(e,t){var o=[];$.getJSON(t,function(t){$.each(e,function(e,r){var n=r[t.country],a=0,i=r[t.Latitude],s=r[t.Longitude];o[e]=new Marker("",n,a,i,s)}),mappingMarkers=o,console.log(mappingMarkers)})}function findMapById(e){var t=null;return $.each(vMaps,function(o,r){r.id==e&&(t=r)}),t}function removeBackButton(){$(".jvectormap-goback").remove()}function readMarkersFromJSON(e){var t=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){t.push(new Marker(o));var r=t[e].Count;r>maxCount&&(maxCount=r),r<minCount&&(minCount=r)}),t}function buildMarkerTooltip(e,t){var o=markerTooltip;return $.each(Object.keys(t),function(e,r){o=o.replace(r,t[r])}),o}function getMarkersIntersection(e,t){var o=[];return $.each(e,function(e,r){var n=r.country;$.each(t,function(e,t){var a=t.country;n==a&&o.push(r)})}),o}function getCountriesIntersection(e,t){var o=[];return $.each(Object.keys(e),function(r,n){$.each(Object.keys(t),function(t,r){n==r&&(o[n]=e[n])})}),o}function applyMultipleFiltersProgramattically(e){var t=Object.keys(e),o=t.length,r=[],n=[];$.each(t,function(t,o){e[o]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(o,n){r[o]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[c]==e[a]&&r[o]++}})}),$.each(jsonCountries,function(e,t){r[e]==o&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,r){n[o]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!r[s])break;r[s].toLowerCase()==a.toLowerCase()&&r[c]==e[a]&&n[o]++}})}),$.each(jsonMarkers,function(e,t){n[e]==o&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,t){var o=e.filter(function(e){return void 0!==e}).length,r=[],n=[];$.each(jsonCountries,function(o,n){r[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(void 0==n[s])break;n[s]===t[e].Name&&n[c]==a&&r[o]++}})});var a=[];$.each(jsonCountries,function(e,t){r[e]==o&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,r){n[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!r[s])break;r[s].toLowerCase()==t[e].Name.toLowerCase()&&r[c]==a&&n[o]++}})}),$.each(jsonMarkers,function(e,t){n[e]==o&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function buildRegionTooltip(e){var t=regionTooltip;return t=t.replace("name",e.name)}var vMaps=[],VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,t,o,r,n,a,i,s,c,u){if(vMaps.push(this),this.id=u,this.background=s,this.mType=i,this.datatype=c,this.jsonCountries=[],this.jsonMarkers=[],this.mDiv=r,this.minColorMap=n,this.maxColorMap=a,"countries"==c)this.jsonCountries=this.readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=c)return void console.error("You must give as input a list of markers or countries!");this.thereAreMarkers=!0,this.jsonMarkers=readMarkersFromJSON(e),this.filteredMarkers=this.jsonMarkers,this.numMarkers=this.jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}this.auxColors="countries"==this.datatype?this.generateColorsForTheCountries():[];var l={vertical:!0};markersWithLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount],legend:l},markersWithoutLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount]},finalMarkersInMap=markersWithLegend,"markers"==this.datatype&&(finalMarkersInMap=markersWithoutLegend);var p=this;this.map=new jvm.Map({container:$("#"+p.mDiv),map:p.mType,backgroundColor:p.background,onRegionClick:function(e,t){countryCode=t.toLowerCase();var o=countryCode+"_mill_en";p.switchMap(o)},onMarkerTipShow:function(e,t,o){var r=buildMarkerTooltip(p.jsonMarkers,p.jsonMarkers[o]);t.html(r)},onRegionTipShow:function(e,t,o){var r=-1;if($.each(p.jsonCountries,function(e,t){return t.name===o?void(r=t):void 0}),-1!=r){var n=buildCountryTooltip(t,r);t.html(n)}else t.html(t.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[p.minColorMap,p.maxColorMap],attribute:"fill",values:this.auxColors}]}}),"markers"==c&&(this.filteredMarkers=this.jsonMarkers,this.addMarkersToMap(this.filteredMarkers))};var Country=function(e){var t=e.attributes,o=this;$.each(Object.keys(t),function(e,r){o[r]=t[r]}),e.Regions&&(this.Regions=this.readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"};VectorialMap.prototype.generateColorsForTheCountries=function(e){e||(e=this.jsonCountries);var t=[];return $.each(e,function(e,o){t[o.name]=o.count}),t},VectorialMap.prototype.readCountriesFromJSON=function(e){var t=[];this.minCount=1/0,this.maxCount=-(1/0);var o=this;return $.each(e,function(e,r){t.push(new Country(r)),t[e].count>o.maxCount&&(o.maxCount=t[e].count),t[e].count<o.minCount&&(o.minCount=t[e].count)}),t},VectorialMap.prototype.findCountryByName=function(e){var t=null;return $.each(this.jsonCountries,function(o,r){return r.name==e?t=r:void 0}),t},VectorialMap.prototype.readMinMax=function(e){var t=this;t.minCount=1/0,t.maxCount=-(1/0),$.each(e,function(e,o){o.count>t.maxCount&&(t.maxCount=o.count),o.count<t.minCount&&(t.minCount=o.count)})};var FiltersBox=function(e,t,o){this.id=e,this.map=t,this.filterType=o};FiltersBox.prototype.resetFiltersBox=function(){for(var e=this,t=0;t<this.filters.length;t++){var o="#fbox"+t+"-"+e.map;$(o).text(""),$(o).val("")}var r=findMapById(this.map);r.filteredMarkers=r.jsonMarkers,r.reloadMap(r.jsonCountries),"markers"==r.datatype&&r.addMarkersToMap()},FiltersBox.prototype.createFiltersBoxWithEnumeration=function(){var e=this;$.each(this.filters,function(t,o){var r=o.name.toLowerCase();r=r.charAt(0).toUpperCase()+r.slice(1);var n="";n+="<p><b>"+r+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+t+"-"+e.map+'"',n+=o.continuous?'placeholder="'+o.min+"..."+o.max+'" +>':'placeholder="'+o.values.join()+'" +>',n+="</div>",$("#"+e.id).append(n)});var t='<button id="'+e.id+'_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="'+e.id+'_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button>';$("#"+e.id).append(t),$("#"+e.id+"_apply_filters").click(function(){e.restoreInputBoxes();for(var t={},o=e.filters.length,r=0,n=0;o>n;n++){var a="#fbox"+n+"-"+e.map,i=$(a).val();""!==i?t[e.filters[n].name]=i:r++}r!=o&&e.filter(t)}),$("#"+e.id+"_reset_filters").click(function(){e.restoreInputBoxes(),e.resetFiltersBox()})},FiltersBox.prototype.createFiltersBoxCheckboxes=function(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(this.filters,function(e,t){function o(e){return"<p>"+JSON.stringify(e)+"</p>"}function r(){var e=$("p.status").empty();e.append(o(widget.checked()))}var n="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];t.continuous||$.each(t.values,function(e,t){a.push({id:e+1,label:t,isChecked:!1})});var i=t.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(n).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(n).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",r()),r()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var e={},t=jsonFiltersArray.length,o=0,r=0;r<jsonFiltersArray.length;r++){for(var n="#box"+(r+1),a=getSelectedItems(n),i=[],s=Object.keys(a),c=0;c<s.length;c++)i.push(a[s[c]].label);s.length>0?e[jsonFiltersArray[r].name]=i.join():o++}o!=t&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})},FiltersBox.prototype.getAllFilterValues=function(e){var t=this,o=[];if(-1!=String(e).indexOf(",")){console.log("enumeration");var r=String(e).split(",");$.each(r,function(e,r){if(-1!=r.indexOf("-")){console.log("range inside enumeration");var n=String(r).split("-");checkFilterValuesAreValid(filterObject,n);for(var a=n[0],i=n[1];i>=a;a++)o.push(a)}else{console.log("no range inside enumeration");var s=t.checkFilterValuesAreValid(filterObject,[r]);s&&o.push(r)}})}else if(console.log("single"),-1!=e.indexOf("-")){console.log("range");var n=String(e).split("-");console.log(n);var a=t.checkFilterValuesAreValid(filterObject,n);console.log(a);for(var i=n[0],s=n[1];s>=i;i++)o.push(i)}else{console.log("single value");var a=t.checkFilterValuesAreValid(filterObject,[e]);a&&o.push(e)}return o},FiltersBox.prototype.checkWhatCountriesToAdd=function(e,t,o){var r=[];return $.each(o.jsonCountries,function(o,n){$.each(Object.keys(n),function(o,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==t&&r.push(n)})}),r},FiltersBox.prototype.checkWhatMarkersToAdd=function(e,t,o){var r=[];return $.each(o.jsonMarkers,function(o,n){$.each(Object.keys(n),function(o,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==t&&r.push(n)})}),r},FiltersBox.prototype.checkWhatCountriesMarkersToAdd=function(e,t,o){var r=[],n=[];return"countries"==o.datatype?r=this.checkWhatCountriesToAdd(e,t,o):n=this.checkWhatMarkersToAdd(e,t,o),[r,n]},FiltersBox.prototype.checkFilterNameIsValid=function(e){var t=!1;return $.each(this.filters,function(o,r){return r.name.toLowerCase()===e.toLowerCase()?(filterObject=r,void(t=!0)):void 0}),t},FiltersBox.prototype.restoreInputBoxes=function(){for(var e=this,t=0;t<this.filters.length;t++)$("#fbox"+t+"-"+e.map).parent().removeClass("has-error")},FiltersBox.prototype.checkFilterValuesAreValid=function(e,t){var o=this,r=!0;if(1==e.continuous){var n=e.min,a=e.max;$.each(t,function(t,i){return n>+i||+i>a?(r=!1,void o.highlightInputBoxError(e,i)):void 0})}else $.each(t,function(t,n){r=!1,$.each(e.values,function(e,t){return t==n?void(r=!0):void 0}),r||o.highlightInputBoxError(e,n)});return r},FiltersBox.prototype.highlightInputBoxError=function(e,t){var o=this;console.log("Invalid value for the filter: "+t);var r=e.name;$.each(o.filters,function(e,t){r==t.name&&$("#fbox"+e+"-"+o.map).parent().addClass("has-error")})},FiltersBox.prototype.readFiltersFromJSON=function(e){var t=[];$.each(e,function(e,o){t.push(new Filter(o))}),this.filters=t};var Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,t,o){var t="../mappingJSON/mappingCountriesSample.json",o="../mappingJSON/mappingMarkersSample.json";return t?o?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,t),jsonMapMarkers(e,o)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var t=JSON.stringify(e),o="http://serverFiltering.com/?data="+encodeURIComponent(t);o="../json/countries_plus_markers2.json",$.getJSON(o,function(e){jsonCountries=readCountriesFromJSON(e.countries);var t=generateColorsForTheCountries(jsonCountries);reloadMap(t),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})},VectorialMap.prototype.reloadMap=function(e){var t=this;t.jsonCountries.length>0?(t.readMinMax(e),colors=t.generateColorsForTheCountries(e)):colors=[],$("#"+t.mDiv).empty(),t.map=new jvm.Map({map:t.mType,backgroundColor:t.background,container:$("#"+t.mDiv),onRegionClick:function(e,o){countryCode=o.toLowerCase();var r=countryCode+"_mill_en";t.switchMap(r)},onMarkerTipShow:function(e,o,r){var n=buildMarkerTooltip(t.jsonMarkers,r);o.html(n)},onRegionTipShow:function(e,o,r){var n=-1;if($.each(t.jsonCountries,function(e,t){return t.name===r?void(n=t):void 0}),-1!=n){var a=buildCountryTooltip(o,n);o.html(a)}else o.html(o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[t.minColorMap,t.maxColorMap],attribute:"fill",values:colors}]}}),t.thereAreMarkers&&t.addMarkersToMap()},VectorialMap.prototype.removeTooltip=function(){$(".jvectormap-tip").remove()},VectorialMap.prototype.switchMap=function(e){$("#"+this.mDiv).empty(),this.removeTooltip();var t="countries"==dataType?this.generateColorsForTheCountries(this.jsonCountries):[],o=this;this.map=new jvm.Map({map:e,backgroundColor:o.background,container:$("#"+o.mDiv),onMarkerTipShow:function(e,t,r){var n=buildMarkerTooltip(o.jsonMarkers,r);t.html(n)},onRegionTipShow:function(t,r,n){var a=e.split("_")[0].toUpperCase(),i=-1;$.each(o.jsonCountries,function(e,t){return t.country==a?void(i=t):void 0});var s,c=!1;$.each(o.map.regions,function(e,t){return t.name==n?(s=t,void(c=!0)):void 0}),r.html(c?buildRegionTooltip(s):r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[o.minColorMap,o.maxColorMap],attribute:"fill",values:t}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+this.mDiv).empty(),o.removeTooltip(),o.reloadMap(o.auxColors)}),this.thereAreMarkers&&this.addMarkersToMap(this.filteredMarkers)};var Marker=function(e){var t=e.attributes,o=this;$.each(Object.keys(t),function(e,r){o[r]=t[r]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"};VectorialMap.prototype.addMarkersToMap=function(){var e=[];$.each(this.filteredMarkers,function(t,o){var r={latLng:[o.latitude,o.longitude],name:o.desc,style:{r:mapRange(o.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+o.icon+".png"}};e.push(r)}),this.map.addMarkers(e)},FiltersBox.prototype.filter=function(e){var t=this,o=Object.keys(e),r=o.length,n=new Array,a=new Array;for(u=0;r>u;u++)n[u]=new Array;var i=!1;if($.each(o,function(e,o){return"all"==o.toLowerCase()?(i=!0,t.resetFilters(),void t.resetFiltersBox()):void 0}),!i){var s=findMapById(this.map);if($.each(o,function(o,r){if(!t.checkFilterNameIsValid(r))return void console.log("Invalid filter name!("+r+")");var i=e[r],c=t.getAllFilterValues(i);0!=c.length&&(a[o]=new Array,$.each(c,function(e,r){var i=t.checkWhatCountriesMarkersToAdd(filterObject,r,s),c=i[0],u=i[1];$.each(Object.keys(c),function(e,t){var r=c[t];n[o][t]=r}),$.each(u,function(e,t){a[o].push(t)})}))}),"countries"==s.datatype){var c=[];if(n.length>0){c=n[0];for(var u=0;u<n.length-1;u++)c=getCountriesIntersection(c,n[u+1])}s.reloadMap(c)}else if(0!=a.length){if(filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var u=0;u<a.length-1;u++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[u+1])}s.filteredMarkers=filteredMarkers,s.reloadMap()}}};var Region=function(e,t){this.region=e.name,this.country=t,this.desc="just a region..."};VectorialMap.prototype.readRegionsFromJSON=function(e,t){var o=[];return $.each(e,function(e,r){o.push(new Region(r,t))}),e},VectorialMap.prototype.generateColorsForTheRegions=function(e){var t=e.split("_")[0].toUpperCase(),o=[];return $.each(jsonCountries,function(e,r){if(r.country==t&&r.Regions){var n=r.Regions;$.each(n,function(e,t){o[t.name]=100})}}),o},VectorialMap.prototype.addRegionsToMap=function(e){var t=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,o){function r(){var e,t={};t[maps.region];for(e in maps.regions)t[e]=n[Math.floor(Math.random()*n.length)];return t}if(o.country==t&&o.Regions){var n=(o.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(r()),maps.series.regions[0].setValues(r())}})};
//# sourceMappingURL=data:application/json;base64,