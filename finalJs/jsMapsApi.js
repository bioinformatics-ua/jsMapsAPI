function mapRange(e,r,o,n,t){return n+(t-n)*(e-r)/(o-r)}function buildCountryTooltip(e,r){var o=countryTooltip;return $.each(Object.keys(r),function(e,n){o=o.replace(n,r[n])}),o}function generateColorsForTheCountries(e){e||(e=jsonCountries);var r=[];return $.each(e,function(e,o){r[o.name]=o.count}),r}function readCountriesFromJSON(e){{var r=[];e.length}return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r[e]=new Country(o),console.log(r[e]),r[e].Count>maxCount&&(maxCount=r[e].Count),r[e].Count<minCount&&(minCount=r[e].Count)}),r}function findCountryByName(e){var r=null;return $.each(jsonCountries,function(o,n){return n.country==e?r=n:void 0}),r}function readMinMax(e){minCount=1/0,maxCount=-(1/0);var r=[];for(var o in e)e.hasOwnProperty(o)&&r.push(o);$.each(r,function(e,r){var o=findCountryByName(r);o.Count>maxCount&&(maxCount=o.Count),o.Count<minCount&&(minCount=o.Count)})}function createFiltersBoxCheckboxes(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(jsonFiltersArray,function(e,r){function o(e){return"<p>"+JSON.stringify(e)+"</p>"}function n(){var e=$("p.status").empty();e.append(o(widget.checked()))}var t="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];$.each(r.Values,function(e,r){a.push({id:e+1,label:r,isChecked:!1})});var i=r.Name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(t).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(t).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",n()),n()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){for(var e={},r=jsonFiltersArray.length,o=0,n=0;n<jsonFiltersArray.length;n++){for(var t="#box"+(n+1),a=getSelectedItems(t),i=[],s=Object.keys(a),l=0;l<s.length;l++)i.push(a[s[l]].label);s.length>0?e[jsonFiltersArray[n].Name]=i.join():o++}o!=r&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function createFiltersBoxWithEnumeration(e){e.length;$.each(e,function(e,r){var o=r.Name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var n="";n+="<p><b>"+o+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+e+'"';var t=r.Values;n+='placeholder="'+t+'" +>',n+="</div>",$("filter-box").append(n),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})});var r='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(r),$("#filter_box_apply_filters").click(function(){for(var r={},o=e.length,n=0,t=0;t<e.length;t++){var a="#fbox"+t,i=$(a).val();""!==i?r[e[t].Name]=i:n++}n!=o&&filter(r)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getAllFilterValues(e){var r=[];if(-1!=String(e).indexOf(",")){var o=String(e).split(",");$.each(o,function(e,o){if(-1!=o.indexOf("-")){var n=String(o).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(o)})}else if(-1!=e.indexOf("-")){var n=String(e).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(e);return r}function checkWhatCountriesToAdd(e,r){var o=[];return $.each(jsonCountries,function(e,n){for(var t=0;;){t++;var a="name"+t,i="value"+t;if(!n[a])break;n[i]==r&&(countryValueToCheck=i,n[i]==r&&(o[n.country]=n.Count))}}),o}function checkWhatMarkersToAdd(e,r){var o=[];return $.each(jsonMarkers,function(n,t){$.each(Object.keys(t),function(n,a){a.toLowerCase()==e.Name.toLowerCase()&&t[a]==r&&o.push(t)})}),o}function checkWhatCountriesMarkersToAdd(e,r){var o=[],n=[];return o=checkWhatCountriesToAdd(e,r),n=checkWhatMarkersToAdd(e,r),[o,n]}function checkFilterNameIsValid(e){var r=!1;return $.each(jsonFiltersArray,function(o,n){return n.Name.toLowerCase()===e.toLowerCase()?(filterObject=n,void(r=!0)):void 0}),r}function checkFilterValuesAreValid(e,r){var o=!1;return $.each(r,function(e,r){return $.each(filterObject.Values,function(e,n){return n==r?void(o=!0):void 0}),o?void 0:void console.log("Invalid value for the filter: "+r)}),o}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function filterFromMenuSelected(e,r){currentFilter=e;var o=checkWhatCountriesToAdd(e,r);if(reloadMap(o),$.each(jsonMarkers,function(o,n){for(var t=0;;){t++;var a="Name"+t,i="Value"+t;if(!n[a])break;n[a]===e.Name&&n[i]===r&&map.addMarker(o,{latLng:[n.Latitude,n.Longitude],name:n.desc,style:{fill:"green",r:mapRange(n.Count,minCount,maxCount,minRadius,maxRadius)}})}}),isNaN(e.Values[0]))$("#slider").hide(),$("#minSlider").hide(),$("#maxSlider").hide();else{$("#slider").show(),$("#minSlider").show(),$("#maxSlider").show();var n=$("#slider").slider(),t=e.Values[0],a=e.Values[e.Values.length-1];n.slider("option","min",t),n.slider("option","max",a),$("#minSlider").text(t),$("#maxSlider").text(a)}}function sliderChanged(){var e=slider.slider("option","values"),r=e[0],o=e[1],n=currentFilter.Name;$("#minSlider").text(r),$("#maxSlider").text(o);var t=[];$.each(jsonCountries,function(e,n){var a=+n[countryValueToCheck];a>=r&&o>=a&&(t[n.country]=n.Count)}),reloadMap(t);for(var a,i=jsonCountries[0],s=0;;){s++;var l="Name"+s,u="Value"+s;if(i[l]===n){a=u;break}}$.each(jsonMarkers,function(e,n){n[a]>=r&&n[a]<=o&&map.addMarker(e,{latLng:[n.Latitude,n.Longitude],name:n.desc,style:{fill:"green",r:mapRange(n.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readFiltersFromJSON(e){for(var r=[],o=0;o<e.values.length;o++){currentFilter=e.values[o];for(var n=currentFilter.name,t=[],a=0;a<currentFilter.values.length;a++)t.push(currentFilter.values[a]);r[o]=new Filter(n,t)}return numFilters=r.length,r}function jsonMapCountries(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.country],a=0;o[e]=new Country("",t,a)}),mappingCountries=o,console.log(mappingCountries)})}function jsonMapMarkers(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.country],a=0,i=n[r.Latitude],s=n[r.Longitude];o[e]=new Marker("",t,a,i,s)}),mappingMarkers=o,console.log(mappingMarkers)})}function reloadMap(e){if(map.params.map==mType){jsonCountries.length>0&&readMinMax(e);var r={vertical:!0},o={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:r},n={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]};finalMarkersInMap=o,"markers"==dataType&&(finalMarkersInMap=n),$("#"+mDiv).empty(),map=new jvm.Map({map:mType,backgroundColor:background,container:$("#"+mDiv),onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:e}]}})}else jsonCountries.length>0&&readMinMax(e),$("#"+mDiv).empty(),removeTooltip(),switchMap(mapType)}function removeTooltip(){$(".jvectormap-tip").remove()}function switchMap(e){$("#"+mDiv).empty(),removeTooltip();var r=generateColorsForTheRegions(e);map=new jvm.Map({map:e,backgroundColor:background,container:$("#"+mDiv),onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(r,o,n){var t=e.split("_")[0].toUpperCase(),a=-1;$.each(jsonCountries,function(e,r){return r.country==t?void(a=r):void 0});var i,s=!1;$.each(map.regions,function(e,r){return r.name==n?(i=r,void(s=!0)):void 0}),o.html(s?buildRegionTooltip(i):o.html())},series:{markers:[{scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:{vertical:!0}}],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:r}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+mDiv).empty(),removeTooltip(),map=new jvm.Map({container:$("#"+mDiv),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[{scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:{vertical:!0}}],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),thereAreMarkers&&addMarkersToMap()}),thereAreMarkers&&addMarkersToMap(),jsonCountries}function readMarkersFromJSON(e){var r=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r[e]=new Marker(o);var n=r[e].Count;n>maxCount&&(maxCount=n),n<minCount&&(minCount=n)}),r}function addMarkersToMap(){var e=[];$.each(filteredMarkers,function(r,o){var n={latLng:[o.Latitude,o.Longitude],name:o.desc,style:{fill:"red",r:mapRange(o.Count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+o.icon+".png"}};e.push(n)}),map.addMarkers(e)}function buildMarkerTooltip(e,r){var o=markerTooltip;return o=o.replace("description",e[r].desc),o=o.replace("latitude",e[r].Latitude),o=o.replace("longitude",e[r].Longitude)}function filter(e){var r=Object.keys(e),o=r.length,n=0,t=new Array,a=new Array;for(l=0;o>l;l++)t[l]=new Array,a[l]=new Array;var i=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(r,function(r,o){if(!checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var i=e[o],s=getAllFilterValues(i);n++,$.each(s,function(e,o){var n=checkWhatCountriesMarkersToAdd(filterObject,o),i=n[0],s=n[1];$.each(Object.keys(i),function(e,o){var n=i[o];t[r][o]=n}),$.each(s,function(e,o){a[r].push(o)})})});var s=[];if(t.length>0){s=t[0];for(var l=0;l<t.length-1;l++)s=getCountriesIntersection(s,t[l+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var l=0;l<a.length-1;l++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[l+1])}addMarkersToMap()}}function getMarkersIntersection(e,r){var o=[];return $.each(e,function(e,n){var t=n.country;$.each(r,function(e,r){var a=r.country;t==a&&o.push(n)})}),o}function getCountriesIntersection(e,r){var o=[];return $.each(Object.keys(e),function(n,t){$.each(Object.keys(r),function(r,n){t==n&&(o[t]=e[t])})}),o}function applyMultipleFiltersProgramattically(e){var r=Object.keys(e),o=r.length,n=[],t=[];$.each(r,function(r,o){e[o]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(o,t){n[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!t[s])break;t[s].toLowerCase()==a.toLowerCase()&&t[l]==e[a]&&n[o]++}})}),$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[l]==e[a]&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,r){var o=e.filter(function(e){return void 0!==e}).length,n=[],t=[];$.each(jsonCountries,function(o,t){n[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(void 0==t[s])break;t[s]===r[e].Name&&t[l]==a&&n[o]++}})});var a=[];$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!n[s])break;n[s].toLowerCase()==r[e].Name.toLowerCase()&&n[l]==a&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,r){var o=[];return $.each(e,function(e,n){o[e]=new Region(n,r)}),e}function generateColorsForTheRegions(e){var r=e.split("_")[0].toUpperCase(),o=[];return $.each(jsonCountries,function(e,n){if(n.country==r&&n.Regions){var t=n.Regions;$.each(t,function(e,r){o[r.name]=100})}}),o}function buildRegionTooltip(e){var r=regionTooltip;return r=r.replace("name",e.name)}function addRegionsToMap(e){var r=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,o){function n(){var e,r={};r[maps.region];for(e in maps.regions)r[e]=t[Math.floor(Math.random()*t.length)];return r}if(o.country==r&&o.Regions){var t=(o.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(n()),maps.series.regions[0].setValues(n())}})}var vectorMap,jsonFilters=[],minColorMap,maxColorMap,mDiv,mType,background,filteredMarkers,thereAreMarkers=!1,VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,r,o,n,t,a,i,s,l){if(background=s,mType=i,jsonCountries=[],jsonMarkers=[],mDiv=n,minColorMap=t,maxColorMap=a,"countries"==l)jsonCountries=readCountriesFromJSON(e);else{if("markers"!=l)return void console.error("You must give as input a list of markers or countries!");thereAreMarkers=!0,jsonMarkers=readMarkersFromJSON(e),filteredMarkers=jsonMarkers,numMarkers=jsonMarkers.length}auxColors=generateColorsForTheCountries(),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});var u={vertical:!0},c={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:u},d={attribute:"image",scale:[minColorMap,maxColorMap],values:[minCount,maxCount]};finalMarkersInMap=c,"markers"==l&&(finalMarkersInMap=d),map=new jvm.Map({container:$("#"+n),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.name===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),"markers"==l&&(filteredMarkers=jsonMarkers,addMarkersToMap())},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var r=JSON.stringify(e),o="http://serverFiltering.com/?data="+encodeURIComponent(r);o="../json/countries_plus_markers2.json",$.getJSON(o,function(e){jsonCountries=readCountriesFromJSON(e.countries);var r=generateColorsForTheCountries(jsonCountries);reloadMap(r),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})};var Country=function(e,r,o){if(""==e)this.country=r,this.Count=+o,this.Var=0,this.desc="abc";else{var n=e.attributes,t=this;$.each(Object.keys(n),function(e,r){t[r]=n[r]}),e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"}},resetFiltersBox=function(){for(var e=0;numFilters>e;e++)$("#fbox"+e).text(""),$("#fbox"+e).val("");var r=generateColorsForTheCountries();reloadMap(r),filteredMarkers=jsonMarkers,addMarkersToMap()},Filter=function(e,r){this.Name=e,this.Values=r},numFilters,currentFilter,countryValueToCheck;VectorialMap.prototype.createSlider=function(){slider=$("#slider").slider(),slider.slider("option","min",minRadius),slider.slider("option","max",maxRadius),slider.slider("option","range",!0),slider.slider("option","animate","slow"),slider.on("slidechange",function(e,r){sliderChanged()}),$("#slider").hide(),$("#minSlider").hide(),$("#maxSlider").hide()};var mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,r,o){var r="../mappingJSON/mappingCountriesSample.json",o="../mappingJSON/mappingMarkersSample.json";return r?o?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,r),jsonMapMarkers(e,o)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")};var Marker=function(e,r,o,n,t){if(""==e)this.country=r,this.Count=+o,this.Var="",this.Latitude=n,this.Longitude=t,this.desc="abc";else{var a=e.attributes,i=this;$.each(Object.keys(a),function(e,r){i[r]=a[r]}),this.country=e.country,this.Count=+e.count,this.Latitude=e.latitude,this.Longitude=e.longitude,this.icon=e.icon,this.desc="abc"}},Region=function(e,r){this.Region=e.name,this.country=r,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJjb3VudHJpZXMuanMiLCJjcmVhdGVGaWx0ZXJzLmpzIiwiZmlsdGVycy1hdXhpbGlhcnkuanMiLCJmaWx0ZXJzLmpzIiwianNvbi1tYXBwaW5nLmpzIiwibWFwcy1hdXhpbGlhcnkuanMiLCJtYXJrZXJzLmpzIiwibXVsdGlwbGUtZmlsdGVycy5qcyIsInJlZ2lvbnMuanMiXSwibmFtZXMiOlsibWFwUmFuZ2UiLCJ2YWx1ZSIsImxvdzEiLCJoaWdoMSIsImxvdzIiLCJoaWdoMiIsImJ1aWxkQ291bnRyeVRvb2x0aXAiLCJjb3VudHJ5TmFtZSIsImNvdW50cnkiLCJmaW5hbFRvb2x0aXAiLCJjb3VudHJ5VG9vbHRpcCIsIiQiLCJlYWNoIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4IiwiYXR0ciIsInJlcGxhY2UiLCJnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyIsImNvdW50cmllcyIsImpzb25Db3VudHJpZXMiLCJjb3VudHJ5Q29sb3JzIiwiY3VycmVudENvdW50cnkiLCJuYW1lIiwiY291bnQiLCJyZWFkQ291bnRyaWVzRnJvbUpTT04iLCJtYXJrZXJzIiwibGVuZ3RoIiwibWluQ291bnQiLCJJbmZpbml0eSIsIm1heENvdW50IiwiQ291bnRyeSIsImNvbnNvbGUiLCJsb2ciLCJDb3VudCIsImZpbmRDb3VudHJ5QnlOYW1lIiwicmV0dXJuQ291bnRyeSIsInJlYWRNaW5NYXgiLCJjb3VudHJpZXNOYW1lcyIsImtleSIsImhhc093blByb3BlcnR5IiwicHVzaCIsImN1cnJlbnRDb3VudHJ5TmFtZSIsImNyZWF0ZUZpbHRlcnNCb3hDaGVja2JveGVzIiwiYXBwZW5kIiwianNvbkZpbHRlcnNBcnJheSIsImN1cnJlbnRGaWx0ZXIiLCJwIiwid2F0IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZVN0YXR1cyIsIiRwIiwiZW1wdHkiLCJ3aWRnZXQiLCJjaGVja2VkIiwiYm94SUQiLCJ0YWIiLCJWYWx1ZXMiLCJjdXJyZW50VmFsdWUiLCJpZCIsImxhYmVsIiwiaXNDaGVja2VkIiwiTmFtZSIsInRvTG93ZXJDYXNlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImRyb3Bkb3duQ2hlY2tib3giLCJkYXRhIiwiYXV0b3NlYXJjaCIsImhpZGVIZWFkZXIiLCJzaG93TmJTZWxlY3RlZCIsInRlbXBsYXRlQnV0dG9uIiwib24iLCJ0ZXh0VG9BcHBlbmQiLCJjbGljayIsImpzb25PYmplY3QiLCJudW1GaWx0ZXJzIiwiZW1wdHlGaWx0ZXJzIiwiaSIsInNlbGVjdGVkSXRlbXMiLCJnZXRTZWxlY3RlZEl0ZW1zIiwiaXRlbXNBcnJheSIsImoiLCJqb2luIiwiZmlsdGVyIiwicmVzZXRGaWx0ZXJzQm94IiwiY3JlYXRlRmlsdGVyc0JveFdpdGhFbnVtZXJhdGlvbiIsImpzb25GaWx0ZXJzIiwiZmlsdGVyTmFtZSIsInRvQXBwZW5kIiwicGxhY2Vob2xkZXIiLCJ0b29sdGlwIiwidGl0bGUiLCJwbGFjZW1lbnQiLCJjdXJyZW50RmlsdGVyVmFsdWUiLCJ2YWwiLCJnZXRBbGxGaWx0ZXJWYWx1ZXMiLCJmaWx0ZXJWYWx1ZSIsInJldHVyblBhcnRzIiwiU3RyaW5nIiwiaW5kZXhPZiIsImVudW1lcmF0aW9uUGFydHMiLCJzcGxpdCIsImN1cnJlbnRFbnVtZXJhdGlvbiIsInJhbmdlUGFydHMiLCJjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkIiwiZmlsdGVyT2JqZWN0IiwibWluIiwibWF4Iiwic3ViUGFydHMiLCJjaGVja1doYXRDb3VudHJpZXNUb0FkZCIsInNlbGVjdGVkRmlsdGVyIiwiY3VycmVudE5hbWVUb0NoZWNrIiwiY291bnRyeVZhbHVlVG9DaGVjayIsImNoZWNrV2hhdE1hcmtlcnNUb0FkZCIsImpzb25NYXJrZXJzIiwiY3VycmVudE1hcmtlciIsImNoZWNrV2hhdENvdW50cmllc01hcmtlcnNUb0FkZCIsImNvdW50cmllc1RvQWRkIiwibWFya2Vyc1RvQWRkIiwiY2hlY2tGaWx0ZXJOYW1lSXNWYWxpZCIsInZhbGlkIiwiZmlsdGVyVmFsdWVzIiwicGFydCIsInJlc2V0RmlsdGVycyIsImNvbG9ycyIsInJlbG9hZE1hcCIsIm1hcCIsImFkZE1hcmtlciIsImxhdExuZyIsIkxhdGl0dWRlIiwiTG9uZ2l0dWRlIiwiZGVzYyIsInN0eWxlIiwiZmlsbCIsInIiLCJtaW5SYWRpdXMiLCJtYXhSYWRpdXMiLCJmaWx0ZXJGcm9tTWVudVNlbGVjdGVkIiwiaXNOYU4iLCJoaWRlIiwic2hvdyIsInNsaWRlciIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJ0ZXh0Iiwic2xpZGVyQ2hhbmdlZCIsImN1cnJlbnRSYW5nZSIsImN1cnJlbnRGaWx0ZXJOYW1lIiwiZmlsdGVyVmFsdWVGb3JDb3VudHJ5Iiwic2VsZWN0ZWROYW1lIiwicmVhZEZpbHRlcnNGcm9tSlNPTiIsImlucHV0RmlsdGVycyIsImZpbHRlcnMiLCJ2YWx1ZXMiLCJGaWx0ZXIiLCJqc29uTWFwQ291bnRyaWVzIiwianNvbiIsImNvdW50cmllc01hcHBpbmdKc29uIiwiZ2V0SlNPTiIsImpzb25NYXBwaW5nIiwiY3VycmVudEpTT04iLCJtYXBwaW5nQ291bnRyaWVzIiwianNvbk1hcE1hcmtlcnMiLCJtYXJrZXJzTWFwcGluZ0pzb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIk1hcmtlciIsIm1hcHBpbmdNYXJrZXJzIiwicGFyYW1zIiwibVR5cGUiLCJsZWdlbmRWYXIiLCJ2ZXJ0aWNhbCIsIm1hcmtlcnNXaXRoTGVnZW5kIiwic2NhbGUiLCJtaW5Db2xvck1hcCIsIm1heENvbG9yTWFwIiwibGVnZW5kIiwibWFya2Vyc1dpdGhvdXRMZWdlbmQiLCJmaW5hbE1hcmtlcnNJbk1hcCIsImRhdGFUeXBlIiwibURpdiIsImp2bSIsIk1hcCIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmQiLCJjb250YWluZXIiLCJvblJlZ2lvbkNsaWNrIiwiZSIsImNvZGUiLCJjb3VudHJ5Q29kZSIsIm5ld01hcCIsInN3aXRjaE1hcCIsIm9uTWFya2VyVGlwU2hvdyIsImJ1aWxkTWFya2VyVG9vbHRpcCIsImh0bWwiLCJvblJlZ2lvblRpcFNob3ciLCJzZWxlY3RlZENvdW50cnkiLCJzZXJpZXMiLCJyZWdpb25zIiwiYXR0cmlidXRlIiwicmVtb3ZlVG9vbHRpcCIsIm1hcFR5cGUiLCJyZW1vdmUiLCJyZWdpb25Db2xvcnMiLCJnZW5lcmF0ZUNvbG9yc0ZvclRoZVJlZ2lvbnMiLCJyZWdpb25OYW1lIiwiY3VycmVudE1hcCIsInNlbGVjdGVkUmVnaW9uIiwicmVnaW9uRm91bmQiLCJjdXJyZW50UmVnaW9uIiwiYnVpbGRSZWdpb25Ub29sdGlwIiwiYXV4Q29sb3JzIiwidGhlcmVBcmVNYXJrZXJzIiwiYWRkTWFya2Vyc1RvTWFwIiwicmVhZE1hcmtlcnNGcm9tSlNPTiIsImN1cnJlbnRKU09OTWFya2VyIiwiY3VycmVudENvdW50VmFsdWUiLCJtYXJrZXJzSlNPTkFycmF5IiwiZmlsdGVyZWRNYXJrZXJzIiwiY3VycmVudE1hcmtlckpTT04iLCJpbWFnZSIsImljb24iLCJhZGRNYXJrZXJzIiwibWFya2VyVG9vbHRpcCIsImlucHV0QXJncyIsIm51bWJlcktleXMiLCJ2YWxpZEZpbHRlcnMiLCJjb3VudHJpZXNCeUZpbHRlciIsIkFycmF5IiwibWFya2Vyc0J5RmlsdGVyIiwiZXhpdCIsImZpbmFsUGFydHMiLCJjaGVja1JldHVybiIsImNvdW50cmllc0F1eCIsIm1hcmtlcnNBdXgiLCJjdXJyZW50S2V5Iiwia2V5VmFsdWUiLCJmaW5hbENvdW50cmllcyIsImdldENvdW50cmllc0ludGVyc2VjdGlvbiIsImdldE1hcmtlcnNJbnRlcnNlY3Rpb24iLCJtYXJrZXJzR3JvdXAxIiwibWFya2Vyc0dyb3VwMiIsIm1hcmtlcjEiLCJtYXJrZXIxQ291bnRyeSIsIm1hcmtlcjIiLCJtYXJrZXIyQ291bnRyeSIsImNvdW50cmllc0dyb3VwMSIsImNvdW50cmllc0dyb3VwMiIsImNvdW50cnlOYW1lMSIsImNvdW50cnlOYW1lMiIsImFwcGx5TXVsdGlwbGVGaWx0ZXJzUHJvZ3JhbWF0dGljYWxseSIsImZpbHRlcnNUb0FwcGx5IiwibnVtRmlsdGVyc1RvQXBwbHkiLCJjb3VudHJpZXNIYXZlRmlsdGVyIiwibWFya2Vyc0hhdmVGaWx0ZXIiLCJyZW1vdmVBbGxNYXJrZXJzIiwiY291bnRyeUluZGV4IiwibWFya2VySW5kZXgiLCJhcHBseU11bHRpcGxlRmlsdGVycyIsInNlbGVjdGVkTXVsdGlwbGVGaWx0ZXJzIiwidW5kZWZpbmVkIiwicmVhZFJlZ2lvbnNGcm9tSlNPTiIsInJlZ2lvbnNBcnIiLCJSZWdpb24iLCJpc29Db2RlIiwiUmVnaW9ucyIsInJlZ2lvbiIsInJlZ2lvblRvb2x0aXAiLCJhZGRSZWdpb25zVG9NYXAiLCJnZW5lcmF0ZUNvbG9ycyIsIm1hcHMiLCJwYWxldHRlIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic2V0VmFsdWVzIiwidmVjdG9yTWFwIiwiVmVjdG9yaWFsTWFwIiwicHJvdG90eXBlIiwiY3JlYXRlTWFwIiwiaW5wdXRKU09OIiwibWFwRGl2IiwibWluQ29sb3IiLCJtYXhDb2xvciIsImVycm9yIiwibnVtTWFya2VycyIsImpRdWVyeSIsImFqYXgiLCJ1cmwiLCJzdWNjZXNzIiwicmVzdWx0IiwiYXN5bmMiLCJmaWx0ZXJPblNlcnZlciIsImZpbHRlcnNKU09OIiwiZmlsdGVyc1N0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvdW50cnlPYmplY3QiLCJ0aGlzIiwiVmFyIiwiYXR0cmlidXRlcyIsImNyZWF0ZVNsaWRlciIsImV2ZW50IiwidWkiLCJyZWdpc3RlclRyYW5zZm9ybWVyIiwianNvbkxvY2F0aW9uIiwibWFya2VyT2JqZWN0IiwibWFya2VyIiwicmVnaW9uT2JqZWN0Il0sIm1hcHBpbmdzIjoiQUF3SkEsUUFBQUEsVUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxNQUFBRCxJQUFBQyxFQUFBRCxJQUFBSCxFQUFBQyxJQUFBQyxFQUFBRCxHQzdIQSxRQUFBSSxxQkFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBQyxjQU1BLE9BSkFD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a1IsRUFBQTVSLE1BQ0FvUixLQUFBeEssU0FBQWdMLEVBQUE3SSxTQUNBcUksS0FBQXZLLFVBQUErSyxFQUFBNUksVUFDQW9JLEtBQUE1RSxLQUFBb0YsRUFBQXBGLEtBRUE0RSxLQUFBdEssS0FBQSxRRTFCQW9JLE9BQUEsU0FBQTRDLEVBQUE5UyxHQUVBb1MsS0FBQWxDLE9BQUE0QyxFQUFBL1IsS0FDQXFSLEtBQUFwUyxRQUFBQSxFQUVBb1MsS0FBQXRLLEtBQUEiLCJmaWxlIjoianNNYXBzQXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHZlY3Rvck1hcDtcbnZhciBqc29uRmlsdGVycyA9IFtdO1xudmFyIG1pbkNvbG9yTWFwO1xudmFyIG1heENvbG9yTWFwO1xudmFyIG1EaXY7XG52YXIgbVR5cGU7XG52YXIgYmFja2dyb3VuZDtcbnZhciBmaWx0ZXJlZE1hcmtlcnM7XG52YXIgdGhlcmVBcmVNYXJrZXJzID0gZmFsc2U7XG5cbnZhciBWZWN0b3JpYWxNYXAgPSBmdW5jdGlvbigpIHt9O1xuXG4vLyBWZWN0b3JpYWxNYXAgUHJvdG90eXBlXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLmNyZWF0ZU1hcCA9IGZ1bmN0aW9uKGlucHV0SlNPTiwgbWluUmFkaXVzLCBtYXhSYWRpdXMsIG1hcERpdiwgbWluQ29sb3IsIG1heENvbG9yLCBtYXBUeXBlLCBiYWNrZ3JvdW5kQ29sb3IsIGRhdGFUeXBlKSB7XG4gICAgYmFja2dyb3VuZCA9IGJhY2tncm91bmRDb2xvcjtcbiAgICBtVHlwZSA9IG1hcFR5cGU7XG4gICAgLy8gY291bnRyaWVzIGxpc3RcbiAgICBqc29uQ291bnRyaWVzID0gW107XG4gICAgLy8gbWFya2VycyBsaXN0XG4gICAganNvbk1hcmtlcnMgPSBbXTtcbiAgICAvLyBpZCBvZiB0aGUgbWFwXG4gICAgbURpdiA9IG1hcERpdjtcbiAgICAvLyBhc3NpZ24gdGhlIGNvbG9ycyBmb3IgdGhlIHJhbmdlXG4gICAgbWluQ29sb3JNYXAgPSBtaW5Db2xvcjtcbiAgICBtYXhDb2xvck1hcCA9IG1heENvbG9yO1xuXG4gICAgaWYgKGRhdGFUeXBlID09ICdjb3VudHJpZXMnKSB7XG4gICAgICAgIGpzb25Db3VudHJpZXMgPSByZWFkQ291bnRyaWVzRnJvbUpTT04oaW5wdXRKU09OKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09ICdtYXJrZXJzJykge1xuICAgICAgICB0aGVyZUFyZU1hcmtlcnMgPSB0cnVlO1xuICAgICAgICBqc29uTWFya2VycyA9IHJlYWRNYXJrZXJzRnJvbUpTT04oaW5wdXRKU09OKTtcbiAgICAgICAgZmlsdGVyZWRNYXJrZXJzID0ganNvbk1hcmtlcnM7XG4gICAgICAgIG51bU1hcmtlcnMgPSBqc29uTWFya2Vycy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignWW91IG11c3QgZ2l2ZSBhcyBpbnB1dCBhIGxpc3Qgb2YgbWFya2VycyBvciBjb3VudHJpZXMhJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBnZXQgdGhlIENvdW50IHZhbHVlIGZvciBlYWNoIENvdW50cnlcbiAgICBhdXhDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpO1xuXG4gICAgLy8gZ2V0IHRoZSB0b29sdGlwIHRlbXBsYXRlc1xuICAgIC8vIENPVU5UUlkgdG9vbHRpcFxuICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgdXJsOiAnLi4vdG9vbHRpcC10ZW1wbGF0ZXMvY291bnRyeV90b29sdGlwLmh0bWwnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGNvdW50cnlUb29sdGlwID0gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYzogZmFsc2VcbiAgICB9KTtcblxuICAgIC8vIE1BUktFUiB0b29sdGlwXG4gICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICB1cmw6ICcuLi90b29sdGlwLXRlbXBsYXRlcy9tYXJrZXJfdG9vbHRpcC5odG1sJyxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBtYXJrZXJUb29sdGlwID0gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYzogZmFsc2VcbiAgICB9KTtcblxuICAgIC8vIFJFR0lPTiB0b29sdGlwXG4gICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICB1cmw6ICcuLi90b29sdGlwLXRlbXBsYXRlcy9yZWdpb25fdG9vbHRpcC5odG1sJyxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICByZWdpb25Ub29sdGlwID0gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYzogZmFsc2VcbiAgICB9KTtcblxuICAgIHZhciBsZWdlbmRWYXIgPSB7XG4gICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAvL3RpdGxlOiAnQ291bnRyaWVzJyxcbiAgICB9O1xuXG4gICAgdmFyIG1hcmtlcnNXaXRoTGVnZW5kID0ge1xuICAgICAgICBzY2FsZTogW21pbkNvbG9yTWFwLCBtYXhDb2xvck1hcF0sXG4gICAgICAgIC8vIHJhbmdlIG9mIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIENvdW50XG4gICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF0sXG4gICAgICAgIC8vIGFkZCBhIGxlZ2VuZFxuICAgICAgICBsZWdlbmQ6IGxlZ2VuZFZhclxuICAgIH07XG5cbiAgICB2YXIgbWFya2Vyc1dpdGhvdXRMZWdlbmQgPSB7XG4gICAgICAgIGF0dHJpYnV0ZTogJ2ltYWdlJyxcbiAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAvLyByYW5nZSBvZiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBDb3VudFxuICAgICAgICB2YWx1ZXM6IFttaW5Db3VudCwgbWF4Q291bnRdXG4gICAgfTtcblxuICAgIGZpbmFsTWFya2Vyc0luTWFwID0gbWFya2Vyc1dpdGhMZWdlbmQ7XG4gICAgaWYgKGRhdGFUeXBlID09ICdtYXJrZXJzJykge1xuICAgICAgICBmaW5hbE1hcmtlcnNJbk1hcCA9IG1hcmtlcnNXaXRob3V0TGVnZW5kO1xuICAgIH1cblxuXG4gICAgbWFwID0gbmV3IGp2bS5NYXAoe1xuICAgICAgICBjb250YWluZXI6ICQoJyMnICsgbWFwRGl2KSxcbiAgICAgICAgLy8gY29uZmlndXJhdGlvbiBvZiB0aGUgbWFpbiBtYXBcbiAgICAgICAgLy8gdHlwZSBvZiBtYXAgKHdvcmxkLCBFdXJvcGUsIFVTQSwgZXRjKVxuICAgICAgICBtYXA6IG1UeXBlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmQsXG4gICAgICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgbWFya2VyIGlzIGhvdmVyZWRcbiAgICAgICAgb25SZWdpb25DbGljazogZnVuY3Rpb24oZSwgY29kZSkge1xuICAgICAgICAgICAgLy8gcmVsb2FkIGEgbmV3IG1hcFxuICAgICAgICAgICAgY291bnRyeUNvZGUgPSBjb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAvLyB3YWl0VG9BZGRNYXJrZXJzKDEwMCk7XG4gICAgICAgICAgICB2YXIgbmV3TWFwID0gY291bnRyeUNvZGUgKyAnX21pbGxfZW4nO1xuICAgICAgICAgICAgLy8gc3dpdGggdG8gbmV3IG1hcFxuICAgICAgICAgICAgc3dpdGNoTWFwKG5ld01hcCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTWFya2VyVGlwU2hvdzogZnVuY3Rpb24oZSwgbGFiZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBzZWxlY3Qgd2hhdCB0ZXh0IHRvIGRpc3BsYXkgd2hlbiBtYXJrZXIgaXMgaG92ZXJlZFxuICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkTWFya2VyVG9vbHRpcChqc29uTWFya2VycywgaW5kZXgpO1xuICAgICAgICAgICAgbGFiZWwuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICB9LFxuICAgICAgICAvLyB0cmlnZ2VyZWQgd2hlbiBhIHJlZ2lvbiBpcyBob3ZlcmVkXG4gICAgICAgIG9uUmVnaW9uVGlwU2hvdzogZnVuY3Rpb24oZSwgY291bnRyeU5hbWUsIGNvZGUpIHtcbiAgICAgICAgICAgIC8vIGNvZGUgY29udGFpbnMgdGhlIGNvZGUgb2YgdGhlIGNvdW50cnkgKGkuZS4sIFBULCBFUywgRlIsIGV0YylcbiAgICAgICAgICAgIC8vIHNob3cgdGhlIENvdW50IGFzc29jaWF0ZWQgdG8gdGhhdCBDb3VudHJ5IC0gbG9vayBmb3IgdGhlIGNvdW50cnlcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cnkgPSAtMTtcbiAgICAgICAgICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkubmFtZSA9PT0gY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ291bnRyeSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIGZpbmQgb2NjdXJyZW5jZSBvZiBzZXZlcmFsIHN0cmluZ3MgaW5zaWRlIHRoZSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZENvdW50cnlUb29sdGlwKGNvdW50cnlOYW1lLCBzZWxlY3RlZENvdW50cnkpO1xuICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoY291bnRyeU5hbWUuaHRtbCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICBtYXJrZXJzOiBbZmluYWxNYXJrZXJzSW5NYXBdLFxuICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgY291bnRcbiAgICAgICAgICAgICAgICBzY2FsZTogW21pbkNvbG9yTWFwLCBtYXhDb2xvck1hcF0sXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnZmlsbCcsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBhdXhDb2xvcnNcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGRyYXcgbWFya2VycyBvbiB0aGUgbWFwXG4gICAgaWYgKGRhdGFUeXBlID09ICdtYXJrZXJzJykge1xuICAgICAgICBmaWx0ZXJlZE1hcmtlcnMgPSBqc29uTWFya2VycztcbiAgICAgICAgYWRkTWFya2Vyc1RvTWFwKCk7XG4gICAgfVxufTtcblxuLy8gQXV4aWxpYXJ5IGZ1bmN0aW9uIHRvIHRyYW5zcG9zZSBhIHZhbHVlIGZyb20gYW4gaW5pdGlhbCByYW5nZSB0byBhbm90aGVyIHJhbmdlXG5mdW5jdGlvbiBtYXBSYW5nZSh2YWx1ZSwgbG93MSwgaGlnaDEsIGxvdzIsIGhpZ2gyKSB7XG4gICAgcmV0dXJuIGxvdzIgKyAoaGlnaDIgLSBsb3cyKSAqICh2YWx1ZSAtIGxvdzEpIC8gKGhpZ2gxIC0gbG93MSk7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuZmlsdGVyT25TZXJ2ZXIgPSBmdW5jdGlvbihmaWx0ZXJzKSB7XG4gICAgLy8gcmVhZCB0aGUgZmlsdGVycyBmcm9tIGEgSlNPTiBmaWxlIChqdXN0IGZvciB0ZXN0aW5nKVxuICAgICQuZ2V0SlNPTihcIi4uL2pzb24vc2VydmVyRmlsdGVyLmpzb25cIiwgZnVuY3Rpb24oZmlsdGVyc0pTT04pIHtcbiAgICAgICAgLy8gY29udmVydCB0aGUgZmlsdGVyc0pTT04gdG8gYSBzdHJpbmdcbiAgICAgICAgdmFyIGZpbHRlcnNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShmaWx0ZXJzSlNPTik7XG4gICAgICAgIC8vIGJ1aWxkIHRoZSB1cmwgdG8gc2VuZCB0byB0aGUgc2VydmVyXG4gICAgICAgIHZhciB1cmwgPSAnaHR0cDovL3NlcnZlckZpbHRlcmluZy5jb20vP2RhdGE9JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJzU3RyaW5nKTtcbiAgICAgICAgLy8gRk9SIFRFU1RJTkcgUFVSUE9TRVMgLSB0aGlzIGZpbGUgY29udGFpbnMgYSBkaWZmZXJlbnQgc2V0XG4gICAgICAgIC8vIG9mIGNvdW50cmllcyBhbmQgbWFya2Vyc1xuICAgICAgICB1cmwgPSAnLi4vanNvbi9jb3VudHJpZXNfcGx1c19tYXJrZXJzMi5qc29uJztcbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdG8gZ2V0IHRoZSBtYXJrZXJzIGFuZCBjb3VudHJpZXNcbiAgICAgICAgJC5nZXRKU09OKHVybCwgZnVuY3Rpb24oanNvbikge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBUSElTIENPREUgSVMgU0VSVkVSIFNJREVcbiAgICAgICAgICAgIHZhciBteVBhcmFtID0gdXJsLnNwbGl0KCdkYXRhPScpWzFdO1xuICAgICAgICAgICAgdmFyIHJldHVybkpTT04gPSBkZWNvZGVVUklDb21wb25lbnQobXlQYXJhbSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKHJldHVybkpTT04pKTtcbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBKU09OIHRvIGdldCB0aGUgY291bnRyaWVzIGFuZCBtYXJrZXJzXG4gICAgICAgICAgICBqc29uQ291bnRyaWVzID0gcmVhZENvdW50cmllc0Zyb21KU09OKGpzb24uY291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgY29sb3VycyBmb3IgdGhlIGNvdW50cmllc1xuICAgICAgICAgICAgdmFyIGNvdW50cnlDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyhqc29uQ291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGNvdW50cmllcyBvbiB0aGUgbWFwXG4gICAgICAgICAgICByZWxvYWRNYXAoY291bnRyeUNvbG9ycyk7XG5cbiAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UgYWxzbyBoYXZlIG1hcmtlcnNcbiAgICAgICAgICAgIGlmIChqc29uLm1hcmtlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyByZWFkIHRoZSBtYXJrZXJzIGZyb20gdGhlIEpTT04gZmlsZVxuICAgICAgICAgICAgICAgIGpzb25NYXJrZXJzID0gcmVhZE1hcmtlcnNGcm9tSlNPTihqc29uLm1hcmtlcnMpO1xuICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXJzIHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJ2YXIgQ291bnRyeSA9IGZ1bmN0aW9uKGNvdW50cnlPYmplY3QsIG5hbWUsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50cnlPYmplY3QgPT0gJycpIHtcbiAgICAgICAgLy8gcmVhZCBmcm9tIHRoZSBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMuY291bnRyeSA9IG5hbWU7XG4gICAgICAgIC8vICsgaXMgdXNlZCB0byBhc3N1cmUgdGhhdCBhIE51bWJlciBpcyBiZWluZyByZWFkXG4gICAgICAgIHRoaXMuQ291bnQgPSArY291bnQ7XG4gICAgICAgIHRoaXMuVmFyID0gMDtcbiAgICAgICAgdGhpcy5kZXNjID0gJ2FiYyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVhZCBmcm9tIHRoZSBKU09OXG4gICAgICAgIC8vIGFkZCBhdHRyaWJ1dGVzXG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gY291bnRyeU9iamVjdFtcImF0dHJpYnV0ZXNcIl07XG4gICAgICAgIHZhciBjb3VudHJ5ID0gdGhpcztcbiAgICAgICAgJC5lYWNoKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuICAgICAgICAgICAgY291bnRyeVthdHRyXSA9IGF0dHJpYnV0ZXNbYXR0cl07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRyeSB0byByZWFkIGl0cyByZWdpb25zIGluIGNhc2UgaGUgaGFzIGFueVxuICAgICAgICBpZiAoY291bnRyeU9iamVjdC5SZWdpb25zKVxuICAgICAgICAgICAgdGhpcy5SZWdpb25zID0gcmVhZFJlZ2lvbnNGcm9tSlNPTihjb3VudHJ5T2JqZWN0LlJlZ2lvbnMsIGNvdW50cnlPYmplY3QuY291bnRyeSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gY291bnRyeU9iamVjdC5uYW1lO1xuICAgICAgICAvLyArIGlzIHVzZWQgdG8gYXNzdXJlIHRoYXQgYSBOdW1iZXIgaXMgYmVpbmcgcmVhZFxuICAgICAgICB0aGlzLmNvdW50ID0gK2NvdW50cnlPYmplY3QuY291bnQ7XG4gICAgICAgIHRoaXMuZGVzYyA9ICdhYmMnO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIGNvdW50cnkpIHtcbiAgICB2YXIgZmluYWxUb29sdGlwID0gY291bnRyeVRvb2x0aXA7XG4gICAgLy8gZ2V0IGFsbCB0aGUgYXR0cmlidXRlcyBmcm9tIHRoZSBjb3VudHJ5XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKGNvdW50cnkpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuICAgICAgICBmaW5hbFRvb2x0aXAgPSBmaW5hbFRvb2x0aXAucmVwbGFjZShhdHRyLCBjb3VudHJ5W2F0dHJdKTtcblx0fSk7XG5cbiAgICByZXR1cm4gZmluYWxUb29sdGlwO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyhjb3VudHJpZXMpIHtcbiAgICBpZiAoIWNvdW50cmllcylcbiAgICAgICAgY291bnRyaWVzID0ganNvbkNvdW50cmllcztcbiAgICB2YXIgY291bnRyeUNvbG9ycyA9IFtdO1xuICAgICQuZWFjaChjb3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBjb3VudHJ5Q29sb3JzW2N1cnJlbnRDb3VudHJ5Lm5hbWVdID0gY3VycmVudENvdW50cnkuY291bnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50cnlDb2xvcnM7XG59O1xuXG5mdW5jdGlvbiByZWFkQ291bnRyaWVzRnJvbUpTT04obWFya2Vycykge1xuXG4gICAgdmFyIGNvdW50cmllcyA9IFtdO1xuICAgIHZhciBudW1KU09OQ291bnRyaWVzID0gbWFya2Vycy5sZW5ndGg7XG5cbiAgICBtaW5Db3VudCA9IEluZmluaXR5O1xuICAgIG1heENvdW50ID0gLUluZmluaXR5O1xuXG4gICAgJC5lYWNoKG1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBjb3VudHJpZXNbaW5kZXhdID0gbmV3IENvdW50cnkoY3VycmVudENvdW50cnkpO1xuXHRcdGNvbnNvbGUubG9nKGNvdW50cmllc1tpbmRleF0pO1xuXG4gICAgICAgIGlmIChjb3VudHJpZXNbaW5kZXhdLkNvdW50ID4gbWF4Q291bnQpXG4gICAgICAgICAgICBtYXhDb3VudCA9IGNvdW50cmllc1tpbmRleF0uQ291bnQ7XG5cbiAgICAgICAgaWYgKGNvdW50cmllc1tpbmRleF0uQ291bnQgPCBtaW5Db3VudClcbiAgICAgICAgICAgIG1pbkNvdW50ID0gY291bnRyaWVzW2luZGV4XS5Db3VudDtcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnRyaWVzO1xufVxuXG4vLyByZXR1cm4gdGhlIGNvdW50cnkgd2hvc2UgbmFtZSBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnRcbmZ1bmN0aW9uIGZpbmRDb3VudHJ5QnlOYW1lKGNvdW50cnlOYW1lKSB7XG4gICAgdmFyIHJldHVybkNvdW50cnkgPSBudWxsO1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LmNvdW50cnkgPT0gY291bnRyeU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybkNvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5Db3VudHJ5O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHVybkNvdW50cnk7XG59XG5cbi8vIHJlYWQgdGhlIG1pbiBhbmQgbWF4IGNvdW50IG9mIHRoZSBjb3VudHJpc1xuZnVuY3Rpb24gcmVhZE1pbk1heChjb3VudHJpZXNOYW1lcykge1xuICAgIG1pbkNvdW50ID0gSW5maW5pdHk7XG4gICAgbWF4Q291bnQgPSAtSW5maW5pdHk7XG5cbiAgICAvLyBjb3VudHJpZXMgbmFtZXMgaXMgYSBKU09OIG9iamVjdFxuICAgIC8vIHJlYWQga2V5cyB0byBhbiBhcnJheVxuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGNvdW50cmllc05hbWVzKSB7XG4gICAgICAgIGlmIChjb3VudHJpZXNOYW1lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmQgY291bnRyeSBieSBuYW1lXG4gICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeU5hbWUpIHtcbiAgICAgICAgLy8gZmluZCB0aGUgY291bnRyeSBieSBpdHMgbmFtZVxuICAgICAgICB2YXIgY3VycmVudENvdW50cnkgPSBmaW5kQ291bnRyeUJ5TmFtZShjdXJyZW50Q291bnRyeU5hbWUpO1xuICAgICAgICBpZiAoY3VycmVudENvdW50cnkuQ291bnQgPiBtYXhDb3VudClcbiAgICAgICAgICAgIG1heENvdW50ID0gY3VycmVudENvdW50cnkuQ291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LkNvdW50IDwgbWluQ291bnQpXG4gICAgICAgICAgICBtaW5Db3VudCA9IGN1cnJlbnRDb3VudHJ5LkNvdW50O1xuICAgIH0pO1xufVxuIiwidmFyIHJlc2V0RmlsdGVyc0JveCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gcmVzZXQgYWxsIHRoZSAnZmJveGVzJ1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRmlsdGVyczsgaSsrKSB7XG4gICAgICAgICQoXCIjZmJveFwiICsgaSkudGV4dCgnJyk7XG4gICAgICAgICQoXCIjZmJveFwiICsgaSkudmFsKCcnKTtcbiAgICB9XG5cbiAgICAvLyByZWxvYWQgdGhlIG1hcFxuICAgIHZhciBjb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpO1xuICAgIHJlbG9hZE1hcChjb2xvcnMpO1xuXG4gICAgZmlsdGVyZWRNYXJrZXJzID0ganNvbk1hcmtlcnM7XG4gICAgYWRkTWFya2Vyc1RvTWFwKCk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVGaWx0ZXJzQm94Q2hlY2tib3hlcygpIHtcblxuICAgICQoJ2ZpbHRlci1ib3gnKS5hcHBlbmQoJzx1bCBjbGFzcz1cIm5hdiBuYXZiYXItbmF2XCIgaWQ9XCJmaWx0ZXJCb3hDaGVja2JveGVzXCIgc3R5bGU9XCJib3JkZXItc3R5bGU6IHNvbGlkOyBib3JkZXItd2lkdGg6IDJweDtcIj48L3VsPicpO1xuXG4gICAgLy8gZ2V0IGFsbCB0aGUgZmlsdGVyc1xuICAgICQuZWFjaChqc29uRmlsdGVyc0FycmF5LCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuICAgICAgICB2YXIgYm94SUQgPSAnI2JveCcgKyAoaW5kZXggKyAxKTtcbiAgICAgICAgLy8gYXBwZW5kIHRvIHRoZSBIVE1MXG4gICAgICAgICQoJyNmaWx0ZXJCb3hDaGVja2JveGVzJykuYXBwZW5kKCc8bGkgY2xhc3M9XCJjb2wtc20tNlwiIGlkPVwiYm94JyArIChpbmRleCArIDEpICsgJ1wiIGNsYXNzPVwiZHJvcGRvd24tY2hlY2tib3gtZXhhbXBsZSBkcm9wZG93bi1jaGVja2JveCBkcm9wZG93blwiPjwvbGk+Jyk7XG5cbiAgICAgICAgLy8gZmlsbCB0aGUgdGFicyBmb3IgdGhlIHllYXIgZmlsdGVyXG4gICAgICAgIHZhciB0YWIgPSBbXTtcbiAgICAgICAgJC5lYWNoKGN1cnJlbnRGaWx0ZXIuVmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0YWIucHVzaCh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaW5kZXggKyAxLFxuICAgICAgICAgICAgICAgICdsYWJlbCc6IGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAnaXNDaGVja2VkJzogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBwKHdhdCkge1xuICAgICAgICAgICAgcmV0dXJuICc8cD4nICsgSlNPTi5zdHJpbmdpZnkod2F0KSArICc8L3A+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cygpIHtcbiAgICAgICAgICAgIHZhciAkcCA9ICQoJ3Auc3RhdHVzJykuZW1wdHkoKTtcbiAgICAgICAgICAgICRwLmFwcGVuZChwKHdpZGdldC5jaGVja2VkKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRyb3Bkb3duIHdpdGggY2hlY2tib3hlcyBpbml0aWFsaXphdGlvblxuICAgICAgICB2YXIgbmFtZSA9IGN1cnJlbnRGaWx0ZXIuTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBuYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gICAgICAgICQoYm94SUQpLmRyb3Bkb3duQ2hlY2tib3goe1xuICAgICAgICAgICAgZGF0YTogdGFiLFxuICAgICAgICAgICAgYXV0b3NlYXJjaDogdHJ1ZSxcbiAgICAgICAgICAgIGhpZGVIZWFkZXI6IGZhbHNlLFxuICAgICAgICAgICAgLy8gc2hvdyBudW1iZXIgb2Ygc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgICAgIHNob3dOYlNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHRlbXBsYXRlQnV0dG9uOiAnPGEgY2xhc3M9XCJkcm9wZG93bi1jaGVja2JveC10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgaHJlZj1cIiNcIj4nICsgbmFtZSArICc8c3BhbiBjbGFzcz1cImRyb3Bkb3duLWNoZWNrYm94LW5ic2VsZWN0ZWRcIj48L3NwYW4+PGIgY2xhc3M9XCJjYXJldFwiPjwvYj4nXG4gICAgICAgIH0pO1xuICAgICAgICB3aWRnZXQgPSAkKGJveElEKS5kYXRhKCdkcm9wZG93bkNoZWNrYm94Jyk7XG5cbiAgICAgICAgJCgnYm9keScpLm9uKCdjaGFuZ2U6ZHJvcGRvd24tY2hlY2tib3ggY2hlY2tlZCBjaGVja2VkOmFsbCBjaGVjazphbGwgdW5jaGVjazphbGwgY2hlY2s6Y2hlY2tlZCB1bmNoZWNrOmNoZWNrZWQnLCB1cGRhdGVTdGF0dXMoKSk7XG4gICAgICAgIHVwZGF0ZVN0YXR1cygpO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwZW5kIGZpbHRlciBhbmQgcmVzZXQgYnV0dG9uXG5cbiAgICB2YXIgdGV4dFRvQXBwZW5kID0gJzxkaXYgaWQ9XCJmaWx0ZXJzX2JveFwiIGNsYXNzPVwicm93IGNvbC1zbS0xMlwiPicgK1xuICAgICAgICAnPGJ1dHRvbiBpZD1cImZpbHRlcl9ib3hfYXBwbHlfZmlsdGVyc1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBjb2wtc20tNCBjb2wtc20tb2Zmc2V0LTFcIj5GaWx0ZXI8L2J1dHRvbj4nICtcbiAgICAgICAgJzxidXR0b24gaWQ9XCJmaWx0ZXJfYm94X3Jlc2V0X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+UmVzZXQ8L2J1dHRvbj48L2Rpdj4nO1xuICAgICQoJyNmaWx0ZXJCb3hDaGVja2JveGVzJykuYXBwZW5kKHRleHRUb0FwcGVuZCk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgc2VhcmNoIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0ganNvbkZpbHRlcnNBcnJheS5sZW5ndGg7XG4gICAgICAgIHZhciBlbXB0eUZpbHRlcnMgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25GaWx0ZXJzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIG5leHQgZmlsdGVyIGlkJ3NcbiAgICAgICAgICAgIHZhciBjdXJyZW50RmlsdGVyID0gXCIjYm94XCIgKyAoaSArIDEpO1xuICAgICAgICAgICAgLy8gY3VycmVudCBmaWx0ZXIgdmFsdWVzIC0gc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEl0ZW1zID0gZ2V0U2VsZWN0ZWRJdGVtcyhjdXJyZW50RmlsdGVyKTtcbiAgICAgICAgICAgIHZhciBpdGVtc0FycmF5ID0gW107XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdGVkSXRlbXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNBcnJheS5wdXNoKHNlbGVjdGVkSXRlbXNba2V5c1tqXV0ubGFiZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbnkgZmlsdGVyaW5nIHRvIGFwcGx5IG9yIG5vdFxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGpzb25PYmplY3RbanNvbkZpbHRlcnNBcnJheVtpXS5OYW1lXSA9IGl0ZW1zQXJyYXkuam9pbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbXB0eUZpbHRlcnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhdm9pZCB0aGUgdXNlciBzZWxlY3RpbmcgdGhlIEZpbHRlciBidXR0b24gd2l0aG91dCBpbnB1dGluZyBhbnkgZGF0YVxuICAgICAgICBpZiAoZW1wdHlGaWx0ZXJzICE9IG51bUZpbHRlcnMpIHtcbiAgICAgICAgICAgIGZpbHRlcihqc29uT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdHJpZ2dlcmVkIHdoZW4gdGhlIHJlc2V0IGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X3Jlc2V0X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc2V0RmlsdGVyc0JveCgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3RlZEl0ZW1zKGJveElEKSB7XG4gICAgcmV0dXJuICQoYm94SUQpLmRyb3Bkb3duQ2hlY2tib3goXCJjaGVja2VkXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWx0ZXJzQm94V2l0aEVudW1lcmF0aW9uKGpzb25GaWx0ZXJzKSB7XG5cbiAgICB2YXIgbnVtRmlsdGVycyA9IGpzb25GaWx0ZXJzLmxlbmd0aDtcbiAgICAvLyBjcmVhdGUgZmlsdGVycyBib3ggd2l0aCBlbnVtZXJhdGlvblxuICAgICQuZWFjaChqc29uRmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXIpIHtcbiAgICAgICAgdmFyIGZpbHRlck5hbWUgPSBjdXJyZW50RmlsdGVyLk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZmlsdGVyTmFtZSA9IGZpbHRlck5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBmaWx0ZXJOYW1lLnNsaWNlKDEpO1xuICAgICAgICB2YXIgYnV0dG9uSWQgPSAnZHJvcGRvd24nICsgaW5kZXggKyAnYnV0dG9uJztcbiAgICAgICAgdmFyIHVsSWQgPSAnZHJvcGRvd24nICsgaW5kZXg7XG4gICAgICAgIHZhciB0b0FwcGVuZCA9ICcnO1xuXG4gICAgICAgIC8vIGZpbHRlciB0ZXh0XG4gICAgICAgIHRvQXBwZW5kICs9ICc8cD48Yj4nICsgZmlsdGVyTmFtZSArICc6PC9iPjwvcD4nO1xuICAgICAgICB0b0FwcGVuZCArPSAnPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj4nO1xuICAgICAgICB0b0FwcGVuZCArPSAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImZib3gnICsgaW5kZXggKyAnXCInO1xuICAgICAgICAvLyBidWlsZCB0aGUgcGxhY2Vob2xkZXJcbiAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gY3VycmVudEZpbHRlci5WYWx1ZXNcbiAgICAgICAgdG9BcHBlbmQgKz0gJ3BsYWNlaG9sZGVyPVwiJyArIHBsYWNlaG9sZGVyICsgJ1wiICs+JztcbiAgICAgICAgdG9BcHBlbmQgKz0gJzwvZGl2Pic7XG5cbiAgICAgICAgJCgnZmlsdGVyLWJveCcpLmFwcGVuZCh0b0FwcGVuZCk7XG5cbiAgICAgICAgLy8gYWRkIEJvb3RzdHJhcCB0b29sdGlwIHRvIHRoZSBmaWx0ZXJzIGJveFxuICAgICAgICAkKCcjZmlsdGVyLWJveCcpLnRvb2x0aXAoe1xuICAgICAgICAgICAgdGl0bGU6IFwiVXNlIHRoaXMgZmlsdGVyIGJveCB0byBmaWx0ZXIgYnkgbXVsdGlwbGUgZmlsdGVyc1wiLFxuICAgICAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbVwiXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIHRoZSBidXR0b25zXG4gICAgdmFyIHRleHRUb0FwcGVuZCA9ICc8ZGl2IGlkPVwiZmlsdGVyc19ib3hcIj4nICtcbiAgICAgICAgJzxidXR0b24gaWQ9XCJmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+RmlsdGVyPC9idXR0b24+JyArXG4gICAgICAgICc8YnV0dG9uIGlkPVwiZmlsdGVyX2JveF9yZXNldF9maWx0ZXJzXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGNvbC1zbS00IGNvbC1zbS1vZmZzZXQtMVwiPlJlc2V0PC9idXR0b24+PC9kaXY+JztcbiAgICAkKCdmaWx0ZXItYm94JykuYXBwZW5kKHRleHRUb0FwcGVuZCk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgc2VhcmNoIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0ganNvbkZpbHRlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgZW1wdHlGaWx0ZXJzID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uRmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgaWQnc1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRGaWx0ZXIgPSBcIiNmYm94XCIgKyBpO1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgdmFsdWVzXG4gICAgICAgICAgICB2YXIgY3VycmVudEZpbHRlclZhbHVlID0gJChjdXJyZW50RmlsdGVyKS52YWwoKTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYW55IGZpbHRlcmluZyB0byBhcHBseSBvciBub3RcbiAgICAgICAgICAgIGlmIChjdXJyZW50RmlsdGVyVmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAganNvbk9iamVjdFtqc29uRmlsdGVyc1tpXS5OYW1lXSA9IGN1cnJlbnRGaWx0ZXJWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1wdHlGaWx0ZXJzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgdGhlIHVzZXIgc2VsZWN0aW5nIHRoZSBGaWx0ZXIgYnV0dG9uIHdpdGhvdXQgaW5wdXRpbmcgYW55IGRhdGFcbiAgICAgICAgaWYgKGVtcHR5RmlsdGVycyAhPSBudW1GaWx0ZXJzKSB7XG4gICAgICAgICAgICBmaWx0ZXIoanNvbk9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHRyaWdnZXJlZCB3aGVuIHRoZSByZXNldCBidXR0b24gaXMgY2xpY2tlZFxuICAgICQoXCIjZmlsdGVyX2JveF9yZXNldF9maWx0ZXJzXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNldEZpbHRlcnNCb3goKTtcbiAgICB9KTtcbn1cbiIsImZ1bmN0aW9uIGdldEFsbEZpbHRlclZhbHVlcyhmaWx0ZXJWYWx1ZSkge1xuICAgIHZhciByZXR1cm5QYXJ0cyA9IFtdO1xuXG4gICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbiBlbnVtZXJhdGlvbiAoY29tbWEtc2VwYXJhdGVkIHZhbHVlcyBhbmQvb3IgcmFuZ2VzKVxuICAgIGlmIChTdHJpbmcoZmlsdGVyVmFsdWUpLmluZGV4T2YoXCIsXCIpICE9IC0xKSB7XG5cbiAgICAgICAgLy8gZ2V0IGFsbCB0aGUgZW51bWVyYXRlZCB2YWx1ZXMgKGNhbiBiZSBzaW5ndWxhciBvciByYW5nZSlcbiAgICAgICAgdmFyIGVudW1lcmF0aW9uUGFydHMgPSBTdHJpbmcoZmlsdGVyVmFsdWUpLnNwbGl0KFwiLFwiKTtcblxuICAgICAgICAvLyBjaGVjayBpZiB3ZSBoYXZlIGEgc2ltcGxlIHZhbHVlIG9yIGEgcmFuZ2VcbiAgICAgICAgJC5lYWNoKGVudW1lcmF0aW9uUGFydHMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RW51bWVyYXRpb24pIHtcblxuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIHJhbmdlLi4uXG4gICAgICAgICAgICBpZiAoY3VycmVudEVudW1lcmF0aW9uLmluZGV4T2YoXCItXCIpICE9IC0xKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBhbGwgdGhlIHJhbmdlIHBhcnRzXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlUGFydHMgPSBTdHJpbmcoY3VycmVudEVudW1lcmF0aW9uKS5zcGxpdChcIi1cIik7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgZXh0cmVtZSB2YWx1ZXMgYXJlIHZhbGlkXG4gICAgICAgICAgICAgICAgY2hlY2tGaWx0ZXJWYWx1ZXNBcmVWYWxpZChmaWx0ZXJPYmplY3QsIHJhbmdlUGFydHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgdmFsdWVzIGJldHdlZW4gdGhvc2UgdHdvIG51bWJlcnNcbiAgICAgICAgICAgICAgICAvLyBhbmQgYWRkIHRoZW1cbiAgICAgICAgICAgICAgICB2YXIgbWluID0gcmFuZ2VQYXJ0c1swXTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmFuZ2VQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgbWluIDw9IG1heDsgbWluKyspXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2gobWluKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBkb24ndCBoYXZlIGEgcmFuZ2VcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2luZ2xlIHZhbHVlIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgcmV0dXJuUGFydHMucHVzaChjdXJyZW50RW51bWVyYXRpb24pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGp1c3QgYSBzaW5nbGUgcGFydFxuICAgICAgICBpZiAoZmlsdGVyVmFsdWUuaW5kZXhPZihcIi1cIikgIT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgYSByYW5nZVxuICAgICAgICAgICAgdmFyIHN1YlBhcnRzID0gU3RyaW5nKGZpbHRlclZhbHVlKS5zcGxpdChcIi1cIik7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgZXh0cmVtZSB2YWx1ZXMgYXJlIHZhbGlkXG4gICAgICAgICAgICBjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlck9iamVjdCwgc3ViUGFydHMpO1xuICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgdmFsdWVzIGJldHdlZW4gdGhvc2UgdHdvIG51bWJlcnNcbiAgICAgICAgICAgIHZhciBtaW4gPSBzdWJQYXJ0c1swXTtcbiAgICAgICAgICAgIHZhciBtYXggPSBzdWJQYXJ0c1sxXTtcbiAgICAgICAgICAgIGZvciAoOyBtaW4gPD0gbWF4OyBtaW4rKykge1xuICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICByZXR1cm5QYXJ0cy5wdXNoKGZpbHRlclZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblBhcnRzO1xufVxuXG5mdW5jdGlvbiBjaGVja1doYXRDb3VudHJpZXNUb0FkZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUpIHtcblxuICAgIHZhciBjb3VudHJpZXMgPSBbXTtcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgbmFtZXMgaXMgZXF1YWwgdG8gdGhlIHNlbGVjdGVkIGZpbHRlclxuICAgICAgICAvLyB0cnkgdG8gcmVhZCBhbGwgdGhlIG5hbWVzIGFuZCB2YWx1ZXNcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ25hbWUnICsgaTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSAndmFsdWUnICsgaTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50TmFtZVRvQ2hlY2tdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeVZhbHVlVG9DaGVjayA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYnkgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNbY3VycmVudENvdW50cnkuY291bnRyeV0gPSBjdXJyZW50Q291bnRyeS5Db3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnRyaWVzO1xufTtcblxuZnVuY3Rpb24gY2hlY2tXaGF0TWFya2Vyc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSkge1xuICAgIHZhciBtYXJrZXJzID0gW107XG4gICAgLy8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIGhhdmUgdGhhdCBmaWx0ZXIgdmFsdWVcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjdXJyZW50TWFya2VyKSwgZnVuY3Rpb24oaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgICAgIGlmIChhdHRyLnRvTG93ZXJDYXNlKCkgPT0gc2VsZWN0ZWRGaWx0ZXIuTmFtZS50b0xvd2VyQ2FzZSgpICYmIGN1cnJlbnRNYXJrZXJbYXR0cl0gPT0gZmlsdGVyVmFsdWUpXG4gICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKGN1cnJlbnRNYXJrZXIpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJrZXJzO1xufTtcblxuZnVuY3Rpb24gY2hlY2tXaGF0Q291bnRyaWVzTWFya2Vyc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSkge1xuICAgIHZhciBjb3VudHJpZXNUb0FkZCA9IFtdO1xuICAgIHZhciBtYXJrZXJzVG9BZGQgPSBbXTtcblxuICAgIC8vIGNoZWNrIHdoYXQgY291bnRyaWVzIHRvIGNvbG91clxuICAgIGNvdW50cmllc1RvQWRkID0gY2hlY2tXaGF0Q291bnRyaWVzVG9BZGQoc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlKTtcbiAgICBtYXJrZXJzVG9BZGQgPSBjaGVja1doYXRNYXJrZXJzVG9BZGQoc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlKTtcblxuICAgIHJldHVybiBbY291bnRyaWVzVG9BZGQsIG1hcmtlcnNUb0FkZF07XG59XG5cbmZ1bmN0aW9uIGNoZWNrRmlsdGVyTmFtZUlzVmFsaWQoZmlsdGVyTmFtZSkge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgICQuZWFjaChqc29uRmlsdGVyc0FycmF5LCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuICAgICAgICBpZiAoY3VycmVudEZpbHRlci5OYW1lLnRvTG93ZXJDYXNlKCkgPT09IGZpbHRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZmlsdGVyT2JqZWN0ID0gY3VycmVudEZpbHRlcjtcbiAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZDtcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWx0ZXJWYWx1ZXNBcmVWYWxpZChmaWx0ZXIsIGZpbHRlclZhbHVlcykge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgICQuZWFjaChmaWx0ZXJWYWx1ZXMsIGZ1bmN0aW9uKGluZGV4LCBwYXJ0KSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjdXJyZW50IHZhbHVlIGlzIHZhbGlkXG4gICAgICAgICQuZWFjaChmaWx0ZXJPYmplY3QuVmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09IHBhcnQpIHtcbiAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF2YWxpZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgdmFsdWUgZm9yIHRoZSBmaWx0ZXI6ICcgKyBwYXJ0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZDtcbn1cbiIsIi8vIGNyZWF0ZSBhIG5ldyBGSWx0ZXIgb2JqZWN0XG52YXIgRmlsdGVyID0gZnVuY3Rpb24oTmFtZSwgVmFsdWVzKSB7XG5cdHRoaXMuTmFtZSA9IE5hbWU7XG5cdHRoaXMuVmFsdWVzID0gVmFsdWVzO1xufTtcblxuLy8gbnVtYmVyIG9mIGZpbHRlcnNcbnZhciBudW1GaWx0ZXJzO1xudmFyIGN1cnJlbnRGaWx0ZXI7XG52YXIgY291bnRyeVZhbHVlVG9DaGVjaztcblxuZnVuY3Rpb24gcmVzZXRGaWx0ZXJzKCkge1xuXHQvLyBjb2xvciB0aGUgb3JpZ2luYWwgbWFwXG5cdHZhciBjb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpO1xuXHRyZWxvYWRNYXAoY29sb3JzKTtcblxuXHQvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gaGF2ZSB0aGF0IGZpbHRlciB2YWx1ZVxuXHQkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG5cdFx0bWFwLmFkZE1hcmtlcihpbmRleCwge1xuXHRcdFx0bGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuXHRcdFx0bmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG5cdFx0XHQvLyBzZXQgdGhlIHN0eWxlIGZvciB0aGlzIG1hcmtlclxuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0ZmlsbDogJ2dyZWVuJyxcblx0XHRcdFx0cjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuY3JlYXRlU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBqUXVlcnlVSSBzbGlkZXJcbiAgICBzbGlkZXIgPSAkKFwiI3NsaWRlclwiKS5zbGlkZXIoKTtcblxuICAgIC8vIHNldCBtYXggYW5kIG1pbiB2YWx1ZSBmb3IgdGhlIHNsaWRlclxuICAgIHNsaWRlci5zbGlkZXIoXCJvcHRpb25cIiwgXCJtaW5cIiwgbWluUmFkaXVzKTtcbiAgICBzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwibWF4XCIsIG1heFJhZGl1cyk7XG5cbiAgICAvLyBhbGxvdyB0aGUgdXNlciB0byBzZWxlY3QgYSByYW5nZVxuICAgIHNsaWRlci5zbGlkZXIoXCJvcHRpb25cIiwgXCJyYW5nZVwiLCB0cnVlKTtcblxuICAgIC8vIHdoZW4gdXNlciBjbGlja3MgdGhlIHNsaWRlciwgaXQgd2lsbCBhbmltYXRlIHRvIHRoZSBjbGlja2VkIHBvc2l0aW9uXG4gICAgc2xpZGVyLnNsaWRlcihcIm9wdGlvblwiLCBcImFuaW1hdGVcIiwgXCJzbG93XCIpO1xuXG4gICAgLy8gYWZ0ZXIgc2VsZWN0aW5nIGEgbmV3IHNsaWRlciB2YWx1ZVxuICAgIHNsaWRlci5vbihcInNsaWRlY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICBzbGlkZXJDaGFuZ2VkKCk7XG4gICAgfSk7XG5cbiAgICAvLyBoaWRlIGFsbCB0aGUgY29tcG9uZW50cyB1bnRpbCB0aGV5IGFyZSBoaWRkZW5cbiAgICAkKCcjc2xpZGVyJykuaGlkZSgpO1xuICAgICQoJyNtaW5TbGlkZXInKS5oaWRlKCk7XG4gICAgJCgnI21heFNsaWRlcicpLmhpZGUoKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyRnJvbU1lbnVTZWxlY3RlZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUpIHtcblxuXHRjdXJyZW50RmlsdGVyID0gc2VsZWN0ZWRGaWx0ZXI7XG5cblx0Ly8gY2hlY2sgd2hhdCBjb3VudHJpZXMgdG8gYWRkIHRvIHRoZSBtYXBcblx0dmFyIGNvdW50cmllcyA9IGNoZWNrV2hhdENvdW50cmllc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSk7XG5cblx0Ly8gcmVsb2FkIHRoZSBtYXAgYW5kIGFkZCB0aG9zZSBjb3VudHJpZXNcblx0cmVsb2FkTWFwKGNvdW50cmllcyk7XG5cblx0Ly8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIGhhdmUgdGhhdCBmaWx0ZXIgdmFsdWVcblx0JC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuXHRcdC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgbmFtZXMgaXMgZXF1YWwgdG8gdGhlIHNlbGVjdGVkIGZpbHRlclxuXHRcdC8vIHRyeSB0byByZWFkIGFsbCB0aGUgbmFtZXMgYW5kIHZhbHVlc1xuXHRcdHZhciBpID0gMDtcblx0XHRkbyB7XG5cdFx0XHRpKys7XG5cdFx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSAnVmFsdWUnICsgaTtcblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcblx0XHRcdGlmKGN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSkge1xuXHRcdFx0XHRpZihjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10gPT09IHNlbGVjdGVkRmlsdGVyLk5hbWUpIHtcblx0XHRcdFx0XHRpZihjdXJyZW50TWFya2VyW2N1cnJlbnRWYWx1ZV0gPT09IGZpbHRlclZhbHVlKSB7XG5cdFx0XHRcdFx0XHRtYXAuYWRkTWFya2VyKGluZGV4LCB7XG5cdFx0XHRcdFx0XHRcdGxhdExuZzogW2N1cnJlbnRNYXJrZXIuTGF0aXR1ZGUsIGN1cnJlbnRNYXJrZXIuTG9uZ2l0dWRlXSxcblx0XHRcdFx0XHRcdFx0bmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG5cdFx0XHRcdFx0XHRcdC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG5cdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0ZmlsbDogJ2dyZWVuJyxcblx0XHRcdFx0XHRcdFx0XHRyOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0gd2hpbGUgKHRydWUpXG5cdH0pO1xuXG5cblx0Ly8gdXBkYXRlIHRoZSBzbGlkZXJcblx0Ly8gY2hlY2sgaWYgYW55IG9mIHRoZSB2YWx1ZXMgaXMgYSBudW1iZXJzLCBpZiBpdCBpcyB3ZSB0aGVuIHVwZGF0ZSB0aGUgc2xpZGVyXG5cdGlmKCFpc05hTihzZWxlY3RlZEZpbHRlci5WYWx1ZXNbMF0pKSB7XG5cdFx0JCgnI3NsaWRlcicpLnNob3coKTtcblx0XHQkKCcjbWluU2xpZGVyJykuc2hvdygpO1xuXHRcdCQoJyNtYXhTbGlkZXInKS5zaG93KCk7XG5cblx0XHQvLyBqUXVlcnlVSSBzbGlkZXJcblx0XHR2YXIgc2xpZGVyID0gJChcIiNzbGlkZXJcIikuc2xpZGVyKCk7XG5cdFx0dmFyIG1pblZhbHVlID0gc2VsZWN0ZWRGaWx0ZXIuVmFsdWVzWzBdO1xuXHRcdHZhciBtYXhWYWx1ZSA9IHNlbGVjdGVkRmlsdGVyLlZhbHVlc1tzZWxlY3RlZEZpbHRlci5WYWx1ZXMubGVuZ3RoIC0gMV07XG5cblx0XHQvLyBzZXQgbWF4IGFuZCBtaW4gdmFsdWUgZm9yIHRoZSBzbGlkZXJcblx0XHRzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwibWluXCIsIG1pblZhbHVlKTtcblx0XHRzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwibWF4XCIsIG1heFZhbHVlKTtcblxuXHRcdC8vIHNldCB0aGUgdGV4dCBvbiB0aGUgVUlcblx0XHQkKCcjbWluU2xpZGVyJykudGV4dChtaW5WYWx1ZSk7XG5cdFx0JCgnI21heFNsaWRlcicpLnRleHQobWF4VmFsdWUpO1xuXHR9IGVsc2Uge1xuXHRcdCQoJyNzbGlkZXInKS5oaWRlKCk7XG5cdFx0JCgnI21pblNsaWRlcicpLmhpZGUoKTtcblx0XHQkKCcjbWF4U2xpZGVyJykuaGlkZSgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNsaWRlckNoYW5nZWQoKSB7XG5cdC8vIGdldCB0aGUgbWF4IGFuZCBtaW4gdmFsdWVzIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHJhbmdlXG5cdHZhciBjdXJyZW50UmFuZ2UgPSBzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwidmFsdWVzXCIpO1xuXHR2YXIgbWluID0gY3VycmVudFJhbmdlWzBdO1xuXHR2YXIgbWF4ID0gY3VycmVudFJhbmdlWzFdO1xuXG5cdHZhciBjdXJyZW50RmlsdGVyTmFtZSA9IGN1cnJlbnRGaWx0ZXIuTmFtZTtcblxuXHQvLyBzZXQgdGhlIHRleHQgb24gdGhlIFVJXG5cdCQoJyNtaW5TbGlkZXInKS50ZXh0KG1pbik7XG5cdCQoJyNtYXhTbGlkZXInKS50ZXh0KG1heCk7XG5cblx0Ly8gZmlsdGVyIHRoZSBDb3VudHJpZXNcblx0dmFyIGNvdW50cmllcyA9IFtdO1xuXHQkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG5cdFx0dmFyIGZpbHRlclZhbHVlRm9yQ291bnRyeSA9ICtjdXJyZW50Q291bnRyeVtjb3VudHJ5VmFsdWVUb0NoZWNrXTtcblx0XHRpZihmaWx0ZXJWYWx1ZUZvckNvdW50cnkgPj0gbWluICYmIGZpbHRlclZhbHVlRm9yQ291bnRyeSA8PSBtYXgpXG5cdFx0XHRjb3VudHJpZXNbY3VycmVudENvdW50cnkuY291bnRyeV0gPSBjdXJyZW50Q291bnRyeS5Db3VudDtcblx0fSk7XG5cblx0Ly8gZHJhdyB0aGUgY291bnRyaWVzIG9uIHRoZSBtYXBcblx0cmVsb2FkTWFwKGNvdW50cmllcyk7XG5cblx0Ly8gZmlsdGVyIHRoZSBNYXJrZXJzXG5cdHZhciBjdXJyZW50Q291bnRyeSA9IGpzb25Db3VudHJpZXNbMF07XG5cdHZhciBzZWxlY3RlZE5hbWU7XG5cdHZhciBpID0gMDtcblx0ZG8ge1xuXHRcdGkrKztcblx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHR2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG5cdFx0Ly8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuXHRcdGlmKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10gPT09IGN1cnJlbnRGaWx0ZXJOYW1lKSB7XG5cdFx0XHRzZWxlY3RlZE5hbWUgPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH0gd2hpbGUgKHRydWUpO1xuXG5cdC8vIGFkZCBvbmx5IHRoZSBtYXJrZXJzIHdobyBoYXZlIHRoYXQgZmlsdGVyIHZhbHVlXG5cdCQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcblx0XHQvLyBjaGVjayBpZiB0aGUgQ291bnRyeSBoYXMgdGhhdCBuYW1lXG5cdFx0aWYoY3VycmVudE1hcmtlcltzZWxlY3RlZE5hbWVdID49IG1pbiAmJiBjdXJyZW50TWFya2VyW3NlbGVjdGVkTmFtZV0gPD0gbWF4KSB7XG5cdFx0XHRtYXAuYWRkTWFya2VyKGluZGV4LCB7XG5cdFx0XHRcdGxhdExuZzogW2N1cnJlbnRNYXJrZXIuTGF0aXR1ZGUsIGN1cnJlbnRNYXJrZXIuTG9uZ2l0dWRlXSxcblx0XHRcdFx0bmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG5cdFx0XHRcdC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0ZmlsbDogJ2dyZWVuJyxcblx0XHRcdFx0XHRyOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xufTtcblxuZnVuY3Rpb24gcmVhZEZpbHRlcnNGcm9tSlNPTihpbnB1dEZpbHRlcnMpIHtcblx0dmFyIGZpbHRlcnMgPSBbXTtcblxuXHRmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXRGaWx0ZXJzLnZhbHVlcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIHJlYWQgdGhlIGN1cnJlbnQgZmlsdGVyXG5cdFx0Y3VycmVudEZpbHRlciA9IGlucHV0RmlsdGVycy52YWx1ZXNbaV07XG5cdFx0Ly8gZmllbGRzXG5cdFx0dmFyIG5hbWUgPSBjdXJyZW50RmlsdGVyLm5hbWU7XG5cdFx0dmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0Zm9yKHZhciBqID0gMDsgaiA8IGN1cnJlbnRGaWx0ZXIudmFsdWVzLmxlbmd0aDsgaisrKVxuXHRcdFx0dmFsdWVzLnB1c2goY3VycmVudEZpbHRlci52YWx1ZXNbal0pO1xuXHRcdGZpbHRlcnNbaV0gPSBuZXcgRmlsdGVyKG5hbWUsIHZhbHVlcyk7XG5cdH1cblx0bnVtRmlsdGVycyA9IGZpbHRlcnMubGVuZ3RoO1xuXHRyZXR1cm4gZmlsdGVycztcbn07XG4iLCJ2YXIgbWFwcGluZ01hcmtlcnMgPSBbXTtcbnZhciBtYXBwaW5nQ291bnRyaWVzID0gW107XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUucmVnaXN0ZXJUcmFuc2Zvcm1lciA9IGZ1bmN0aW9uKGpzb25Mb2NhdGlvbiwgY291bnRyaWVzTWFwcGluZ0pzb24sIG1hcmtlcnNNYXBwaW5nSnNvbikge1xuXHQvLyBqc29uTG9jYXRpb24gLSB1cmwgb2YgdGhlIG5ldyBqc29uXG5cdC8vIGNvdW50cmllc01hcHBpbmdKc29uIC0ganNvbiB0aGF0IGNvbnRhaW5zIHRoZSBqc29uIGNvdW50cnkgbWFwcGluZ1xuXHR2YXIgY291bnRyaWVzTWFwcGluZ0pzb24gPSBcIi4uL21hcHBpbmdKU09OL21hcHBpbmdDb3VudHJpZXNTYW1wbGUuanNvblwiO1xuXHQvLyBtYXJrZXJzTWFwcGluZ0pzb24gLSBqc29uIHRoYXQgY29udGFpbnMgdGhlIGpzb24gbWFya2VycyBtYXBwaW5nXG5cdHZhciBtYXJrZXJzTWFwcGluZ0pzb24gPSBcIi4uL21hcHBpbmdKU09OL21hcHBpbmdNYXJrZXJzU2FtcGxlLmpzb25cIjtcblxuXHRpZighY291bnRyaWVzTWFwcGluZ0pzb24pIHtcblx0XHRjb25zb2xlLmVycm9yKCd5b3UgbXVzdCBzcGVjaWZ5IGEgY291bnRyaWVzIG1hcHBpbmcganNvbicpO1xuXHRcdHJldHVybjtcblx0fVxuXHRpZighbWFya2Vyc01hcHBpbmdKc29uKSB7XG5cdFx0Y29uc29sZS5lcnJvcigneW91IG11c3Qgc3BlY2lmeSBhIG1hcmtlcnMgbWFwcGluZyBqc29uJyk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gZ2V0IHRoZSBKU09OXG5cdGpzb25Mb2NhdGlvbiA9IFwiLi4vanNvbi9lc3BpZC1zcGFpbi5qc29uXCI7XG5cdCQuZ2V0SlNPTihqc29uTG9jYXRpb24sIGZ1bmN0aW9uKGpzb24pIHtcblx0XHQvLyByZWFkIGNvdW50cmllc1xuXHRcdGpzb25NYXBDb3VudHJpZXMoanNvbiwgY291bnRyaWVzTWFwcGluZ0pzb24pO1xuXHRcdC8vIHJlYWQgbWFya2Vyc1xuXHRcdGpzb25NYXBNYXJrZXJzKGpzb24sIG1hcmtlcnNNYXBwaW5nSnNvbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBqc29uTWFwQ291bnRyaWVzKGpzb24sIGNvdW50cmllc01hcHBpbmdKc29uKSB7XG5cdHZhciBjb3VudHJpZXMgPSBbXTtcblx0Ly8gYWNjZXNzIHRoZSBKU09OIGZpbGUgdGhhdCBzcGVjaWZpZXMgdGhlIG1hcHBpbmdcblx0JC5nZXRKU09OKGNvdW50cmllc01hcHBpbmdKc29uLCBmdW5jdGlvbihqc29uTWFwcGluZykge1xuXG5cdFx0Ly8gaW4gdGhpcyBjYXNlIHRoZSAnY291bnRyaWVzJyBhcmUgZGVmaW5lZCB0aGUgdG9wIGxldmVsXG5cdFx0Ly8gaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5ICdjb3VudHJ5J1xuXHRcdCQuZWFjaChqc29uLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEpTT04pIHtcblx0XHRcdHZhciBqc29uQ291bnRyeSA9ICd7Jztcblx0XHRcdC8vIGdldCB0aGUgbmFtZSBvZiB0aGUgY291bnRyeVxuXHRcdFx0dmFyIG5hbWUgPSBjdXJyZW50SlNPTltqc29uTWFwcGluZy5jb3VudHJ5XTtcblx0XHRcdC8vIHRoZSBjb3VudHJ5IG5hbWUgbXVzdCBiZSBvbiB0aGUgdHdvLWRpZ2l0IGZvcm1hdFxuXHRcdFx0Ly8gZ2V0IHRoZSBjb3VudCAtIFdIQVQgSVMgVEhFIENPVU5UP1xuXHRcdFx0dmFyIGNvdW50ID0gMDtcblx0XHRcdC8vZ2V0IHRoZSBkZXNjcmlwdGlvbiAtIFdIVCBJUyBUSEUgREVTQ1JJUFRJT04gT0YgQSBNQVJLRVI/XG5cdFx0XHR2YXIgZGVzY3JpcHRpb24gPSAnJztcblx0XHRcdC8qXG5cdFx0XHRXSEFUIEFSRSBUSEUgTkFNRVM/Pz9cblx0XHRcdCovXG5cdFx0XHRjb3VudHJpZXNbaW5kZXhdID0gbmV3IENvdW50cnkoJycsIG5hbWUsIGNvdW50KTtcblx0XHR9KTtcblx0XHRtYXBwaW5nQ291bnRyaWVzID0gY291bnRyaWVzO1xuXHRcdGNvbnNvbGUubG9nKG1hcHBpbmdDb3VudHJpZXMpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24ganNvbk1hcE1hcmtlcnMoanNvbiwgbWFya2Vyc01hcHBpbmdKc29uKSB7XG5cdHZhciBtYXJrZXJzID0gW107XG5cblx0Ly8gYWNjZXNzIHRoZSBKU09OIGZpbGUgdGhhdCBzcGVjaWZpZXMgdGhlIG1hcHBpbmdcblx0JC5nZXRKU09OKG1hcmtlcnNNYXBwaW5nSnNvbiwgZnVuY3Rpb24oanNvbk1hcHBpbmcpIHtcblx0XHQvLyBpbiB0aGlzIGNhc2UgdGhlICdtYXJrZXJzJyBhcmUgZGVmaW5lZCB0aGUgdG9wIGxldmVsXG5cdFx0Ly8gaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5ICdtYXJrZXInXG5cdFx0JC5lYWNoKGpzb24sIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50SlNPTikge1xuXHRcdFx0Ly8gZ2V0IHRoZSBuYW1lIG9mIHRoZSBjb3VudHJ5XG5cdFx0XHR2YXIgbmFtZSA9IGN1cnJlbnRKU09OW2pzb25NYXBwaW5nLmNvdW50cnldO1xuXHRcdFx0Ly8gdGhlIGNvdW50cnkgbmFtZSBtdXN0IGJlIG9uIHRoZSB0d28tZGlnaXQgZm9ybWF0XG5cdFx0XHQvLyBnZXQgdGhlIGNvdW50IC0gV0hBVCBJUyBUSEUgQ09VTlQ/XG5cdFx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFx0Ly8gZ2V0IHRoZSBsYXRpdHVkZVxuXHRcdFx0dmFyIGxhdGl0dWRlID0gY3VycmVudEpTT05banNvbk1hcHBpbmcuTGF0aXR1ZGVdO1xuXHRcdFx0Ly8gZ2V0IHRoZSBsb25naXR1ZGVcblx0XHRcdHZhciBsb25naXR1ZGUgPSBjdXJyZW50SlNPTltqc29uTWFwcGluZy5Mb25naXR1ZGVdO1xuXHRcdFx0Ly9nZXQgdGhlIGRlc2NyaXB0aW9uIC0gV0hBVCBJUyBUSEUgREVTQ1JJUFRJT04gT0YgQSBNQVJLRVI/XG5cdFx0XHR2YXIgZGVzY3JpcHRpb24gPSAnJztcblx0XHRcdC8qXG5cdFx0XHRXSEFUIEFSRSBUSEUgTkFNRVM/Pz9cblx0XHRcdCovXG5cdFx0XHQvLyBjcmVhdGUgYSBuZXcgbWFya2VyXG5cdFx0XHRtYXJrZXJzW2luZGV4XSA9IG5ldyBNYXJrZXIoJycsIG5hbWUsIGNvdW50LCBsYXRpdHVkZSwgbG9uZ2l0dWRlKTtcblx0XHR9KTtcblx0XHRtYXBwaW5nTWFya2VycyA9IG1hcmtlcnM7XG5cdFx0Y29uc29sZS5sb2cobWFwcGluZ01hcmtlcnMpO1xuXHR9KTtcbn1cbiIsIi8vIHJlZHJhdyB0aGUgbWFwXG5mdW5jdGlvbiByZWxvYWRNYXAoY29sb3JzKSB7XG4gICAgLy8gZ2V0IHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IG1hcFxuICAgIGlmIChtYXAucGFyYW1zLm1hcCA9PSBtVHlwZSkge1xuICAgICAgICAvLyBtYWluIG1hcFxuICAgICAgICAvLyB1cGRhdGUgbWluIGFuZCBtYXggQ291bnQgb2YgdGhlIGNvdW50cmllc1xuICAgICAgICBpZiAoanNvbkNvdW50cmllcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmVhZE1pbk1heChjb2xvcnMpO1xuXG4gICAgICAgIHZhciBsZWdlbmRWYXIgPSB7XG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgICAgICAgIC8vdGl0bGU6ICdDb3VudHJpZXMnLFxuICAgICAgICB9O1xuXG5cbiAgICAgICAgdmFyIG1hcmtlcnNXaXRoTGVnZW5kID0ge1xuICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF0sXG4gICAgICAgICAgICAvLyBhZGQgYSBsZWdlbmRcbiAgICAgICAgICAgIGxlZ2VuZDogbGVnZW5kVmFyXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1hcmtlcnNXaXRob3V0TGVnZW5kID0ge1xuICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF1cbiAgICAgICAgfTtcblxuICAgICAgICBmaW5hbE1hcmtlcnNJbk1hcCA9IG1hcmtlcnNXaXRoTGVnZW5kO1xuICAgICAgICBpZiAoZGF0YVR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgICAgICBmaW5hbE1hcmtlcnNJbk1hcCA9IG1hcmtlcnNXaXRob3V0TGVnZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXJhc2UgdGhlIG1hcFxuICAgICAgICAkKFwiI1wiICsgbURpdikuZW1wdHkoKTtcblxuICAgICAgICBtYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgICAgICBtYXA6IG1UeXBlLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgICAgY29udGFpbmVyOiAkKCcjJyArIG1EaXYpLFxuICAgICAgICAgICAgb25SZWdpb25DbGljazogZnVuY3Rpb24oZSwgY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIHJlbG9hZCBhIG5ldyBtYXBcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZSA9IGNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAvLyB3YWl0VG9BZGRNYXJrZXJzKDEwMCk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld01hcCA9IGNvdW50cnlDb2RlICsgJ19taWxsX2VuJztcbiAgICAgICAgICAgICAgICAvLyBzd2l0aCB0byBuZXcgbWFwXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKG5ld01hcCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRNYXJrZXJUb29sdGlwKGpzb25NYXJrZXJzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgbGFiZWwuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVnaW9uVGlwU2hvdzogZnVuY3Rpb24oZSwgY291bnRyeU5hbWUsIGNvZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSBjb3VudHJ5IChpLmUuLCBQVCwgRVMsIEZSLCBldGMpXG4gICAgICAgICAgICAgICAgLy8gc2hvdyB0aGUgQ291bnQgYXNzb2NpYXRlZCB0byB0aGF0IENvdW50cnkgLSBsb29rIGZvciB0aGUgY291bnRyeVxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cnkgPSAtMTtcbiAgICAgICAgICAgICAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5jb3VudHJ5ID09PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIHNlbGVjdGVkQ291bnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeU5hbWUuaHRtbChjb3VudHJ5TmFtZS5odG1sKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIG1hcmtlcnM6IFtmaW5hbE1hcmtlcnNJbk1hcF0sXG4gICAgICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgLy8gbWluIGFuZCBtYXggdmFsdWVzIG9mIGNvdW50XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBbbWluQ29sb3JNYXAsIG1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnZmlsbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb2xvcnMgYXJlICdzdHJldGNoZWQnIHRvIGZpbGwgdGhlIHNjYWxlXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogY29sb3JzXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VibWFwXG4gICAgICAgIC8vIHVwZGF0ZSBtaW4gYW5kIG1heCBDb3VudCBvZiB0aGUgY291bnRyaWVzXG4gICAgICAgIGlmIChqc29uQ291bnRyaWVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZWFkTWluTWF4KGNvbG9ycyk7XG5cbiAgICAgICAgLy8gZXJhc2UgdGhlIG1hcFxuICAgICAgICAkKFwiI1wiICsgbURpdikuZW1wdHkoKTtcbiAgICAgICAgcmVtb3ZlVG9vbHRpcCgpO1xuICAgICAgICBzd2l0Y2hNYXAobWFwVHlwZSk7XG4gICAgfVxuXG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcCgpIHtcbiAgICAvLyBlcmFzZSB0aGUgcHJldmlvdXMgbWFwIHRvb2x0aXBcbiAgICAkKCcuanZlY3Rvcm1hcC10aXAnKS5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gc3dpdGNoTWFwKG5ld01hcCkge1xuICAgIC8vIHRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgd2hlbiBhIGNvdW50cnkgb24gdGhlIHdvcmxkIG1hcCBpcyBjbGlja2VkXG4gICAgLy8gZXJhc2UgdGhlIHByZXZpb3VzIG1hcFxuICAgICQoJyMnICsgbURpdikuZW1wdHkoKTtcbiAgICByZW1vdmVUb29sdGlwKCk7XG5cbiAgICB2YXIgcmVnaW9uQ29sb3JzID0gZ2VuZXJhdGVDb2xvcnNGb3JUaGVSZWdpb25zKG5ld01hcCk7XG5cbiAgICBtYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgIG1hcDogbmV3TWFwLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmQsXG4gICAgICAgIGNvbnRhaW5lcjogJCgnIycgKyBtRGl2KSxcbiAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZE1hcmtlclRvb2x0aXAoanNvbk1hcmtlcnMsIGluZGV4KTtcbiAgICAgICAgICAgIGxhYmVsLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCByZWdpb25OYW1lLCBjb2RlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudE1hcCA9IG5ld01hcC5zcGxpdCgnXycpWzBdLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSByZWdpb24gKGkuZS4sIFBULTEsIEVTLU0sIGV0YylcbiAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgUmVnaW9uIC0gbG9vayBmb3IgdGhlIFJlZ2lvblxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgY29ycmVzcG9uZGluZyBjb3VudHJ5XG4gICAgICAgICAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LmNvdW50cnkgPT0gY3VycmVudE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNlbGVjdGVkIHJlZ2lvbiBoYXMgYW55IGRhdGEgaW5zaWRlIHRoYXQgY291bnRyeVxuICAgICAgICAgICAgdmFyIHJlZ2lvbkZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRSZWdpb247XG4gICAgICAgICAgICAkLmVhY2gobWFwLnJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZWdpb24ubmFtZSA9PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUmVnaW9uID0gY3VycmVudFJlZ2lvbjtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVnaW9uRm91bmQpIHtcbiAgICAgICAgICAgICAgICByZWdpb25OYW1lLmh0bWwoYnVpbGRSZWdpb25Ub29sdGlwKHNlbGVjdGVkUmVnaW9uKSk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICByZWdpb25OYW1lLmh0bWwocmVnaW9uTmFtZS5odG1sKCkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgIG1hcmtlcnM6IFt7XG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSBzY2FsZSB0byBmaXQgdGhlIGN1cnJlbnQgbWluIGFuZCBtYXggdmFsdWVzXG4gICAgICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICByZWdpb25zOiBbe1xuICAgICAgICAgICAgICAgIC8vIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiBjb3VudFxuICAgICAgICAgICAgICAgIHNjYWxlOiBbbWluQ29sb3JNYXAsIG1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29sb3JzIGFyZSAnc3RyZXRjaGVkJyB0byBmaWxsIHRoZSBzY2FsZVxuICAgICAgICAgICAgICAgIHZhbHVlczogcmVnaW9uQ29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgYmFjayBidXR0b25cbiAgICAkKCcjbXlfbWFwJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwianZlY3Rvcm1hcC1nb2JhY2tcIj5CYWNrPC9kaXY+Jyk7XG4gICAgJChcIi5qdmVjdG9ybWFwLWdvYmFja1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZXJhc2UgdGhlIHByZXZpb3VzIG1hcFxuICAgICAgICAkKCcjJyArIG1EaXYpLmVtcHR5KCk7XG4gICAgICAgIHJlbW92ZVRvb2x0aXAoKTtcblxuXG4gICAgICAgIC8vIHdoZW4gdGhlIGxlZnQgYnV0dG9uIGlzIGNsaWNrZWRcbiAgICAgICAgLy8gcmV0dXJuIHRvIHRoZSBtYWluIG1hcFxuICAgICAgICBtYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgICAgICBjb250YWluZXI6ICQoJyMnICsgbURpdiksXG4gICAgICAgICAgICAvLyBjb25maWd1cmF0aW9uIG9mIHRoZSBtYWluIG1hcFxuICAgICAgICAgICAgLy8gdHlwZSBvZiBtYXAgKHdvcmxkLCBFdXJvcGUsIFVTQSwgZXRjKVxuICAgICAgICAgICAgbWFwOiBtVHlwZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZCxcbiAgICAgICAgICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgbWFya2VyIGlzIGhvdmVyZWRcbiAgICAgICAgICAgIG9uUmVnaW9uQ2xpY2s6IGZ1bmN0aW9uKGUsIGNvZGUpIHtcbiAgICAgICAgICAgICAgICAvLyByZWxvYWQgYSBuZXcgbWFwXG4gICAgICAgICAgICAgICAgY291bnRyeUNvZGUgPSBjb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgLy8gd2FpdFRvQWRkTWFya2VycygxMDApO1xuICAgICAgICAgICAgICAgIHZhciBuZXdNYXAgPSBjb3VudHJ5Q29kZSArICdfbWlsbF9lbic7XG4gICAgICAgICAgICAgICAgLy8gc3dpdGggdG8gbmV3IG1hcFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChuZXdNYXApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTWFya2VyVGlwU2hvdzogZnVuY3Rpb24oZSwgbGFiZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IHdoYXQgdGV4dCB0byBkaXNwbGF5IHdoZW4gbWFya2VyIGlzIGhvdmVyZWRcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRNYXJrZXJUb29sdGlwKGpzb25NYXJrZXJzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgbGFiZWwuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgcmVnaW9uIGlzIGhvdmVyZWRcbiAgICAgICAgICAgIG9uUmVnaW9uVGlwU2hvdzogZnVuY3Rpb24oZSwgY291bnRyeU5hbWUsIGNvZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSBjb3VudHJ5IChpLmUuLCBQVCwgRVMsIEZSLCBldGMpXG4gICAgICAgICAgICAgICAgLy8gc2hvdyB0aGUgQ291bnQgYXNzb2NpYXRlZCB0byB0aGF0IENvdW50cnkgLSBsb29rIGZvciB0aGUgY291bnRyeVxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cnkgPSAtMTtcbiAgICAgICAgICAgICAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5jb3VudHJ5ID09PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZCBvY2N1cnJlbmNlIG9mIHNldmVyYWwgc3RyaW5ncyBpbnNpZGUgdGhlIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZENvdW50cnlUb29sdGlwKGNvdW50cnlOYW1lLCBzZWxlY3RlZENvdW50cnkpO1xuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZS5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoY291bnRyeU5hbWUuaHRtbCgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgICAgICBtYXJrZXJzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzY2FsZTogW21pbkNvbG9yTWFwLCBtYXhDb2xvck1hcF0sXG4gICAgICAgICAgICAgICAgICAgIC8vIHJhbmdlIG9mIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIENvdW50XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF0sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBhIGxlZ2VuZFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICByZWdpb25zOiBbe1xuICAgICAgICAgICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgY291bnRcbiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBhdXhDb2xvcnNcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgLy8gYWRkIHRoZSBtYXJrZXMgdG8gdGhlIG1hcFxuICAgICAgICBpZiAodGhlcmVBcmVNYXJrZXJzKSB7XG4gICAgICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gYWRkIHRoZSBtYXJrZXJzXG4gICAgaWYgKHRoZXJlQXJlTWFya2Vycykge1xuICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICB9XG5cbiAgICBpZiAoanNvbkNvdW50cmllcykge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2VsZWN0ZWQgbWFwIGhhcyBhbnkgcmVnaW9uIHRvIGhpZ2hsaWdodFxuICAgICAgICAvLyBhZGRSZWdpb25zVG9NYXAobmV3TWFwKVxuICAgIH1cbn1cbiIsIi8vIE1hcmtlciBkZWZpbml0aW9uXG52YXIgTWFya2VyID0gZnVuY3Rpb24gKG1hcmtlck9iamVjdCwgbmFtZSwgY291bnQsIGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcblx0aWYobWFya2VyT2JqZWN0ID09ICcnKVxuXHR7XG5cdFx0dGhpcy5jb3VudHJ5ID0gbmFtZTtcblx0XHR0aGlzLkNvdW50ID0gK2NvdW50O1xuXHRcdHRoaXMuVmFyID0gJyc7XG5cdFx0dGhpcy5MYXRpdHVkZSA9IGxhdGl0dWRlO1xuXHRcdHRoaXMuTG9uZ2l0dWRlID0gbG9uZ2l0dWRlO1xuXHRcdC8vIFRPRE8gLSBhZGQgZGVzY3JpcHRpb24gdG8gYSBNYXJrZXIgZnJvbSB0aGUgSlNPTiBmaWxlXG5cdFx0dGhpcy5kZXNjID0gJ2FiYyc7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gYWRkIGF0dHJpYnV0ZXNcblx0XHR2YXIgYXR0cmlidXRlcyA9IG1hcmtlck9iamVjdFtcImF0dHJpYnV0ZXNcIl07XG5cdFx0dmFyIG1hcmtlciA9IHRoaXM7XG5cdFx0JC5lYWNoKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuXHRcdFx0bWFya2VyW2F0dHJdID0gYXR0cmlidXRlc1thdHRyXTtcblx0XHR9KTtcblxuXHRcdHRoaXMuY291bnRyeSA9IG1hcmtlck9iamVjdC5jb3VudHJ5O1xuXHRcdHRoaXMuQ291bnQgPSArbWFya2VyT2JqZWN0LmNvdW50O1xuXHRcdHRoaXMuTGF0aXR1ZGUgPSBtYXJrZXJPYmplY3QubGF0aXR1ZGU7XG5cdFx0dGhpcy5Mb25naXR1ZGUgPSBtYXJrZXJPYmplY3QubG9uZ2l0dWRlO1xuXHRcdHRoaXMuaWNvbiA9IG1hcmtlck9iamVjdC5pY29uO1xuXHRcdC8vIFRPRE8gLSBhZGQgZXNjcmlwdGlvbiB0byBhIE1hcmtlciBmcm9tIHRoZSBKU09OIGZpbGVcblx0XHR0aGlzLmRlc2MgPSAnYWJjJztcblx0fVxufTtcblxuLy8gcmVhZCB0aGUgbWFya2VycyBmcm9tIGEgSlNPTiBmaWxlXG5mdW5jdGlvbiByZWFkTWFya2Vyc0Zyb21KU09OKGpzb25NYXJrZXJzKSB7XG5cdHZhciBtYXJrZXJzID0gW107XG5cblx0bWluQ291bnQgPSBJbmZpbml0eTtcblx0bWF4Q291bnQgPSAtSW5maW5pdHk7XG5cblx0JC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbiAoaW5kZXgsIGN1cnJlbnRKU09OTWFya2VyKSB7XG5cdFx0bWFya2Vyc1tpbmRleF0gPSBuZXcgTWFya2VyKGN1cnJlbnRKU09OTWFya2VyKTtcblx0XHR2YXIgY3VycmVudENvdW50VmFsdWUgPSBtYXJrZXJzW2luZGV4XS5Db3VudDtcblxuXHRcdGlmKGN1cnJlbnRDb3VudFZhbHVlID4gbWF4Q291bnQpIHtcblx0XHRcdG1heENvdW50ID0gY3VycmVudENvdW50VmFsdWU7XG5cdFx0fVxuXHRcdGlmKGN1cnJlbnRDb3VudFZhbHVlIDwgbWluQ291bnQpXG5cdFx0XHRtaW5Db3VudCA9IGN1cnJlbnRDb3VudFZhbHVlO1xuXHR9KTtcblx0cmV0dXJuIG1hcmtlcnM7XG59XG5cbmZ1bmN0aW9uIGFkZE1hcmtlcnNUb01hcCgpIHtcbiAgICB2YXIgbWFya2Vyc0pTT05BcnJheSA9IFtdO1xuICAgICQuZWFjaChmaWx0ZXJlZE1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIHZhciBjdXJyZW50TWFya2VySlNPTiA9IHtcbiAgICAgICAgICAgIGxhdExuZzogW2N1cnJlbnRNYXJrZXIuTGF0aXR1ZGUsIGN1cnJlbnRNYXJrZXIuTG9uZ2l0dWRlXSxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRNYXJrZXIuZGVzYyxcbiAgICAgICAgICAgIC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGZpbGw6ICdyZWQnLFxuICAgICAgICAgICAgICAgIHI6IG1hcFJhbmdlKGN1cnJlbnRNYXJrZXIuQ291bnQsIG1pbkNvdW50LCBtYXhDb3VudCwgbWluUmFkaXVzLCBtYXhSYWRpdXMpLFxuICAgICAgICAgICAgICAgIGltYWdlOiAnLi4vaW1nLycrY3VycmVudE1hcmtlci5pY29uKycucG5nJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtYXJrZXJzSlNPTkFycmF5LnB1c2goY3VycmVudE1hcmtlckpTT04pO1xuICAgIH0pO1xuICAgIG1hcC5hZGRNYXJrZXJzKG1hcmtlcnNKU09OQXJyYXkpO1xufVxuXG5mdW5jdGlvbiBidWlsZE1hcmtlclRvb2x0aXAoanNvbk1hcmtlcnMsIGluZGV4KSB7XG4gICAgdmFyIGZpbmFsVG9vbHRpcCA9IG1hcmtlclRvb2x0aXA7XG4gICAgZmluYWxUb29sdGlwID0gZmluYWxUb29sdGlwLnJlcGxhY2UoJ2Rlc2NyaXB0aW9uJywganNvbk1hcmtlcnNbaW5kZXhdLmRlc2MpO1xuICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKCdsYXRpdHVkZScsIGpzb25NYXJrZXJzW2luZGV4XS5MYXRpdHVkZSk7XG4gICAgZmluYWxUb29sdGlwID0gZmluYWxUb29sdGlwLnJlcGxhY2UoJ2xvbmdpdHVkZScsIGpzb25NYXJrZXJzW2luZGV4XS5Mb25naXR1ZGUpO1xuICAgIHJldHVybiBmaW5hbFRvb2x0aXA7XG59XG4iLCJmdW5jdGlvbiBmaWx0ZXIoaW5wdXRBcmdzKSB7XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0QXJncylcbiAgICB2YXIgbnVtYmVyS2V5cyA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWxpZEZpbHRlcnMgPSAwO1xuXG4gICAgdmFyIGNvdW50cmllc0J5RmlsdGVyID0gbmV3IEFycmF5KCk7XG4gICAgdmFyIG1hcmtlcnNCeUZpbHRlciA9IG5ldyBBcnJheSgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJLZXlzOyBpKyspIHtcbiAgICAgICAgY291bnRyaWVzQnlGaWx0ZXJbaV0gPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgbWFya2Vyc0J5RmlsdGVyW2ldID0gbmV3IEFycmF5KCk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgYW55IG9mIHRoZSBuYW1lcyBpcyBhbGwgKHJlc2V0IGFsbCBhcHBsaWVkIGZpbHRlcnNcdClcbiAgICB2YXIgZXhpdCA9IGZhbHNlO1xuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICBpZiAoZmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpID09ICdhbGwnKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHJlbG9hZHMgdGhlIG9yaWdpbmFsIG1hcmtlcnMgYW5kIGNvdW50cmllcyBvbiB0aGUgbWFwXG4gICAgICAgICAgICByZXNldEZpbHRlcnMoKTtcbiAgICAgICAgICAgIC8vIGVyYXNlIHRoZSB0ZXh0IGZyb20gdGhlIGZpbHRlcnMgYm94XG4gICAgICAgICAgICByZXNldEZpbHRlcnNCb3goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChleGl0KVxuICAgICAgICByZXR1cm47XG5cbiAgICAvLyBmb3IgZXZlcnkga2V5L2ZpbHRlclxuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgZmlsdGVyTmFtZSBpcyB2YWxpZFxuICAgICAgICBpZiAoIWNoZWNrRmlsdGVyTmFtZUlzVmFsaWQoZmlsdGVyTmFtZSkpIHtcbiAgICAgICAgICAgIC8vIGludmFsaWQgZmlsdGVyIG5hbWVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIGZpbHRlciBuYW1lISgnICsgZmlsdGVyTmFtZSArICcpJyk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgZmlsdGVyIHZhbHVlIChjYW4gY29udGFpbiBlbnVtZXJhdGlvbiBhbmQgcmFuZ2UpXG4gICAgICAgICAgICAvLyAnMjAwNC0yMDA2JyAsICdGLE0nLCBldGNcbiAgICAgICAgICAgIHZhciBmaWx0ZXJWYWx1ZSA9IGlucHV0QXJnc1tmaWx0ZXJOYW1lXTtcbiAgICAgICAgICAgIC8vIGdldCBhbGwgc2luZ2xlIGZpbHRlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhciBmaW5hbFBhcnRzID0gZ2V0QWxsRmlsdGVyVmFsdWVzKGZpbHRlclZhbHVlKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZmluYWxQYXJ0cyk7XG4gICAgICAgICAgICB2YWxpZEZpbHRlcnMrKztcblxuICAgICAgICAgICAgLy8gZm9yIGV2ZXJ5IHNpbmdsZSB2YWx1ZSBnZXQgYWxsIHRoZSBjb3VudHJ1ZXMgYW5kIG1hcmtlcnNcbiAgICAgICAgICAgICQuZWFjaChmaW5hbFBhcnRzLCBmdW5jdGlvbihpLCBwYXJ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrUmV0dXJuID0gY2hlY2tXaGF0Q291bnRyaWVzTWFya2Vyc1RvQWRkKGZpbHRlck9iamVjdCwgcGFydCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cmllc0F1eCA9IGNoZWNrUmV0dXJuWzBdO1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzQXV4ID0gY2hlY2tSZXR1cm5bMV07XG4gICAgICAgICAgICAgICAgLy8gYWRkIGV2ZXJ5IGNvdW50cnkgdG8gdGhlIGxpc3Qgb2YgY291bnRyaWVzQnlGaWx0ZXJcbiAgICAgICAgICAgICAgICAvLyBhZGQgZXZlcnkgbWFya2VyIHRvIHRoZSBsaXN0IG9mIG1hcmtlcnNCeUZpbHRlclxuICAgICAgICAgICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNBdXgpLCBmdW5jdGlvbihqLCBjdXJyZW50S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb2xvcnMgdGhhdCBhcmUgcmV0dXJuZWQgYXJlIGluIGEganNvbiBmb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gY291bnRyaWVzQXV4W2N1cnJlbnRLZXldO1xuICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUZpbHRlcltpbmRleF1bY3VycmVudEtleV0gPSBrZXlWYWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIG1hcmtlcnNcbiAgICAgICAgICAgICAgICAkLmVhY2gobWFya2Vyc0F1eCwgZnVuY3Rpb24oaiwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzQnlGaWx0ZXJbaW5kZXhdLnB1c2goY3VycmVudE1hcmtlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZ2V0IHRoZSBmaW5hbCBjb3VudHJpZXNcbiAgICB2YXIgZmluYWxDb3VudHJpZXMgPSBbXTtcbiAgICBpZiAoY291bnRyaWVzQnlGaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBmaW5hbENvdW50cmllcyA9IGNvdW50cmllc0J5RmlsdGVyWzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50cmllc0J5RmlsdGVyLmxlbmd0aCAtIDE7IGkrKylcbiAgICAgICAgICAgIGZpbmFsQ291bnRyaWVzID0gZ2V0Q291bnRyaWVzSW50ZXJzZWN0aW9uKGZpbmFsQ291bnRyaWVzLCBjb3VudHJpZXNCeUZpbHRlcltpICsgMV0pO1xuICAgIH1cblxuICAgIC8vIGFkZCBjb3VudHJpZXMgdG8gTWFwXG4gICAgcmVsb2FkTWFwKGZpbmFsQ291bnRyaWVzKTtcblxuICAgIC8vIGdldCB0aGUgZmluYWwgbWFya2Vyc1xuICAgIGZpbHRlcmVkTWFya2VycyA9IFtdO1xuICAgIGlmIChtYXJrZXJzQnlGaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBmaWx0ZXJlZE1hcmtlcnMgPSBtYXJrZXJzQnlGaWx0ZXJbMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya2Vyc0J5RmlsdGVyLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgZmlsdGVyZWRNYXJrZXJzID0gZ2V0TWFya2Vyc0ludGVyc2VjdGlvbihmaWx0ZXJlZE1hcmtlcnMsIG1hcmtlcnNCeUZpbHRlcltpICsgMV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIG1hcmtlcnMgdG8gdGhlIG1hcFxuICAgIGFkZE1hcmtlcnNUb01hcCgpO1xufVxuXG5mdW5jdGlvbiBnZXRNYXJrZXJzSW50ZXJzZWN0aW9uKG1hcmtlcnNHcm91cDEsIG1hcmtlcnNHcm91cDIpIHtcbiAgICB2YXIgbWFya2VycyA9IFtdO1xuXG4gICAgLy8gbWFya2VycyB0aGF0IGJlbG9uZyB0byB0aGUgdHdvIGdyb3Vwc1xuICAgICQuZWFjaChtYXJrZXJzR3JvdXAxLCBmdW5jdGlvbihpbmRleCwgbWFya2VyMSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGlzIG1hcmtlciBuYW1lIGlzIGluc2lkZSB0aGUgc2Vjb25kIGdyb3VwXG4gICAgICAgIHZhciBtYXJrZXIxQ291bnRyeSA9IG1hcmtlcjEuY291bnRyeTtcbiAgICAgICAgJC5lYWNoKG1hcmtlcnNHcm91cDIsIGZ1bmN0aW9uKGluZGV4LCBtYXJrZXIyKSB7XG4gICAgICAgICAgICB2YXIgbWFya2VyMkNvdW50cnkgPSBtYXJrZXIyLmNvdW50cnk7XG4gICAgICAgICAgICBpZiAobWFya2VyMUNvdW50cnkgPT0gbWFya2VyMkNvdW50cnkpXG4gICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKG1hcmtlcjEpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJrZXJzO1xufVxuXG5mdW5jdGlvbiBnZXRDb3VudHJpZXNJbnRlcnNlY3Rpb24oY291bnRyaWVzR3JvdXAxLCBjb3VudHJpZXNHcm91cDIpIHtcbiAgICAvLyBjb3VudHJpZXMgdGhhdCBiZWxvbmcgdG8gdGhlIHR3byBncm91cHNcbiAgICB2YXIgY291bnRyaWVzID0gW107XG5cbiAgICAkLmVhY2goT2JqZWN0LmtleXMoY291bnRyaWVzR3JvdXAxKSwgZnVuY3Rpb24oaW5kZXgsIGNvdW50cnlOYW1lMSkge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGNvdW50cnkgbmFtZSBpcyBpbnNpZGUgdGhlIHNlY29uZCBncm91cFxuICAgICAgICAkLmVhY2goT2JqZWN0LmtleXMoY291bnRyaWVzR3JvdXAyKSwgZnVuY3Rpb24oaW5kZXgsIGNvdW50cnlOYW1lMikge1xuICAgICAgICAgICAgaWYgKGNvdW50cnlOYW1lMSA9PSBjb3VudHJ5TmFtZTIpXG4gICAgICAgICAgICAgICAgY291bnRyaWVzW2NvdW50cnlOYW1lMV0gPSBjb3VudHJpZXNHcm91cDFbY291bnRyeU5hbWUxXTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50cmllcztcbn1cblxuZnVuY3Rpb24gYXBwbHlNdWx0aXBsZUZpbHRlcnNQcm9ncmFtYXR0aWNhbGx5KGZpbHRlcnNUb0FwcGx5KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmaWx0ZXJzVG9BcHBseSlcbiAgICB2YXIgbnVtRmlsdGVyc1RvQXBwbHkgPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgY291bnRyaWVzSGF2ZUZpbHRlciA9IFtdO1xuICAgIHZhciBtYXJrZXJzSGF2ZUZpbHRlciA9IFtdO1xuXG4gICAgLy8gZm9yIGV2ZXJ5IGtleVxuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICB2YXIgZmlsdGVyVmFsdWUgPSBmaWx0ZXJzVG9BcHBseVtmaWx0ZXJOYW1lXTtcbiAgICB9KTtcbiAgICB2YXIgY29sb3JzID0gW107XG5cbiAgICAvLyByZW1vdmUgYWxsIG1hcmtlcnMgZnJvbSB0aGUgbWFwXG4gICAgbWFwLnJlbW92ZUFsbE1hcmtlcnMoKTtcblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBjb3VudHJpZXNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlck5hbWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10udG9Mb3dlckNhc2UoKSA9PSBjdXJyZW50RmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50VmFsdWVdID09IGZpbHRlcnNUb0FwcGx5W2N1cnJlbnRGaWx0ZXJOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0hhdmVGaWx0ZXJbY291bnRyeUluZGV4XSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gY29sb3VyIG9ubHkgdGhlIGNvdW50cmlzIHdob3NlIGNvdW50cmllc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bWJlckZpbHRlcnNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBpZiAoY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KVxuICAgICAgICAgICAgY29sb3JzW2N1cnJlbnRDb3VudHJ5LmNvdW50cnldID0gY3VycmVudENvdW50cnkuQ291bnQ7XG4gICAgfSk7XG4gICAgcmVsb2FkTWFwKGNvbG9ycyk7XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8qXG4gICAgTWFya2Vyc1xuICAgICovXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBtYXJrZXJzXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihtYXJrZXJJbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlck5hbWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdLnRvTG93ZXJDYXNlKCkgPT0gY3VycmVudEZpbHRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBieSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50VmFsdWVdID09IGZpbHRlcnNUb0FwcGx5W2N1cnJlbnRGaWx0ZXJOYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNIYXZlRmlsdGVyW21hcmtlckluZGV4XSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIHNhdGlzZnkgdGhlIGNyaXRlcmlhXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICBpZiAobWFya2Vyc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KSB7XG4gICAgICAgICAgICBtYXAuYWRkTWFya2VyKGluZGV4LCB7XG4gICAgICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRNYXJrZXIuZGVzYyxcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2dyZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIGFwcGx5TXVsdGlwbGVGaWx0ZXJzKHNlbGVjdGVkTXVsdGlwbGVGaWx0ZXJzLCBqc29uRmlsdGVycykge1xuXG4gICAgLy8gbnVtYmVyIG9mIGZpbHRlcnMgdG8gYmUgYXBwbGllZFxuICAgIHZhciBudW1GaWx0ZXJzVG9BcHBseSA9IHNlbGVjdGVkTXVsdGlwbGVGaWx0ZXJzLmZpbHRlcihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgIH0pLmxlbmd0aDtcblxuICAgIHZhciBjb3VudHJpZXNIYXZlRmlsdGVyID0gW107XG4gICAgdmFyIG1hcmtlcnNIYXZlRmlsdGVyID0gW107XG5cbiAgICAvLyBmb3IgZWFjaCBvZiB0aGUgY291bnRyaWVzXG4gICAgJC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGNvdW50cnlJbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgLy8gc2V0IHRvIDAgdGhlIG51bWJlciBvZiBmaWx0ZXJzXG4gICAgICAgIGNvdW50cmllc0hhdmVGaWx0ZXJbY291bnRyeUluZGV4XSA9IDA7XG4gICAgICAgIC8vIGNoZWNrIGlmIGl0IGhhcyB0aGUgbmVlZGVkIHZhbHVlc1xuICAgICAgICAkLmVhY2goc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXSA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10gPT09IGpzb25GaWx0ZXJzW2luZGV4XS5OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50VmFsdWVdID09IGN1cnJlbnRGaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBjb2xvcnMgPSBbXTtcblxuICAgIC8vIGNvbG91ciBvbmx5IHRoZSBjb3VudHJpcyB3aG9zZSBjb3VudHJpZXNIYXZlRmlsdGVyW2luZGV4XSA9PSBudW1iZXJGaWx0ZXJzXG4gICAgJC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGNvdW50cnlJbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGNvdW50cmllc0hhdmVGaWx0ZXJbY291bnRyeUluZGV4XSA9PSBudW1GaWx0ZXJzVG9BcHBseSlcbiAgICAgICAgICAgIGNvbG9yc1tjdXJyZW50Q291bnRyeS5jb3VudHJ5XSA9IGN1cnJlbnRDb3VudHJ5LkNvdW50O1xuICAgIH0pO1xuXG4gICAgLy8gY29sb3VyIHRoZSBjb3VudHJpZXNcbiAgICByZWxvYWRNYXAoY29sb3JzKTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvKlxuICAgIE1hcmtlcnNcbiAgICAqL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBmb3IgZWFjaCBvZiB0aGUgbWFya2Vyc1xuICAgICQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24obWFya2VySW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgLy8gc2V0IHRvIDAgdGhlIG51bWJlciBvZiBmaWx0ZXJzXG4gICAgICAgIG1hcmtlcnNIYXZlRmlsdGVyW21hcmtlckluZGV4XSA9IDA7XG4gICAgICAgIC8vIGNoZWNrIGlmIGl0IGhhcyB0aGUgbmVlZGVkIHZhbHVlc1xuICAgICAgICAkLmVhY2goc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9ICdWYWx1ZScgKyBpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdLnRvTG93ZXJDYXNlKCkgPT0ganNvbkZpbHRlcnNbaW5kZXhdLk5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBieSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE1hcmtlcltjdXJyZW50VmFsdWVdID09IGN1cnJlbnRGaWx0ZXJWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnNIYXZlRmlsdGVyW21hcmtlckluZGV4XSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIHNhdGlzZnkgdGhlIGNyaXRlcmlhXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICBpZiAobWFya2Vyc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KSB7XG4gICAgICAgICAgICBtYXAuYWRkTWFya2VyKGluZGV4LCB7XG4gICAgICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRNYXJrZXIuZGVzYyxcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJ2dyZWVuJyxcbiAgICAgICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwidmFyIFJlZ2lvbiA9IGZ1bmN0aW9uKHJlZ2lvbk9iamVjdCwgY291bnRyeSkge1xuICAgIC8vIHJlYWQgZnJvbSB0aGUgaW5wdXQgcGFyYW1ldGVyc1xuICAgIHRoaXMuUmVnaW9uID0gcmVnaW9uT2JqZWN0Lm5hbWU7XG4gICAgdGhpcy5jb3VudHJ5ID0gY291bnRyeTtcbiAgICAvLyArIGlzIHVzZWQgdG8gYXNzdXJlIHRoYXQgYSBOdW1iZXIgaXMgYmVpbmcgcmVhZFxuICAgIHRoaXMuZGVzYyA9ICdqdXN0IGEgcmVnaW9uLi4uJztcbn07XG5cbmZ1bmN0aW9uIHJlYWRSZWdpb25zRnJvbUpTT04ocmVnaW9ucywgY291bnRyeSkge1xuICAgIHZhciByZWdpb25zQXJyID0gW107XG4gICAgJC5lYWNoKHJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgIHJlZ2lvbnNBcnJbaW5kZXhdID0gbmV3IFJlZ2lvbihjdXJyZW50UmVnaW9uLCBjb3VudHJ5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVnaW9ucztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2xvcnNGb3JUaGVSZWdpb25zKGNvdW50cnkpe1xuICAgIHZhciBpc29Db2RlID0gY291bnRyeS5zcGxpdChcIl9cIilbMF0udG9VcHBlckNhc2UoKTtcbiAgICAvLyBmaW5kIHRoZSBjb3VudHJ5IHdpdGggdGhhdCBpc29Db2RlXG4gICAgdmFyIHJlZ2lvbkNvbG9ycyA9IFtdO1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LmNvdW50cnkgPT0gaXNvQ29kZSkge1xuICAgICAgICAgICAgLy8gY291bnRyeSB3YXMgZm91bmQsIGNoZWNrIGlmIGl0IGhhcyBhbnkgcmVnaW9uXG4gICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkuUmVnaW9ucykge1xuICAgICAgICAgICAgICAgIHZhciByZWdpb25zID0gY3VycmVudENvdW50cnkuUmVnaW9ucztcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHJlZ2lvbnMgb2YgdGhlIGNvdW50cnlcbiAgICAgICAgICAgIFx0JC5lYWNoKHJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgICAgICBcdFx0cmVnaW9uQ29sb3JzW2N1cnJlbnRSZWdpb24ubmFtZV0gPSAxMDA7XG4gICAgICAgICAgICBcdH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cdHJldHVybiByZWdpb25Db2xvcnM7XG59XG5cblxuZnVuY3Rpb24gYnVpbGRSZWdpb25Ub29sdGlwKHJlZ2lvbikge1xuICAgIHZhciBmaW5hbFRvb2x0aXAgPSByZWdpb25Ub29sdGlwO1xuICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKCduYW1lJywgcmVnaW9uLm5hbWUpO1xuICAgIHJldHVybiBmaW5hbFRvb2x0aXA7XG59XG5cbmZ1bmN0aW9uIGFkZFJlZ2lvbnNUb01hcChrZXkpIHtcbiAgICAvLyBjaGVjayBpZiB0aGUgaGlnaGxpZ2h0ZWQgY291bnRyeSBoYXMgYW55IHJlZ2lvblxuICAgIHZhciBpc29Db2RlID0ga2V5LnNwbGl0KFwiX1wiKVswXS50b1VwcGVyQ2FzZSgpO1xuICAgIC8vIGZpbmQgdGhlIGNvdW50cnkgd2l0aCB0aGF0IGlzb0NvZGVcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5jb3VudHJ5ID09IGlzb0NvZGUpIHtcbiAgICAgICAgICAgIC8vIGNvdW50cnkgd2FzIGZvdW5kLCBjaGVjayBpZiBpdCBoYXMgYW55IHJlZ2lvblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LlJlZ2lvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9ucyA9IGN1cnJlbnRDb3VudHJ5LlJlZ2lvbnM7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFsZXR0ZSA9IFsnIzY2QzJBNScsICcjRkM4RDYyJywgJyM4REEwQ0InLCAnI0U3OEFDMycsICcjQTZEODU0J107XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUNvbG9ycygpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9ycyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5O1xuICAgICAgICAgICAgICAgICAgICBjb2xvcnNbbWFwcy5yZWdpb25dXG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbWFwcy5yZWdpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNba2V5XSA9IHBhbGV0dGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFsZXR0ZS5sZW5ndGgpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2VuZXJhdGVDb2xvcnMoKSk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBjb2xvcnMgb2YgdGhlIHJlZ2lvbnNcbiAgICAgICAgICAgICAgICBtYXBzLnNlcmllcy5yZWdpb25zWzBdLnNldFZhbHVlcyhnZW5lcmF0ZUNvbG9ycygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9