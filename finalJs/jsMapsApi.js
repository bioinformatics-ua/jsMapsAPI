function mapRange(e,o,r,n,t){return n+(t-n)*(e-o)/(r-o)}function buildCountryTooltip(e,o){var r=countryTooltip;return $.each(Object.keys(o),function(e,n){r=r.replace(n,o[n])}),r}function generateColorsForTheCountries(e){e||(e=jsonCountries);var o=[];return $.each(e,function(e,r){o[r.name]=r.count}),o}function readCountriesFromJSON(e){var o=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,r){o.push(new Country(r)),o[e].Count>maxCount&&(maxCount=o[e].Count),o[e].Count<minCount&&(minCount=o[e].Count)}),o}function findCountryByName(e){var o=null;return $.each(jsonCountries,function(r,n){return n.country==e?o=n:void 0}),o}function readMinMax(e){minCount=1/0,maxCount=-(1/0);var o=[];for(var r in e)e.hasOwnProperty(r)&&o.push(r);$.each(o,function(e,o){var r=findCountryByName(o);r.Count>maxCount&&(maxCount=r.Count),r.Count<minCount&&(minCount=r.Count)})}function resetFiltersBox(){for(var e=0;numFilters>e;e++){$("#fbox"+e).text(""),$("#fbox"+e).val("")}var o=generateColorsForTheCountries();reloadMap(o),filteredMarkers=jsonMarkers,addMarkersToMap()}function createFiltersBoxCheckboxes(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(jsonFiltersArray,function(e,o){function r(e){return"<p>"+JSON.stringify(e)+"</p>"}function n(){var e=$("p.status").empty();e.append(r(widget.checked()))}numFilters++;var t="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];o.continuous||$.each(o.values,function(e,o){a.push({id:e+1,label:o,isChecked:!1})});var i=o.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(t).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(t).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",n()),n()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){for(var e={},o=jsonFiltersArray.length,r=0,n=0;n<jsonFiltersArray.length;n++){for(var t="#box"+(n+1),a=getSelectedItems(t),i=[],s=Object.keys(a),c=0;c<s.length;c++)i.push(a[s[c]].label);s.length>0?e[jsonFiltersArray[n].name]=i.join():r++}r!=o&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function createFiltersBoxWithEnumeration(e){numFilters=e.length,$.each(e,function(e,o){var r=o.name.toLowerCase();r=r.charAt(0).toUpperCase()+r.slice(1);var n="";n+="<p><b>"+r+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+e+'"',n+=o.continuous?'placeholder="'+o.min+"..."+o.max+'" +>':'placeholder="'+o.values.join()+'" +>',n+="</div>",$("filter-box").append(n),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})}),$(".form-control").append('<span class="glyphicon glyphicon-remove form-control-feedback">');var o='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(o),$("#filter_box_apply_filters").click(function(){for(var o={},r=e.length,n=0,t=0;t<e.length;t++){var a="#fbox"+t,i=$(a).val();""!==i?o[e[t].name]=i:n++}n!=r&&filter(o)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getAllFilterValues(e){var o=[];if(console.log(e),-1!=String(e).indexOf(",")){var r=String(e).split(",");$.each(r,function(e,r){if(-1!=r.indexOf("-")){var n=String(r).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)o.push(t)}else o.push(r)})}else if(console.log("single"),-1!=e.indexOf("-")){console.log("range");var n=String(e).split("-");console.log(n),checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)o.push(t)}else console.log("single value"),checkFilterValuesAreValid(filterObject,e.split("")),o.push(e);return o}function checkWhatCountriesToAdd(e,o){var r=[];return $.each(jsonCountries,function(e,n){for(var t=0;;){t++;var a="name"+t,i="value"+t;if(!n[a])break;n[i]==o&&(countryValueToCheck=i,n[i]==o&&(r[n.country]=n.Count))}}),r}function checkWhatMarkersToAdd(e,o){var r=[];return $.each(jsonMarkers,function(n,t){$.each(Object.keys(t),function(n,a){a.toLowerCase()==e.name.toLowerCase()&&t[a]==o&&r.push(t)})}),r}function checkWhatCountriesMarkersToAdd(e,o){var r=[],n=[];return r=checkWhatCountriesToAdd(e,o),n=checkWhatMarkersToAdd(e,o),[r,n]}function checkFilterNameIsValid(e){var o=!1;return $.each(jsonFiltersArray,function(r,n){return n.name.toLowerCase()===e.toLowerCase()?(filterObject=n,void(o=!0)):void 0}),o}function checkFilterValuesAreValid(e,o){var r=!0;if(1==e.continuous){var n=e.min,t=e.max;console.log(n),console.log(t),$.each(o,function(e,o){return console.log(+o),n>+o||+o>t?(r=!1,void console.log("Invalid value for the filter: "+o)):void 0})}else $.each(o,function(o,n){r=!1,$.each(e.values,function(e,o){return o==n?void(r=!0):void 0}),r||console.log("Invalid value for the filter: "+n)});return r}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,o){map.addMarker(e,{latLng:[o.Latitude,o.Longitude],name:o.desc,style:{fill:"green",r:mapRange(o.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readFiltersFromJSON(e){var o=[];return $.each(e,function(e,r){o.push(new Filter(r))}),o}function jsonMapCountries(e,o){var r=[];$.getJSON(o,function(o){$.each(e,function(e,n){var t=n[o.country],a=0;r[e]=new Country("",t,a)}),mappingCountries=r,console.log(mappingCountries)})}function jsonMapMarkers(e,o){var r=[];$.getJSON(o,function(o){$.each(e,function(e,n){var t=n[o.country],a=0,i=n[o.Latitude],s=n[o.Longitude];r[e]=new Marker("",t,a,i,s)}),mappingMarkers=r,console.log(mappingMarkers)})}function reloadMap(e){jsonCountries.length>0&&readMinMax(e),$("#"+mDiv).empty(),map=new jvm.Map({map:mType,backgroundColor:background,container:$("#"+mDiv),onRegionClick:function(e,o){countryCode=o.toLowerCase();var r=countryCode+"_mill_en";switchMap(r)},onMarkerTipShow:function(e,o,r){var n=buildMarkerTooltip(jsonMarkers,r);o.html(n)},onRegionTipShow:function(e,o,r){var n=-1;if($.each(jsonCountries,function(e,o){return o.country===r?void(n=o):void 0}),-1!=n){var t=buildCountryTooltip(o,n);o.html(t)}else o.html(o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:e}]}}),thereAreMarkers&&addMarkersToMap()}function removeTooltip(){$(".jvectormap-tip").remove()}function removeBackButton(){$(".jvectormap-goback").remove()}function switchMap(e){$("#"+mDiv).empty(),removeTooltip();var o="countries"==dataType?generateColorsForTheCountries(e):[];map=new jvm.Map({map:e,backgroundColor:background,container:$("#"+mDiv),onMarkerTipShow:function(e,o,r){var n=buildMarkerTooltip(jsonMarkers,r);o.html(n)},onRegionTipShow:function(o,r,n){var t=e.split("_")[0].toUpperCase(),a=-1;$.each(jsonCountries,function(e,o){return o.country==t?void(a=o):void 0});var i,s=!1;$.each(map.regions,function(e,o){return o.name==n?(i=o,void(s=!0)):void 0}),r.html(s?buildRegionTooltip(i):r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:o}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+mDiv).empty(),removeTooltip(),reloadMap(auxColors)}),thereAreMarkers&&addMarkersToMap()}function readMarkersFromJSON(e){var o=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,r){o.push(new Marker(r));var n=o[e].Count;n>maxCount&&(maxCount=n),n<minCount&&(minCount=n)}),o}function addMarkersToMap(){var e=[];$.each(filteredMarkers,function(o,r){var n={latLng:[r.latitude,r.longitude],name:r.desc,style:{r:mapRange(r.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+r.icon+".png"}};e.push(n)}),map.addMarkers(e)}function buildMarkerTooltip(e,o){var r=markerTooltip;return $.each(Object.keys(o),function(e,n){r=r.replace(n,o[n])}),r}function filter(e){var o=Object.keys(e),r=o.length,n=0,t=new Array,a=new Array;for(c=0;r>c;c++)t[c]=new Array,a[c]=new Array;var i=!1;if($.each(o,function(e,o){return"all"==o.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(o,function(o,r){if(!checkFilterNameIsValid(r))return void console.log("Invalid filter name!("+r+")");var i=e[r],s=getAllFilterValues(i);n++,$.each(s,function(e,r){var n=checkWhatCountriesMarkersToAdd(filterObject,r),i=n[0],s=n[1];$.each(Object.keys(i),function(e,r){var n=i[r];t[o][r]=n}),$.each(s,function(e,r){a[o].push(r)})})});var s=[];if(t.length>0){s=t[0];for(var c=0;c<t.length-1;c++)s=getCountriesIntersection(s,t[c+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var c=0;c<a.length-1;c++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[c+1])}addMarkersToMap()}}function getMarkersIntersection(e,o){var r=[];return $.each(e,function(e,n){var t=n.country;$.each(o,function(e,o){var a=o.country;t==a&&r.push(n)})}),r}function getCountriesIntersection(e,o){var r=[];return $.each(Object.keys(e),function(n,t){$.each(Object.keys(o),function(o,n){t==n&&(r[t]=e[t])})}),r}function applyMultipleFiltersProgramattically(e){var o=Object.keys(e),r=o.length,n=[],t=[];$.each(o,function(o,r){e[r]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(r,t){n[r]=0,$.each(o,function(o,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!t[s])break;t[s].toLowerCase()==a.toLowerCase()&&t[c]==e[a]&&n[r]++}})}),$.each(jsonCountries,function(e,o){n[e]==r&&(a[o.country]=o.Count)}),reloadMap(a),$.each(jsonMarkers,function(r,n){t[r]=0,$.each(o,function(o,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[c]==e[a]&&t[r]++}})}),$.each(jsonMarkers,function(e,o){t[e]==r&&map.addMarker(e,{latLng:[o.Latitude,o.Longitude],name:o.desc,style:{fill:"green",r:mapRange(o.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,o){var r=e.filter(function(e){return void 0!==e}).length,n=[],t=[];$.each(jsonCountries,function(r,t){n[r]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(void 0==t[s])break;t[s]===o[e].Name&&t[c]==a&&n[r]++}})});var a=[];$.each(jsonCountries,function(e,o){n[e]==r&&(a[o.country]=o.Count)}),reloadMap(a),$.each(jsonMarkers,function(r,n){t[r]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==o[e].Name.toLowerCase()&&n[c]==a&&t[r]++}})}),$.each(jsonMarkers,function(e,o){t[e]==r&&map.addMarker(e,{latLng:[o.Latitude,o.Longitude],name:o.desc,style:{fill:"green",r:mapRange(o.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,o){var r=[];return $.each(e,function(e,n){r[e]=new Region(n,o)}),e}function generateColorsForTheRegions(e){var o=e.split("_")[0].toUpperCase(),r=[];return $.each(jsonCountries,function(e,n){if(n.country==o&&n.Regions){var t=n.Regions;$.each(t,function(e,o){r[o.name]=100})}}),r}function buildRegionTooltip(e){var o=regionTooltip;return o=o.replace("name",e.name)}function addRegionsToMap(e){var o=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,r){function n(){var e,o={};o[maps.region];for(e in maps.regions)o[e]=t[Math.floor(Math.random()*t.length)];return o}if(r.country==o&&r.Regions){var t=(r.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(n()),maps.series.regions[0].setValues(n())}})}var vectorMap,jsonFilters=[],minColorMap,maxColorMap,mDiv,mType,background,filteredMarkers,thereAreMarkers=!1,VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,o,r,n,t,a,i,s,c){if(background=s,mType=i,jsonCountries=[],jsonMarkers=[],mDiv=n,minColorMap=t,maxColorMap=a,"countries"==c)jsonCountries=readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=c)return void console.error("You must give as input a list of markers or countries!");thereAreMarkers=!0,jsonMarkers=readMarkersFromJSON(e),filteredMarkers=jsonMarkers,numMarkers=jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}auxColors="countries"==c?generateColorsForTheCountries():[];var u={vertical:!0};markersWithLegend={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:u},markersWithoutLegend={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]},finalMarkersInMap=markersWithLegend,"markers"==c&&(finalMarkersInMap=markersWithoutLegend),map=new jvm.Map({container:$("#"+n),map:mType,backgroundColor:background,onRegionClick:function(e,o){countryCode=o.toLowerCase();var r=countryCode+"_mill_en";switchMap(r)},onMarkerTipShow:function(e,o,r){var n=buildMarkerTooltip(jsonMarkers,jsonMarkers[r]);o.html(n)},onRegionTipShow:function(e,o,r){var n=-1;if($.each(jsonCountries,function(e,o){return o.name===r?void(n=o):void 0}),-1!=n){var t=buildCountryTooltip(o,n);o.html(t)}else o.html(o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),"markers"==c&&(filteredMarkers=jsonMarkers,addMarkersToMap())};var Country=function(e){var o=e.attributes,r=this;$.each(Object.keys(o),function(e,n){r[n]=o[n]}),e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"},numFilters=0,Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,o,r){var o="../mappingJSON/mappingCountriesSample.json",r="../mappingJSON/mappingMarkersSample.json";return o?r?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,o),jsonMapMarkers(e,r)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var o=JSON.stringify(e),r="http://serverFiltering.com/?data="+encodeURIComponent(o);r="../json/countries_plus_markers2.json",$.getJSON(r,function(e){jsonCountries=readCountriesFromJSON(e.countries);var o=generateColorsForTheCountries(jsonCountries);reloadMap(o),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})};var Marker=function(e){var o=e.attributes,r=this;$.each(Object.keys(o),function(e,n){r[n]=o[n]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"},Region=function(e,o){this.Region=e.name,this.country=o,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,