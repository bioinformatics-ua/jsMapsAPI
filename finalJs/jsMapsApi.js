function mapRange(e,t,r,o,n){return o+(n-o)*(e-t)/(r-t)}function buildCountryTooltip(e,t){var r=countryTooltip;return $.each(Object.keys(t),function(e,o){r=r.replace(o,t[o])}),r}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,t){map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function jsonMapCountries(e,t){var r=[];$.getJSON(t,function(t){$.each(e,function(e,o){var n=o[t.country],a=0;r[e]=new Country("",n,a)}),mappingCountries=r,console.log(mappingCountries)})}function jsonMapMarkers(e,t){var r=[];$.getJSON(t,function(t){$.each(e,function(e,o){var n=o[t.country],a=0,i=o[t.Latitude],s=o[t.Longitude];r[e]=new Marker("",n,a,i,s)}),mappingMarkers=r,console.log(mappingMarkers)})}function findMapById(e){var t=null;return $.each(vMaps,function(r,o){o.id==e&&(t=o)}),t}function removeBackButton(){$(".jvectormap-goback").remove()}function readMarkersFromJSON(e){var t=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,r){t.push(new Marker(r));var o=t[e].Count;o>maxCount&&(maxCount=o),o<minCount&&(minCount=o)}),t}function buildMarkerTooltip(e,t){var r=markerTooltip;return $.each(Object.keys(t),function(e,o){r=r.replace(o,t[o])}),r}function getMarkersIntersection(e,t){var r=[];return $.each(e,function(e,o){var n=o.country;$.each(t,function(e,t){var a=t.country;n==a&&r.push(o)})}),r}function getCountriesIntersection(e,t){var r=[];return $.each(Object.keys(e),function(o,n){$.each(Object.keys(t),function(t,o){n==o&&(r[n]=e[n])})}),r}function applyMultipleFiltersProgramattically(e){var t=Object.keys(e),r=t.length,o=[],n=[];$.each(t,function(t,r){e[r]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(r,n){o[r]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[c]==e[a]&&o[r]++}})}),$.each(jsonCountries,function(e,t){o[e]==r&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(r,o){n[r]=0,$.each(t,function(t,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!o[s])break;o[s].toLowerCase()==a.toLowerCase()&&o[c]==e[a]&&n[r]++}})}),$.each(jsonMarkers,function(e,t){n[e]==r&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,t){var r=e.filter(function(e){return void 0!==e}).length,o=[],n=[];$.each(jsonCountries,function(r,n){o[r]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(void 0==n[s])break;n[s]===t[e].Name&&n[c]==a&&o[r]++}})});var a=[];$.each(jsonCountries,function(e,t){o[e]==r&&(a[t.country]=t.Count)}),reloadMap(a),$.each(jsonMarkers,function(r,o){n[r]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,c="Value"+i;if(!o[s])break;o[s].toLowerCase()==t[e].Name.toLowerCase()&&o[c]==a&&n[r]++}})}),$.each(jsonMarkers,function(e,t){n[e]==r&&map.addMarker(e,{latLng:[t.Latitude,t.Longitude],name:t.desc,style:{fill:"green",r:mapRange(t.Count,minCount,maxCount,minRadius,maxRadius)}})})}function buildRegionTooltip(e){var t=regionTooltip;return t=t.replace("name",e.name)}var vMaps=[],VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,t,r,o,n,a,i,s,c,u){if(vMaps.push(this),this.id=u,this.background=s,this.mType=i,this.datatype=c,this.jsonCountries=[],this.jsonMarkers=[],this.mDiv=o,this.minColorMap=n,this.maxColorMap=a,"countries"==c)this.jsonCountries=this.readCountriesFromJSON(e),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"../tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});else{if("markers"!=c)return void console.error("You must give as input a list of markers or countries!");this.thereAreMarkers=!0,this.jsonMarkers=readMarkersFromJSON(e),this.filteredMarkers=this.jsonMarkers,this.numMarkers=this.jsonMarkers.length,jQuery.ajax({url:"../tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1})}this.auxColors="countries"==this.datatype?this.generateColorsForTheCountries():[];var l={vertical:!0};markersWithLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount],legend:l},markersWithoutLegend={scale:[this.minColorMap,this.maxColorMap],values:[this.minCount,this.maxCount]},finalMarkersInMap=markersWithLegend,"markers"==this.datatype&&(finalMarkersInMap=markersWithoutLegend);var p=this;this.map=new jvm.Map({container:$("#"+p.mDiv),map:p.mType,backgroundColor:p.background,onRegionClick:function(e,t){countryCode=t.toLowerCase();var r=countryCode+"_mill_en";p.switchMap(r)},onMarkerTipShow:function(e,t,r){var o=buildMarkerTooltip(p.jsonMarkers,p.jsonMarkers[r]);t.html(o)},onRegionTipShow:function(e,t,r){var o=-1;if($.each(p.jsonCountries,function(e,t){return t.name===r?void(o=t):void 0}),-1!=o){var n=buildCountryTooltip(t,o);t.html(n)}else t.html(t.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[p.minColorMap,p.maxColorMap],attribute:"fill",values:this.auxColors}]}}),"markers"==c&&(this.filteredMarkers=this.jsonMarkers,this.addMarkersToMap(this.filteredMarkers))};var Country=function(e){var t=e.attributes,r=this;$.each(Object.keys(t),function(e,o){r[o]=t[o]}),e.Regions&&(this.Regions=this.readRegionsFromJSON(e.Regions,e.country)),this.name=e.name,this.count=+e.count,this.desc="abc"};VectorialMap.prototype.generateColorsForTheCountries=function(e){e||(e=this.jsonCountries);var t=[];return $.each(e,function(e,r){t[r.name]=r.count}),t},VectorialMap.prototype.readCountriesFromJSON=function(e){var t=[];this.minCount=1/0,this.maxCount=-(1/0);var r=this;return $.each(e,function(e,o){t.push(new Country(o)),t[e].count>r.maxCount&&(r.maxCount=t[e].count),t[e].count<r.minCount&&(r.minCount=t[e].count)}),t},VectorialMap.prototype.findCountryByName=function(e){var t=null;return $.each(this.jsonCountries,function(r,o){return o.name==e?t=o:void 0}),t},VectorialMap.prototype.readMinMax=function(e){var t=this;t.minCount=1/0,t.maxCount=-(1/0),$.each(e,function(e,r){r.count>t.maxCount&&(t.maxCount=r.count),r.count<t.minCount&&(t.minCount=r.count)})};var FiltersBox=function(e,t,r){this.id=e,this.map=t,this.filterType=r};FiltersBox.prototype.resetFiltersBox=function(){for(var e=this,t=0;t<this.filters.length;t++){var r="#fbox"+t+"-"+e.map;$(r).text(""),$(r).val("")}var o=findMapById(this.map);o.filteredMarkers=o.jsonMarkers,o.reloadMap(o.jsonCountries),"markers"==o.datatype&&o.addMarkersToMap()},FiltersBox.prototype.createFiltersBoxWithEnumeration=function(){var e=this;$.each(this.filters,function(t,r){var o=r.name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var n="";n+="<p><b>"+o+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+t+"-"+e.map+'"',n+=r.continuous?'placeholder="'+r.min+"..."+r.max+'" +>':'placeholder="'+r.values.join()+'" +>',n+="</div>",$("#"+e.id).append(n)});var t='<button id="'+e.id+'_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="'+e.id+'_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button>';$("#"+e.id).append(t),$("#"+e.id+"_apply_filters").click(function(){e.restoreInputBoxes();for(var t={},r=e.filters.length,o=0,n=0;r>n;n++){var a="#fbox"+n+"-"+e.map,i=$(a).val();""!==i?t[e.filters[n].name]=i:o++}o!=r&&e.filter(t)}),$("#"+e.id+"_reset_filters").click(function(){e.restoreInputBoxes(),e.resetFiltersBox()})},FiltersBox.prototype.createFiltersBoxCheckboxes=function(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(this.filters,function(e,t){function r(e){return"<p>"+JSON.stringify(e)+"</p>"}function o(){var e=$("p.status").empty();e.append(r(widget.checked()))}var n="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];t.continuous||$.each(t.values,function(e,t){a.push({id:e+1,label:t,isChecked:!1})});var i=t.name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(n).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(n).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",o()),o()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){restoreInputBoxes();for(var e={},t=jsonFiltersArray.length,r=0,o=0;o<jsonFiltersArray.length;o++){for(var n="#box"+(o+1),a=getSelectedItems(n),i=[],s=Object.keys(a),c=0;c<s.length;c++)i.push(a[s[c]].label);s.length>0?e[jsonFiltersArray[o].name]=i.join():r++}r!=t&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})},FiltersBox.prototype.getAllFilterValues=function(e){var t=this,r=[];if(-1!=String(e).indexOf(",")){console.log("enumeration");var o=String(e).split(",");$.each(o,function(e,o){if(-1!=o.indexOf("-")){console.log("range inside enumeration");var n=String(o).split("-");checkFilterValuesAreValid(filterObject,n);for(var a=n[0],i=n[1];i>=a;a++)r.push(a)}else{console.log("no range inside enumeration");var s=t.checkFilterValuesAreValid(filterObject,[o]);s&&r.push(o)}})}else if(-1!=e.indexOf("-"))for(var n=String(e).split("-"),a=t.checkFilterValuesAreValid(filterObject,n),i=n[0],s=n[1];s>=i;i++)r.push(i);else{var a=t.checkFilterValuesAreValid(filterObject,[e]);a&&r.push(e)}return r},FiltersBox.prototype.checkWhatCountriesToAdd=function(e,t,r){var o=[];return $.each(r.jsonCountries,function(r,n){$.each(Object.keys(n),function(r,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==t&&o.push(n)})}),o},FiltersBox.prototype.checkWhatMarkersToAdd=function(e,t,r){var o=[];return $.each(r.jsonMarkers,function(r,n){$.each(Object.keys(n),function(r,a){a.toLowerCase()==e.name.toLowerCase()&&n[a]==t&&o.push(n)})}),o},FiltersBox.prototype.checkWhatCountriesMarkersToAdd=function(e,t,r){var o=[],n=[];return"countries"==r.datatype?o=this.checkWhatCountriesToAdd(e,t,r):n=this.checkWhatMarkersToAdd(e,t,r),[o,n]},FiltersBox.prototype.checkFilterNameIsValid=function(e){var t=!1;return $.each(this.filters,function(r,o){return o.name.toLowerCase()===e.toLowerCase()?(filterObject=o,void(t=!0)):void 0}),t},FiltersBox.prototype.restoreInputBoxes=function(){for(var e=this,t=0;t<this.filters.length;t++)$("#fbox"+t+"-"+e.map).parent().removeClass("has-error")},FiltersBox.prototype.checkFilterValuesAreValid=function(e,t){var r=this,o=!0;if(1==e.continuous){var n=e.min,a=e.max;$.each(t,function(t,i){return n>+i||+i>a?(o=!1,void r.highlightInputBoxError(e,i)):void 0})}else $.each(t,function(t,n){o=!1,$.each(e.values,function(e,t){return t==n?void(o=!0):void 0}),o||r.highlightInputBoxError(e,n)});return o},FiltersBox.prototype.highlightInputBoxError=function(e,t){var r=this;console.log("Invalid value for the filter: "+t);var o=e.name;$.each(r.filters,function(e,t){o==t.name&&$("#fbox"+e+"-"+r.map).parent().addClass("has-error")})},FiltersBox.prototype.readFiltersFromJSON=function(e){var t=[];$.each(e,function(e,r){t.push(new Filter(r))}),this.filters=t};var Filter=function(e){this.name=e.name,"false"==e.continuous?(this.values=[],this.values=e.values,this.continuous=!1):(this.continuous=!0,this.min=e.min,this.max=e.max)},mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,t,r){var t="../mappingJSON/mappingCountriesSample.json",r="../mappingJSON/mappingMarkersSample.json";return t?r?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,t),jsonMapMarkers(e,r)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var t=JSON.stringify(e),r="http://serverFiltering.com/?data="+encodeURIComponent(t);r="../json/countries_plus_markers2.json",$.getJSON(r,function(e){jsonCountries=readCountriesFromJSON(e.countries);var t=generateColorsForTheCountries(jsonCountries);reloadMap(t),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})},VectorialMap.prototype.reloadMap=function(e){var t=this;t.jsonCountries.length>0?(t.readMinMax(e),colors=t.generateColorsForTheCountries(e)):colors=[],$("#"+t.mDiv).empty(),t.map=new jvm.Map({map:t.mType,backgroundColor:t.background,container:$("#"+t.mDiv),onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";t.switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(t.jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(t.jsonCountries,function(e,t){return t.name===o?void(n=t):void 0}),-1!=n){var a=buildCountryTooltip(r,n);r.html(a)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[t.minColorMap,t.maxColorMap],attribute:"fill",values:colors}]}}),t.thereAreMarkers&&t.addMarkersToMap()},VectorialMap.prototype.removeTooltip=function(){$(".jvectormap-tip").remove()},VectorialMap.prototype.switchMap=function(e){$("#"+this.mDiv).empty(),this.removeTooltip();var t="countries"==dataType?this.generateColorsForTheCountries(this.jsonCountries):[],r=this;this.map=new jvm.Map({map:e,backgroundColor:r.background,container:$("#"+r.mDiv),onMarkerTipShow:function(e,t,o){var n=buildMarkerTooltip(r.jsonMarkers,o);t.html(n)},onRegionTipShow:function(t,o,n){var a=e.split("_")[0].toUpperCase(),i=-1;$.each(r.jsonCountries,function(e,t){return t.country==a?void(i=t):void 0});var s,c=!1;$.each(r.map.regions,function(e,t){return t.name==n?(s=t,void(c=!0)):void 0}),o.html(c?buildRegionTooltip(s):o.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[r.minColorMap,r.maxColorMap],attribute:"fill",values:t}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+this.mDiv).empty(),r.removeTooltip(),r.reloadMap(r.auxColors)}),this.thereAreMarkers&&this.addMarkersToMap(this.filteredMarkers)};var Marker=function(e){var t=e.attributes,r=this;$.each(Object.keys(t),function(e,o){r[o]=t[o]}),this.country=e.country,this.count=+e.count,this.latitude=e.latitude,this.longitude=e.longitude,this.icon=e.icon,this.desc="abc"};VectorialMap.prototype.addMarkersToMap=function(){var e=[];$.each(this.filteredMarkers,function(t,r){var o={latLng:[r.latitude,r.longitude],name:r.desc,style:{r:mapRange(r.count,minCount,maxCount,minRadius,maxRadius),image:"../img/"+r.icon+".png"}};e.push(o)}),this.map.addMarkers(e)},FiltersBox.prototype.filter=function(e){var t=this,r=Object.keys(e),o=r.length,n=new Array,a=new Array;for(u=0;o>u;u++)n[u]=new Array;var i=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(i=!0,t.resetFilters(),void t.resetFiltersBox()):void 0}),!i){var s=findMapById(this.map);if($.each(r,function(r,o){if(!t.checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var i=e[o],c=t.getAllFilterValues(i);0!=c.length&&(a[r]=new Array,$.each(c,function(e,o){var i=t.checkWhatCountriesMarkersToAdd(filterObject,o,s),c=i[0],u=i[1];$.each(Object.keys(c),function(e,t){var o=c[t];n[r][t]=o}),$.each(u,function(e,t){a[r].push(t)})}))}),"countries"==s.datatype){var c=[];if(n.length>0){c=n[0];for(var u=0;u<n.length-1;u++)c=getCountriesIntersection(c,n[u+1])}s.reloadMap(c)}else if(0!=a.length){if(filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var u=0;u<a.length-1;u++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[u+1])}s.filteredMarkers=filteredMarkers,s.reloadMap()}}};var Region=function(e,t){this.region=e.name,this.country=t,this.desc="just a region..."};VectorialMap.prototype.readRegionsFromJSON=function(e,t){var r=[];return $.each(e,function(e,o){r.push(new Region(o,t))}),e},VectorialMap.prototype.generateColorsForTheRegions=function(e){var t=e.split("_")[0].toUpperCase(),r=[];return $.each(jsonCountries,function(e,o){if(o.country==t&&o.Regions){var n=o.Regions;$.each(n,function(e,t){r[t.name]=100})}}),r},VectorialMap.prototype.addRegionsToMap=function(e){var t=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,r){function o(){var e,t={};t[maps.region];for(e in maps.regions)t[e]=n[Math.floor(Math.random()*n.length)];return t}if(r.country==t&&r.Regions){var n=(r.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(o()),maps.series.regions[0].setValues(o())}})};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJjb3VudHJpZXMuanMiLCJmaWx0ZXJzLWF1eGlsaWFyeS5qcyIsImZpbHRlcnMuanMiLCJqc29uLW1hcHBpbmcuanMiLCJtYXBzLWF1eGlsaWFyeS5qcyIsIm1hcmtlcnMuanMiLCJtdWx0aXBsZS1maWx0ZXJzLmpzIiwicmVnaW9ucy5qcyIsImNyZWF0ZUZpbHRlcnMuanMiXSwibmFtZXMiOlsibWFwUmFuZ2UiLCJ2YWx1ZSIsImxvdzEiLCJoaWdoMSIsImxvdzIiLCJoaWdoMiIsImJ1aWxkQ291bnRyeVRvb2x0aXAiLCJjb3VudHJ5TmFtZSIsImNvdW50cnkiLCJmaW5hbFRvb2x0aXAiLCJjb3VudHJ5VG9vbHRpcCIsIiQiLCJlYWNoIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4IiwiYXR0ciIsInJlcGxhY2UiLCJnZXRTZWxlY3RlZEl0ZW1zIiwiYm94SUQiLCJkcm9wZG93bkNoZWNrYm94IiwicmVzZXRGaWx0ZXJzIiwiY29sb3JzIiwiZ2VuZXJhdGVDb2xvcnNGb3JUaGVDb3VudHJpZXMiLCJyZWxvYWRNYXAiLCJqc29uTWFya2VycyIsImN1cnJlbnRNYXJrZXIiLCJtYXAiLCJhZGRNYXJrZXIiLCJsYXRMbmciLCJMYXRpdHVkZSIsIkxvbmdpdHVkZSIsIm5hbWUiLCJkZXNjIiwic3R5bGUiLCJmaWxsIiwiciIsIkNvdW50IiwibWluQ291bnQiLCJtYXhDb3VudCIsIm1pblJhZGl1cyIsIm1heFJhZGl1cyIsImpzb25NYXBDb3VudHJpZXMiLCJqc29uIiwiY291bnRyaWVzTWFwcGluZ0pzb24iLCJjb3VudHJpZXMiLCJnZXRKU09OIiwianNvbk1hcHBpbmciLCJjdXJyZW50SlNPTiIsImNvdW50IiwiQ291bnRyeSIsIm1hcHBpbmdDb3VudHJpZXMiLCJjb25zb2xlIiwibG9nIiwianNvbk1hcE1hcmtlcnMiLCJtYXJrZXJzTWFwcGluZ0pzb24iLCJtYXJrZXJzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJNYXJrZXIiLCJtYXBwaW5nTWFya2VycyIsImZpbmRNYXBCeUlkIiwiaWQiLCJyZXQiLCJ2TWFwcyIsInJlbW92ZUJhY2tCdXR0b24iLCJyZW1vdmUiLCJyZWFkTWFya2Vyc0Zyb21KU09OIiwiSW5maW5pdHkiLCJjdXJyZW50SlNPTk1hcmtlciIsInB1c2giLCJjdXJyZW50Q291bnRWYWx1ZSIsImJ1aWxkTWFya2VyVG9vbHRpcCIsIm1hcmtlciIsIm1hcmtlclRvb2x0aXAiLCJnZXRNYXJrZXJzSW50ZXJzZWN0aW9uIiwibWFya2Vyc0dyb3VwMSIsIm1hcmtlcnNHcm91cDIiLCJtYXJrZXIxIiwibWFya2VyMUNvdW50cnkiLCJtYXJrZXIyIiwibWFya2VyMkNvdW50cnkiLCJnZXRDb3VudHJpZXNJbnRlcnNlY3Rpb24iLCJjb3VudHJpZXNHcm91cDEiLCJjb3VudHJpZXNHcm91cDIiLCJjb3VudHJ5TmFtZTEiLCJjb3VudHJ5TmFtZTIiLCJhcHBseU11bHRpcGxlRmlsdGVyc1Byb2dyYW1hdHRpY2FsbHkiLCJmaWx0ZXJzVG9BcHBseSIsIm51bUZpbHRlcnNUb0FwcGx5IiwibGVuZ3RoIiwiY291bnRyaWVzSGF2ZUZpbHRlciIsIm1hcmtlcnNIYXZlRmlsdGVyIiwiZmlsdGVyTmFtZSIsInJlbW92ZUFsbE1hcmtlcnMiLCJqc29uQ291bnRyaWVzIiwiY291bnRyeUluZGV4IiwiY3VycmVudENvdW50cnkiLCJjdXJyZW50RmlsdGVyTmFtZSIsImkiLCJjdXJyZW50TmFtZVRvQ2hlY2siLCJjdXJyZW50VmFsdWUiLCJ0b0xvd2VyQ2FzZSIsIm1hcmtlckluZGV4IiwiYXBwbHlNdWx0aXBsZUZpbHRlcnMiLCJzZWxlY3RlZE11bHRpcGxlRmlsdGVycyIsImpzb25GaWx0ZXJzIiwiZmlsdGVyIiwidW5kZWZpbmVkIiwiY3VycmVudEZpbHRlclZhbHVlIiwiTmFtZSIsImJ1aWxkUmVnaW9uVG9vbHRpcCIsInJlZ2lvbiIsInJlZ2lvblRvb2x0aXAiLCJWZWN0b3JpYWxNYXAiLCJwcm90b3R5cGUiLCJjcmVhdGVNYXAiLCJpbnB1dEpTT04iLCJtYXBEaXYiLCJtaW5Db2xvciIsIm1heENvbG9yIiwibWFwVHlwZSIsImJhY2tncm91bmRDb2xvciIsImRhdGFUeXBlIiwidGhpcyIsImJhY2tncm91bmQiLCJtVHlwZSIsImRhdGF0eXBlIiwibURpdiIsIm1pbkNvbG9yTWFwIiwibWF4Q29sb3JNYXAiLCJyZWFkQ291bnRyaWVzRnJvbUpTT04iLCJqUXVlcnkiLCJhamF4IiwidXJsIiwic3VjY2VzcyIsInJlc3VsdCIsImFzeW5jIiwiZXJyb3IiLCJ0aGVyZUFyZU1hcmtlcnMiLCJmaWx0ZXJlZE1hcmtlcnMiLCJudW1NYXJrZXJzIiwiYXV4Q29sb3JzIiwibGVnZW5kVmFyIiwidmVydGljYWwiLCJtYXJrZXJzV2l0aExlZ2VuZCIsInNjYWxlIiwidmFsdWVzIiwibGVnZW5kIiwibWFya2Vyc1dpdGhvdXRMZWdlbmQiLCJmaW5hbE1hcmtlcnNJbk1hcCIsInZNYXAiLCJqdm0iLCJNYXAiLCJjb250YWluZXIiLCJvblJlZ2lvbkNsaWNrIiwiZSIsImNvZGUiLCJjb3VudHJ5Q29kZSIsIm5ld01hcCIsInN3aXRjaE1hcCIsIm9uTWFya2VyVGlwU2hvdyIsImxhYmVsIiwiaHRtbCIsIm9uUmVnaW9uVGlwU2hvdyIsInNlbGVjdGVkQ291bnRyeSIsInNlcmllcyIsInJlZ2lvbnMiLCJhdHRyaWJ1dGUiLCJhZGRNYXJrZXJzVG9NYXAiLCJjb3VudHJ5T2JqZWN0IiwiYXR0cmlidXRlcyIsIlJlZ2lvbnMiLCJyZWFkUmVnaW9uc0Zyb21KU09OIiwiY291bnRyeUNvbG9ycyIsImNvdW50cmllc0pTT04iLCJmaW5kQ291bnRyeUJ5TmFtZSIsInJldHVybkNvdW50cnkiLCJyZWFkTWluTWF4IiwiRmlsdGVyc0JveCIsImZpbHRlclR5cGUiLCJyZXNldEZpbHRlcnNCb3giLCJmQm94IiwiZmlsdGVycyIsImN1cnJlbnRJZCIsInRleHQiLCJ2YWwiLCJjcmVhdGVGaWx0ZXJzQm94V2l0aEVudW1lcmF0aW9uIiwiY3VycmVudEZpbHRlciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0FwcGVuZCIsImNvbnRpbnVvdXMiLCJtaW4iLCJtYXgiLCJqb2luIiwiYXBwZW5kIiwidGV4dFRvQXBwZW5kIiwiY2xpY2siLCJyZXN0b3JlSW5wdXRCb3hlcyIsImpzb25PYmplY3QiLCJudW1GaWx0ZXJzIiwiZW1wdHlGaWx0ZXJzIiwiY3JlYXRlRmlsdGVyc0JveENoZWNrYm94ZXMiLCJwIiwid2F0IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZVN0YXR1cyIsIiRwIiwiZW1wdHkiLCJ3aWRnZXQiLCJjaGVja2VkIiwidGFiIiwiaXNDaGVja2VkIiwiZGF0YSIsImF1dG9zZWFyY2giLCJoaWRlSGVhZGVyIiwic2hvd05iU2VsZWN0ZWQiLCJ0ZW1wbGF0ZUJ1dHRvbiIsIm9uIiwianNvbkZpbHRlcnNBcnJheSIsInNlbGVjdGVkSXRlbXMiLCJpdGVtc0FycmF5IiwiaiIsImdldEFsbEZpbHRlclZhbHVlcyIsImZpbHRlclZhbHVlIiwicmV0dXJuUGFydHMiLCJTdHJpbmciLCJpbmRleE9mIiwiZW51bWVyYXRpb25QYXJ0cyIsInNwbGl0IiwiY3VycmVudEVudW1lcmF0aW9uIiwicmFuZ2VQYXJ0cyIsImNoZWNrRmlsdGVyVmFsdWVzQXJlVmFsaWQiLCJmaWx0ZXJPYmplY3QiLCJ2YWxpZCIsInN1YlBhcnRzIiwiY2hlY2tXaGF0Q291bnRyaWVzVG9BZGQiLCJzZWxlY3RlZEZpbHRlciIsImNoZWNrV2hhdE1hcmtlcnNUb0FkZCIsImNoZWNrV2hhdENvdW50cmllc01hcmtlcnNUb0FkZCIsImNvdW50cmllc1RvQWRkIiwibWFya2Vyc1RvQWRkIiwiY2hlY2tGaWx0ZXJOYW1lSXNWYWxpZCIsInBhcmVudCIsInJlbW92ZUNsYXNzIiwiZmlsdGVyVmFsdWVzIiwiaGlnaGxpZ2h0SW5wdXRCb3hFcnJvciIsImZpbHRlclRvRmluZCIsImFkZENsYXNzIiwicmVhZEZpbHRlcnNGcm9tSlNPTiIsImZpbHRlcnNKU09OIiwiRmlsdGVyIiwicmVnaXN0ZXJUcmFuc2Zvcm1lciIsImpzb25Mb2NhdGlvbiIsImZpbHRlck9uU2VydmVyIiwiZmlsdGVyc1N0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZVRvb2x0aXAiLCJyZWdpb25Db2xvcnMiLCJyZWdpb25OYW1lIiwiY3VycmVudE1hcCIsInNlbGVjdGVkUmVnaW9uIiwicmVnaW9uRm91bmQiLCJjdXJyZW50UmVnaW9uIiwibWFya2VyT2JqZWN0IiwiaWNvbiIsIm1hcmtlcnNKU09OQXJyYXkiLCJjdXJyZW50TWFya2VySlNPTiIsImltYWdlIiwiYWRkTWFya2VycyIsImlucHV0QXJncyIsIm51bWJlcktleXMiLCJjb3VudHJpZXNCeUZpbHRlciIsIkFycmF5IiwibWFya2Vyc0J5RmlsdGVyIiwiZXhpdCIsImZpbmFsUGFydHMiLCJwYXJ0IiwiY2hlY2tSZXR1cm4iLCJjb3VudHJpZXNBdXgiLCJtYXJrZXJzQXV4IiwiY3VycmVudEtleSIsImtleVZhbHVlIiwiZmluYWxDb3VudHJpZXMiLCJSZWdpb24iLCJyZWdpb25PYmplY3QiLCJyZWdpb25zQXJyIiwiZ2VuZXJhdGVDb2xvcnNGb3JUaGVSZWdpb25zIiwiaXNvQ29kZSIsImFkZFJlZ2lvbnNUb01hcCIsImtleSIsImdlbmVyYXRlQ29sb3JzIiwibWFwcyIsInBhbGV0dGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzZXRWYWx1ZXMiXSwibWFwcGluZ3MiOiJBQWdKQSxRQUFBQSxVQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE1BQUFELElBQUFDLEVBQUFELElBQUFILEVBQUFDLElBQUFDLEVBQUFELEdDOUhBLFFBQUFJLHFCQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEdBQUFDLGNBSUEsT0FIQUMsR0FBQUMsS0FBQUMsT0FBQUMsS0FBQU4sR0FBQSxTQUFBTyxFQUFBQyxHQUNBUCxFQUFBQSxFQUFBUSxRQUFBRCxFQUFBUixFQUFBUSxNQUVBUCxFQ3NGQSxRQUFBUyxrQkFBQUMsR0FDQSxNQUFBUixHQUFBUSxHQUFBQyxpQkFB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QUNBLEdBQUFMLEdBQUF0RSxFQUFBMkUsT0FFQWpLLEdBQUFDLEtBQUEySixFQUFBLFNBQUF4SixFQUFBMlAsR0FDQUwsRUFBQUssRUFBQTFPLE1BQUEsU0FLQXFPLEdBVUFuSixhQUFBQyxVQUFBaUwsZ0JBQUEsU0FBQUMsR0FFQSxHQUFBRixHQUFBRSxFQUFBN0QsTUFBQSxLQUFBLEdBQUExQyxhQUVBbkwsR0FBQUMsS0FBQW1GLGNBQUEsU0FBQWhGLEVBQUFrRixHQU1BLFFBQUFxTSxLQUNBLEdBQ0FELEdBREEvUSxJQUVBQSxHQUFBaVIsS0FBQXZMLE9BRUEsS0FBQXFMLElBQUFFLE1BQUFoSSxRQUNBakosRUFBQStRLEdBQUFHLEVBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFILEVBQUE5TSxRQUVBLE9BQUFwRSxHQWJBLEdBQUEyRSxFQUFBekYsU0FBQTJSLEdBRUFsTSxFQUFBMkUsUUFBQSxDQUNBLEdBQ0E0SCxJQURBdk0sRUFBQTJFLFNBQ0EsVUFBQSxVQUFBLFVBQUEsVUFBQSxXQVdBeEgsU0FBQUMsSUFBQWlQLEtBRUFDLEtBQUFqSSxPQUFBQyxRQUFBLEdBQUFxSSxVQUFBTiIsImZpbGUiOiJqc01hcHNBcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdk1hcHMgPSBbXTtcblxudmFyIFZlY3RvcmlhbE1hcCA9IGZ1bmN0aW9uKCkge307XG5cbi8vIFZlY3RvcmlhbE1hcCBQcm90b3R5cGVcblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuY3JlYXRlTWFwID0gZnVuY3Rpb24oaW5wdXRKU09OLCBtaW5SYWRpdXMsIG1heFJhZGl1cywgbWFwRGl2LCBtaW5Db2xvciwgbWF4Q29sb3IsIG1hcFR5cGUsIGJhY2tncm91bmRDb2xvciwgZGF0YVR5cGUsIGlkKSB7XG4gICAgLy8gYWRkIHRoZSBtYXAgdG8gdGhlIFZNYXBzIGFycmF5XG4gICAgdk1hcHMucHVzaCh0aGlzKTtcblxuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgdGhpcy5tVHlwZSA9IG1hcFR5cGU7XG4gICAgdGhpcy5kYXRhdHlwZSA9IGRhdGFUeXBlO1xuICAgIC8vIGNvdW50cmllcyBsaXN0XG4gICAgdGhpcy5qc29uQ291bnRyaWVzID0gW107XG4gICAgLy8gbWFya2VycyBsaXN0XG4gICAgdGhpcy5qc29uTWFya2VycyA9IFtdO1xuICAgIC8vIGlkIG9mIHRoZSBtYVxuICAgIHRoaXMubURpdiA9IG1hcERpdjtcbiAgICAvLyBhc3NpZ24gdGhlIGNvbG9ycyBmb3IgdGhlIHJhbmdlXG4gICAgdGhpcy5taW5Db2xvck1hcCA9IG1pbkNvbG9yO1xuICAgIHRoaXMubWF4Q29sb3JNYXAgPSBtYXhDb2xvcjtcblxuICAgIGlmIChkYXRhVHlwZSA9PSAnY291bnRyaWVzJykge1xuICAgICAgICB0aGlzLmpzb25Db3VudHJpZXMgPSB0aGlzLnJlYWRDb3VudHJpZXNGcm9tSlNPTihpbnB1dEpTT04pO1xuICAgICAgICAvLyBnZXQgdGhlIHRvb2x0aXAgdGVtcGxhdGVzXG4gICAgICAgIC8vIENPVU5UUlkgdG9vbHRpcFxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcuLi90b29sdGlwLXRlbXBsYXRlcy9jb3VudHJ5X3Rvb2x0aXAuaHRtbCcsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjb3VudHJ5VG9vbHRpcCA9IHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFJFR0lPTiB0b29sdGlwXG4gICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgIHVybDogJy4uL3Rvb2x0aXAtdGVtcGxhdGVzL3JlZ2lvbl90b29sdGlwLmh0bWwnLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVnaW9uVG9vbHRpcCA9IHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PSAnbWFya2VycycpIHtcbiAgICAgICAgdGhpcy50aGVyZUFyZU1hcmtlcnMgPSB0cnVlO1xuICAgICAgICB0aGlzLmpzb25NYXJrZXJzID0gcmVhZE1hcmtlcnNGcm9tSlNPTihpbnB1dEpTT04pO1xuICAgICAgICB0aGlzLmZpbHRlcmVkTWFya2VycyA9IHRoaXMuanNvbk1hcmtlcnM7XG4gICAgICAgIHRoaXMubnVtTWFya2VycyA9IHRoaXMuanNvbk1hcmtlcnMubGVuZ3RoO1xuICAgICAgICAvLyBNQVJLRVIgdG9vbHRpcFxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcuLi90b29sdGlwLXRlbXBsYXRlcy9tYXJrZXJfdG9vbHRpcC5odG1sJyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIG1hcmtlclRvb2x0aXAgPSByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBtdXN0IGdpdmUgYXMgaW5wdXQgYSBsaXN0IG9mIG1hcmtlcnMgb3IgY291bnRyaWVzIScpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZ2V0IHRoZSBDb3VudCB2YWx1ZSBmb3IgZWFjaCBDb3VudHJ5XG4gICAgdGhpcy5hdXhDb2xvcnMgPSAoKHRoaXMuZGF0YXR5cGU9PSdjb3VudHJpZXMnKSA/IHRoaXMuZ2VuZXJhdGVDb2xvcnNGb3JUaGVDb3VudHJpZXMoKSA6IFtdKTtcblxuICAgIC8vIG1hcmtlciBsZWdlbmRcbiAgICB2YXIgbGVnZW5kVmFyID0ge1xuICAgICAgICB2ZXJ0aWNhbDogdHJ1ZVxuICAgIH07XG5cbiAgICBtYXJrZXJzV2l0aExlZ2VuZCA9IHtcbiAgICAgICAgc2NhbGU6IFt0aGlzLm1pbkNvbG9yTWFwLCB0aGlzLm1heENvbG9yTWFwXSxcbiAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgdmFsdWVzOiBbdGhpcy5taW5Db3VudCwgdGhpcy5tYXhDb3VudF0sXG4gICAgICAgIC8vIGFkZCBhIGxlZ2VuZFxuICAgICAgICBsZWdlbmQ6IGxlZ2VuZFZhclxuICAgIH07XG5cbiAgICBtYXJrZXJzV2l0aG91dExlZ2VuZCA9IHtcbiAgICAgICAgc2NhbGU6IFt0aGlzLm1pbkNvbG9yTWFwLCB0aGlzLm1heENvbG9yTWFwXSxcbiAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgdmFsdWVzOiBbdGhpcy5taW5Db3VudCwgdGhpcy5tYXhDb3VudF1cbiAgICB9O1xuICAgIGZpbmFsTWFya2Vyc0luTWFwID0gbWFya2Vyc1dpdGhMZWdlbmQ7XG4gICAgaWYgKHRoaXMuZGF0YXR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgIGZpbmFsTWFya2Vyc0luTWFwID0gbWFya2Vyc1dpdGhvdXRMZWdlbmQ7XG4gICAgfVxuXG4gICAgdmFyIHZNYXAgPSB0aGlzO1xuXG4gICAgLy8gY3JlYXRlIGEgbmV3IE1hcFxuICAgIHRoaXMubWFwID0gbmV3IGp2bS5NYXAoe1xuICAgICAgICBjb250YWluZXI6ICQoJyMnICsgdk1hcC5tRGl2KSxcbiAgICAgICAgLy8gY29uZmlndXJhdGlvbiBvZiB0aGUgbWFpbiBtYXBcbiAgICAgICAgLy8gdHlwZSBvZiBtYXAgKHdvcmxkLCBFdXJvcGUsIFVTQSwgZXRjKVxuICAgICAgICBtYXA6IHZNYXAubVR5cGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdk1hcC5iYWNrZ3JvdW5kLFxuICAgICAgICAvLyB0cmlnZ2VyZWQgd2hlbiBhIG1hcmtlciBpcyBob3ZlcmVkXG4gICAgICAgIG9uUmVnaW9uQ2xpY2s6IGZ1bmN0aW9uKGUsIGNvZGUpIHtcbiAgICAgICAgICAgIGNvdW50cnlDb2RlID0gY29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIG5ld01hcCA9IGNvdW50cnlDb2RlICsgJ19taWxsX2VuJztcbiAgICAgICAgICAgIHZNYXAuc3dpdGNoTWFwKG5ld01hcCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTWFya2VyVGlwU2hvdzogZnVuY3Rpb24oZSwgbGFiZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBzZWxlY3Qgd2hhdCB0ZXh0IHRvIGRpc3BsYXkgd2hlbiBtYXJrZXIgaXMgaG92ZXJlZFxuICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkTWFya2VyVG9vbHRpcCh2TWFwLmpzb25NYXJrZXJzLCB2TWFwLmpzb25NYXJrZXJzW2luZGV4XSk7XG4gICAgICAgICAgICBsYWJlbC5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgcmVnaW9uIGlzIGhvdmVyZWRcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCBjb3VudHJ5TmFtZSwgY29kZSkge1xuICAgICAgICAgICAgLy8gY29kZSBjb250YWlucyB0aGUgY29kZSBvZiB0aGUgY291bnRyeSAoaS5lLiwgUFQsIEVTLCBGUiwgZXRjKVxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgJC5lYWNoKHZNYXAuanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5Lm5hbWUgPT09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJ5ID0gY3VycmVudENvdW50cnk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIG9jY3VycmVuY2Ugb2Ygc2V2ZXJhbCBzdHJpbmdzIGluc2lkZSB0aGUgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRDb3VudHJ5VG9vbHRpcChjb3VudHJ5TmFtZSwgc2VsZWN0ZWRDb3VudHJ5KTtcbiAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZS5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZS5odG1sKGNvdW50cnlOYW1lLmh0bWwoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgbWFya2VyczogW2ZpbmFsTWFya2Vyc0luTWFwXSxcbiAgICAgICAgICAgIHJlZ2lvbnM6IFt7XG4gICAgICAgICAgICAgICAgLy8gbWluIGFuZCBtYXggdmFsdWVzIG9mIGNvdW50XG4gICAgICAgICAgICAgICAgc2NhbGU6IFt2TWFwLm1pbkNvbG9yTWFwLCB2TWFwLm1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHRoaXMuYXV4Q29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBkcmF3IG1hcmtlcnMgb24gdGhlIG1hcFxuICAgIGlmIChkYXRhVHlwZSA9PSAnbWFya2VycycpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJlZE1hcmtlcnMgPSB0aGlzLmpzb25NYXJrZXJzO1xuICAgICAgICB0aGlzLmFkZE1hcmtlcnNUb01hcCh0aGlzLmZpbHRlcmVkTWFya2Vycyk7XG4gICAgfVxuXG5cbn07XG5cbi8vIEF1eGlsaWFyeSBmdW5jdGlvbiB0byB0cmFuc3Bvc2UgYSB2YWx1ZSBmcm9tIGFuIGluaXRpYWwgcmFuZ2UgdG8gYW5vdGhlciByYW5nZVxuZnVuY3Rpb24gbWFwUmFuZ2UodmFsdWUsIGxvdzEsIGhpZ2gxLCBsb3cyLCBoaWdoMikge1xuICAgIHJldHVybiBsb3cyICsgKGhpZ2gyIC0gbG93MikgKiAodmFsdWUgLSBsb3cxKSAvIChoaWdoMSAtIGxvdzEpO1xufVxuIiwidmFyIENvdW50cnkgPSBmdW5jdGlvbihjb3VudHJ5T2JqZWN0KSB7XG4gICAgLy8gcmVhZCBmcm9tIHRoZSBKU09OXG4gICAgLy8gYWRkIGF0dHJpYnV0ZXNcbiAgICB2YXIgYXR0cmlidXRlcyA9IGNvdW50cnlPYmplY3RbXCJhdHRyaWJ1dGVzXCJdO1xuICAgIHZhciBjb3VudHJ5ID0gdGhpcztcbiAgICAkLmVhY2goT2JqZWN0LmtleXMoYXR0cmlidXRlcyksIGZ1bmN0aW9uKGluZGV4LCBhdHRyKSB7XG4gICAgICAgIGNvdW50cnlbYXR0cl0gPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0pO1xuXG4gICAgLy8gdHJ5IHRvIHJlYWQgaXRzIHJlZ2lvbnMgaW4gY2FzZSBoZSBoYXMgYW55XG4gICAgaWYgKGNvdW50cnlPYmplY3QuUmVnaW9ucylcbiAgICAgICAgdGhpcy5SZWdpb25zID0gdGhpcy5yZWFkUmVnaW9uc0Zyb21KU09OKGNvdW50cnlPYmplY3QuUmVnaW9ucywgY291bnRyeU9iamVjdC5jb3VudHJ5KTtcblxuICAgIHRoaXMubmFtZSA9IGNvdW50cnlPYmplY3QubmFtZTtcbiAgICAvLyArIGlzIHVzZWQgdG8gYXNzdXJlIHRoYXQgYSBOdW1iZXIgaXMgYmVpbmcgcmVhZFxuICAgIHRoaXMuY291bnQgPSArY291bnRyeU9iamVjdC5jb3VudDtcbiAgICB0aGlzLmRlc2MgPSAnYWJjJztcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIGNvdW50cnkpIHtcbiAgICB2YXIgZmluYWxUb29sdGlwID0gY291bnRyeVRvb2x0aXA7XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKGNvdW50cnkpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuICAgICAgICBmaW5hbFRvb2x0aXAgPSBmaW5hbFRvb2x0aXAucmVwbGFjZShhdHRyLCBjb3VudHJ5W2F0dHJdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmluYWxUb29sdGlwO1xufVxuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLmdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzID0gZnVuY3Rpb24oY291bnRyaWVzKSB7XG4gICAgaWYgKCFjb3VudHJpZXMpXG4gICAgICAgIGNvdW50cmllcyA9IHRoaXMuanNvbkNvdW50cmllcztcbiAgICB2YXIgY291bnRyeUNvbG9ycyA9IFtdO1xuICAgICQuZWFjaChjb3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBjb3VudHJ5Q29sb3JzW2N1cnJlbnRDb3VudHJ5Lm5hbWVdID0gY3VycmVudENvdW50cnkuY291bnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50cnlDb2xvcnM7XG59O1xuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlYWRDb3VudHJpZXNGcm9tSlNPTiA9IGZ1bmN0aW9uKGNvdW50cmllc0pTT04pIHtcbiAgICB2YXIgY291bnRyaWVzID0gW107XG5cbiAgICB0aGlzLm1pbkNvdW50ID0gSW5maW5pdHk7XG4gICAgdGhpcy5tYXhDb3VudCA9IC1JbmZpbml0eTtcblxuICAgIHZhciB2TWFwID0gdGhpcztcblxuICAgICQuZWFjaChjb3VudHJpZXNKU09OLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgY291bnRyaWVzLnB1c2gobmV3IENvdW50cnkoY3VycmVudENvdW50cnkpKTtcblxuICAgICAgICBpZiAoY291bnRyaWVzW2luZGV4XS5jb3VudCA+IHZNYXAubWF4Q291bnQpXG4gICAgICAgICAgICB2TWFwLm1heENvdW50ID0gY291bnRyaWVzW2luZGV4XS5jb3VudDtcblxuICAgICAgICBpZiAoY291bnRyaWVzW2luZGV4XS5jb3VudCA8IHZNYXAubWluQ291bnQpXG4gICAgICAgICAgICB2TWFwLm1pbkNvdW50ID0gY291bnRyaWVzW2luZGV4XS5jb3VudDtcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnRyaWVzO1xufVxuXG4vLyByZXR1cm4gdGhlIGNvdW50cnkgd2hvc2UgbmFtZSBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnRcblxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5maW5kQ291bnRyeUJ5TmFtZSA9IGZ1bmN0aW9uKGNvdW50cnlOYW1lKSB7XG4gICAgdmFyIHJldHVybkNvdW50cnkgPSBudWxsO1xuICAgICQuZWFjaCh0aGlzLmpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBpZiAoY3VycmVudENvdW50cnkubmFtZSA9PSBjb3VudHJ5TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuQ291bnRyeSA9IGN1cnJlbnRDb3VudHJ5O1xuICAgICAgICAgICAgcmV0dXJuIHJldHVybkNvdW50cnk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV0dXJuQ291bnRyeTtcbn1cblxuLy8gcmVhZCB0aGUgbWluIGFuZCBtYXggY291bnQgb2YgdGhlIGNvdW50cmlzXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlYWRNaW5NYXggPSBmdW5jdGlvbihjb3VudHJpZXMpIHtcbiAgICB2YXIgdk1hcCA9IHRoaXM7XG4gICAgdk1hcC5taW5Db3VudCA9IEluZmluaXR5O1xuICAgIHZNYXAubWF4Q291bnQgPSAtSW5maW5pdHk7XG5cbiAgICAvLyBmaW5kIGNvdW50cnkgYnkgbmFtZVxuICAgICQuZWFjaChjb3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICAvLyBmaW5kIHRoZSBjb3VudHJ5IGJ5IGl0cyBuYW1lXG4gICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5jb3VudCA+IHZNYXAubWF4Q291bnQpXG4gICAgICAgICAgICB2TWFwLm1heENvdW50ID0gY3VycmVudENvdW50cnkuY291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LmNvdW50IDwgdk1hcC5taW5Db3VudClcbiAgICAgICAgICAgIHZNYXAubWluQ291bnQgPSBjdXJyZW50Q291bnRyeS5jb3VudDtcbiAgICB9KTtcbn1cbiIsIkZpbHRlcnNCb3gucHJvdG90eXBlLmdldEFsbEZpbHRlclZhbHVlcyA9IGZ1bmN0aW9uKGZpbHRlclZhbHVlKSB7XG4gICAgdmFyIGZCb3ggPSB0aGlzO1xuICAgIHZhciByZXR1cm5QYXJ0cyA9IFtdO1xuICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYW4gZW51bWVyYXRpb24gKGNvbW1hLXNlcGFyYXRlZCB2YWx1ZXMgYW5kL29yIHJhbmdlcylcbiAgICBpZiAoU3RyaW5nKGZpbHRlclZhbHVlKS5pbmRleE9mKFwiLFwiKSAhPSAtMSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZW51bWVyYXRpb24nKTtcbiAgICAgICAgLy8gZ2V0IGFsbCB0aGUgZW51bWVyYXRlZCB2YWx1ZXMgKGNhbiBiZSBzaW5ndWxhciBvciByYW5nZSlcbiAgICAgICAgdmFyIGVudW1lcmF0aW9uUGFydHMgPSBTdHJpbmcoZmlsdGVyVmFsdWUpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhIHNpbXBsZSB2YWx1ZSBvciBhIHJhbmdlXG4gICAgICAgICQuZWFjaChlbnVtZXJhdGlvblBhcnRzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEVudW1lcmF0aW9uKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgcmFuZ2UuLi5cbiAgICAgICAgICAgIGlmIChjdXJyZW50RW51bWVyYXRpb24uaW5kZXhPZihcIi1cIikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmFuZ2UgaW5zaWRlIGVudW1lcmF0aW9uJyk7XG4gICAgICAgICAgICAgICAgLy8gYWxsIHRoZSByYW5nZSBwYXJ0c1xuICAgICAgICAgICAgICAgIHZhciByYW5nZVBhcnRzID0gU3RyaW5nKGN1cnJlbnRFbnVtZXJhdGlvbikuc3BsaXQoXCItXCIpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBleHRyZW1lIHZhbHVlcyBhcmUgdmFsaWRcbiAgICAgICAgICAgICAgICBjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlck9iamVjdCwgcmFuZ2VQYXJ0cyk7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgdmFsdWVzIGJldHdlZW4gdGhvc2UgdHdvIG51bWJlcnNcbiAgICAgICAgICAgICAgICAvLyBhbmQgYWRkIHRoZW1cbiAgICAgICAgICAgICAgICB2YXIgbWluID0gcmFuZ2VQYXJ0c1swXTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmFuZ2VQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgbWluIDw9IG1heDsgbWluKyspXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSBhIHJhbmdlXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNpbmdsZSB2YWx1ZSBpcyB2YWxpZFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyByYW5nZSBpbnNpZGUgZW51bWVyYXRpb24nKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSBmQm94LmNoZWNrRmlsdGVyVmFsdWVzQXJlVmFsaWQoZmlsdGVyT2JqZWN0LFtjdXJyZW50RW51bWVyYXRpb25dKTtcbiAgICAgICAgICAgICAgICBpZih2YWxpZCkgcmV0dXJuUGFydHMucHVzaChjdXJyZW50RW51bWVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBqdXN0IGEgc2luZ2xlIHBhcnRcbiAgICAgICAgaWYgKGZpbHRlclZhbHVlLmluZGV4T2YoXCItXCIpICE9IC0xKSB7XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGEgcmFuZ2VcbiAgICAgICAgICAgIHZhciBzdWJQYXJ0cyA9IFN0cmluZyhmaWx0ZXJWYWx1ZSkuc3BsaXQoXCItXCIpO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGV4dHJlbWUgdmFsdWVzIGFyZSB2YWxpZFxuICAgICAgICAgICAgdmFyIHZhbGlkID0gZkJveC5jaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkKGZpbHRlck9iamVjdCwgc3ViUGFydHMpO1xuICAgICAgICAgICAgLy8gZ2V0IGFsbCB0aGUgdmFsdWVzIGJldHdlZW4gdGhvc2UgdHdvIG51bWJlcnNcbiAgICAgICAgICAgIHZhciBtaW4gPSBzdWJQYXJ0c1swXTtcbiAgICAgICAgICAgIHZhciBtYXggPSBzdWJQYXJ0c1sxXTtcbiAgICAgICAgICAgIGZvciAoOyBtaW4gPD0gbWF4OyBtaW4rKykge1xuICAgICAgICAgICAgICAgIHJldHVyblBhcnRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGp1c3QgYSBzaW5nbGUgdmFsdWVcbiAgICAgICAgICAgIC8vIGNoZWNrIHRoZSB2YWxpZGl0eSBvZiB0aGlzIHZhbHVlXG4gICAgICAgICAgICB2YXIgdmFsaWQgPSBmQm94LmNoZWNrRmlsdGVyVmFsdWVzQXJlVmFsaWQoZmlsdGVyT2JqZWN0LFtmaWx0ZXJWYWx1ZV0pO1xuICAgICAgICAgICAgaWYodmFsaWQpIHJldHVyblBhcnRzLnB1c2goZmlsdGVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5QYXJ0cztcbn1cblxuRmlsdGVyc0JveC5wcm90b3R5cGUuY2hlY2tXaGF0Q291bnRyaWVzVG9BZGQgPSBmdW5jdGlvbihzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUsIG1hcCkge1xuICAgIHZhciBjb3VudHJpZXMgPSBbXTtcbiAgICAkLmVhY2gobWFwLmpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjb3VudHJ5KSB7XG4gICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJ5KSwgZnVuY3Rpb24oaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgICAgIGlmIChhdHRyLnRvTG93ZXJDYXNlKCkgPT0gc2VsZWN0ZWRGaWx0ZXIubmFtZS50b0xvd2VyQ2FzZSgpICYmIGNvdW50cnlbYXR0cl0gPT0gZmlsdGVyVmFsdWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY291bnRyaWVzLnB1c2goY291bnRyeSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50cmllcztcbn07XG5cbkZpbHRlcnNCb3gucHJvdG90eXBlLmNoZWNrV2hhdE1hcmtlcnNUb0FkZCA9IGZ1bmN0aW9uKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSwgbWFwKSB7XG4gICAgdmFyIG1hcmtlcnMgPSBbXTtcbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gaGF2ZSB0aGF0IGZpbHRlciB2YWx1ZVxuICAgICQuZWFjaChtYXAuanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjdXJyZW50TWFya2VyKSwgZnVuY3Rpb24oaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgICAgIGlmIChhdHRyLnRvTG93ZXJDYXNlKCkgPT0gc2VsZWN0ZWRGaWx0ZXIubmFtZS50b0xvd2VyQ2FzZSgpICYmIGN1cnJlbnRNYXJrZXJbYXR0cl0gPT0gZmlsdGVyVmFsdWUpXG4gICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKGN1cnJlbnRNYXJrZXIpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJrZXJzO1xufTtcblxuRmlsdGVyc0JveC5wcm90b3R5cGUuY2hlY2tXaGF0Q291bnRyaWVzTWFya2Vyc1RvQWRkID0gZnVuY3Rpb24oc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlLCBtYXApIHtcbiAgICB2YXIgY291bnRyaWVzVG9BZGQgPSBbXTtcbiAgICB2YXIgbWFya2Vyc1RvQWRkID0gW107XG5cbiAgICBpZihtYXAuZGF0YXR5cGUgPT0gJ2NvdW50cmllcycpXG4gICAgICAgIGNvdW50cmllc1RvQWRkID0gdGhpcy5jaGVja1doYXRDb3VudHJpZXNUb0FkZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUsIG1hcCk7XG4gICAgZWxzZVxuICAgICAgICBtYXJrZXJzVG9BZGQgPSB0aGlzLmNoZWNrV2hhdE1hcmtlcnNUb0FkZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUsIG1hcCk7XG5cbiAgICByZXR1cm4gW2NvdW50cmllc1RvQWRkLCBtYXJrZXJzVG9BZGRdO1xufVxuXG5GaWx0ZXJzQm94LnByb3RvdHlwZS5jaGVja0ZpbHRlck5hbWVJc1ZhbGlkID0gZnVuY3Rpb24oZmlsdGVyTmFtZSkge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgICQuZWFjaCh0aGlzLmZpbHRlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyKSB7XG4gICAgICAgIGlmIChjdXJyZW50RmlsdGVyLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gZmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBmaWx0ZXJPYmplY3QgPSBjdXJyZW50RmlsdGVyO1xuICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbGlkO1xufVxuXG5GaWx0ZXJzQm94LnByb3RvdHlwZS5yZXN0b3JlSW5wdXRCb3hlcyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGZCb3ggPSB0aGlzO1xuICAgIGZvcih2YXIgaSA9IDAgOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aCA7IGkrKylcbiAgICAgICAgJCgnI2Zib3gnICsgaSArICctJytmQm94Lm1hcCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoXCJoYXMtZXJyb3JcIik7XG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGVkSXRlbXMoYm94SUQpIHtcbiAgICByZXR1cm4gJChib3hJRCkuZHJvcGRvd25DaGVja2JveChcImNoZWNrZWRcIik7XG59XG5cblxuRmlsdGVyc0JveC5wcm90b3R5cGUuY2hlY2tGaWx0ZXJWYWx1ZXNBcmVWYWxpZCA9IGZ1bmN0aW9uKGZpbHRlciwgZmlsdGVyVmFsdWVzKSB7XG4gICAgdmFyIGZCb3ggPSB0aGlzO1xuICAgIHZhciB2YWxpZCA9IHRydWU7XG4gICAgLy8gY2hlY2sgaWYgdGhlIGZpbHRlciBpcyBjb250aW51b3VzIG9yIG5vdFxuICAgIGlmIChmaWx0ZXIuY29udGludW91cyA9PSB0cnVlKSB7XG4gICAgICAgIHZhciBtaW4gPSBmaWx0ZXIubWluO1xuICAgICAgICB2YXIgbWF4ID0gZmlsdGVyLm1heDtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlcyBhcmUgYmV0d2VlbiBtaW4gYW5kIG1heFxuICAgICAgICAkLmVhY2goZmlsdGVyVmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBoYXZlIGEgdmFsdWUgb3V0c2lkZSB0aGUgcmFuZ2VcbiAgICAgICAgICAgIGlmICgrY3VycmVudFZhbHVlIDwgbWluIHx8ICtjdXJyZW50VmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZCb3guaGlnaGxpZ2h0SW5wdXRCb3hFcnJvcihmaWx0ZXIsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgdmFsdWVzIGJlbG9uZyBpbiB0aGUgXCJ2YWx1ZXNcIiBwcm9wZXJ0eSBvZiB0aGUgZmlsdGVyXG4gICAgICAgICQuZWFjaChmaWx0ZXJWYWx1ZXMsIGZ1bmN0aW9uKGluZGV4LCBmaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjdXJyZW50IHZhbHVlIGlzIHZhbGlkXG4gICAgICAgICAgICAkLmVhY2goZmlsdGVyLnZhbHVlcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gZmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZighdmFsaWQpXG4gICAgICAgICAgICAgICAgZkJveC5oaWdobGlnaHRJbnB1dEJveEVycm9yKGZpbHRlciwgZmlsdGVyVmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkO1xufVxuXG5GaWx0ZXJzQm94LnByb3RvdHlwZS5oaWdobGlnaHRJbnB1dEJveEVycm9yID0gZnVuY3Rpb24oZmlsdGVyLCBmaWx0ZXJWYWx1ZSl7XG4gICAgdmFyIGZCb3ggPSB0aGlzO1xuICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIHZhbHVlIGZvciB0aGUgZmlsdGVyOiAnICsgZmlsdGVyVmFsdWUpO1xuICAgIC8vIGhpZ2hsaWdodCB0aGUgaW5wdXQgd2l0aCBlcnJvclxuICAgIHZhciBmaWx0ZXJUb0ZpbmQgPSBmaWx0ZXIubmFtZTtcbiAgICAvLyBmaW5kIGluZGV4IG9mIHRoZSBmaWx0ZXJcbiAgICAkLmVhY2goZkJveC5maWx0ZXJzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyKSB7XG4gICAgICAgIGlmKGZpbHRlclRvRmluZCA9PSBmaWx0ZXIubmFtZSlcbiAgICAgICAgICAgICQoJyNmYm94JyArIGluZGV4ICsgJy0nK2ZCb3gubWFwKS5wYXJlbnQoKS5hZGRDbGFzcyhcImhhcy1lcnJvclwiKTtcbiAgICB9KTtcbn1cbiIsIkZpbHRlcnNCb3gucHJvdG90eXBlLnJlYWRGaWx0ZXJzRnJvbUpTT04gPSBmdW5jdGlvbihmaWx0ZXJzSlNPTikge1xuICAgIHZhciBmaWx0ZXJzID0gW107XG4gICAgJC5lYWNoKGZpbHRlcnNKU09OLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyKSB7XG4gICAgICAgIGZpbHRlcnMucHVzaChuZXcgRmlsdGVyKGZpbHRlcikpO1xuICAgIH0pO1xuICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XG59XG5cbnZhciBGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXJPYmplY3QpIHtcbiAgICB0aGlzLm5hbWUgPSBmaWx0ZXJPYmplY3RbJ25hbWUnXTtcbiAgICAvLyBjaGVjayBpZiB0aGUgdmFsdWVzIGFyZSBjb250aW51b3VzIG9yIGRpc2NyZXRlXG4gICAgaWYgKGZpbHRlck9iamVjdFsnY29udGludW91cyddID09ICdmYWxzZScpIHtcbiAgICAgICAgLy8gZGlzY3JldGUgdmFsdWVzIC0gcmVhZCBmcm9tIHZhbHVlc1xuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IGZpbHRlck9iamVjdFsndmFsdWVzJ107XG4gICAgICAgIHRoaXMuY29udGludW91cyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnRpbnVvdXMgdmFsdWVzXG4gICAgICAgIHRoaXMuY29udGludW91cyA9IHRydWU7XG4gICAgICAgIHRoaXMubWluID0gZmlsdGVyT2JqZWN0WydtaW4nXVxuICAgICAgICB0aGlzLm1heCA9IGZpbHRlck9iamVjdFsnbWF4J11cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0RmlsdGVycygpIHtcbiAgICAvLyBjb2xvciB0aGUgb3JpZ2luYWwgbWFwXG4gICAgdmFyIGNvbG9ycyA9IGdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzKCk7XG4gICAgcmVsb2FkTWFwKGNvbG9ycyk7XG5cbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gaGF2ZSB0aGF0IGZpbHRlciB2YWx1ZVxuICAgICQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgbWFwLmFkZE1hcmtlcihpbmRleCwge1xuICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG4gICAgICAgICAgICAvLyBzZXQgdGhlIHN0eWxlIGZvciB0aGlzIG1hcmtlclxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgIHI6IG1hcFJhbmdlKGN1cnJlbnRNYXJrZXIuQ291bnQsIG1pbkNvdW50LCBtYXhDb3VudCwgbWluUmFkaXVzLCBtYXhSYWRpdXMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwidmFyIG1hcHBpbmdNYXJrZXJzID0gW107XG52YXIgbWFwcGluZ0NvdW50cmllcyA9IFtdO1xuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlZ2lzdGVyVHJhbnNmb3JtZXIgPSBmdW5jdGlvbihqc29uTG9jYXRpb24sIGNvdW50cmllc01hcHBpbmdKc29uLCBtYXJrZXJzTWFwcGluZ0pzb24pIHtcblx0Ly8ganNvbkxvY2F0aW9uIC0gdXJsIG9mIHRoZSBuZXcganNvblxuXHQvLyBjb3VudHJpZXNNYXBwaW5nSnNvbiAtIGpzb24gdGhhdCBjb250YWlucyB0aGUganNvbiBjb3VudHJ5IG1hcHBpbmdcblx0dmFyIGNvdW50cmllc01hcHBpbmdKc29uID0gXCIuLi9tYXBwaW5nSlNPTi9tYXBwaW5nQ291bnRyaWVzU2FtcGxlLmpzb25cIjtcblx0Ly8gbWFya2Vyc01hcHBpbmdKc29uIC0ganNvbiB0aGF0IGNvbnRhaW5zIHRoZSBqc29uIG1hcmtlcnMgbWFwcGluZ1xuXHR2YXIgbWFya2Vyc01hcHBpbmdKc29uID0gXCIuLi9tYXBwaW5nSlNPTi9tYXBwaW5nTWFya2Vyc1NhbXBsZS5qc29uXCI7XG5cblx0aWYoIWNvdW50cmllc01hcHBpbmdKc29uKSB7XG5cdFx0Y29uc29sZS5lcnJvcigneW91IG11c3Qgc3BlY2lmeSBhIGNvdW50cmllcyBtYXBwaW5nIGpzb24nKTtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYoIW1hcmtlcnNNYXBwaW5nSnNvbikge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ3lvdSBtdXN0IHNwZWNpZnkgYSBtYXJrZXJzIG1hcHBpbmcganNvbicpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIGdldCB0aGUgSlNPTlxuXHRqc29uTG9jYXRpb24gPSBcIi4uL2pzb24vZXNwaWQtc3BhaW4uanNvblwiO1xuXHQkLmdldEpTT04oanNvbkxvY2F0aW9uLCBmdW5jdGlvbihqc29uKSB7XG5cdFx0Ly8gcmVhZCBjb3VudHJpZXNcblx0XHRqc29uTWFwQ291bnRyaWVzKGpzb24sIGNvdW50cmllc01hcHBpbmdKc29uKTtcblx0XHQvLyByZWFkIG1hcmtlcnNcblx0XHRqc29uTWFwTWFya2Vycyhqc29uLCBtYXJrZXJzTWFwcGluZ0pzb24pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24ganNvbk1hcENvdW50cmllcyhqc29uLCBjb3VudHJpZXNNYXBwaW5nSnNvbikge1xuXHR2YXIgY291bnRyaWVzID0gW107XG5cdC8vIGFjY2VzcyB0aGUgSlNPTiBmaWxlIHRoYXQgc3BlY2lmaWVzIHRoZSBtYXBwaW5nXG5cdCQuZ2V0SlNPTihjb3VudHJpZXNNYXBwaW5nSnNvbiwgZnVuY3Rpb24oanNvbk1hcHBpbmcpIHtcblxuXHRcdC8vIGluIHRoaXMgY2FzZSB0aGUgJ2NvdW50cmllcycgYXJlIGRlZmluZWQgdGhlIHRvcCBsZXZlbFxuXHRcdC8vIGl0ZXJhdGUgdGhyb3VnaCBldmVyeSAnY291bnRyeSdcblx0XHQkLmVhY2goanNvbiwgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRKU09OKSB7XG5cdFx0XHR2YXIganNvbkNvdW50cnkgPSAneyc7XG5cdFx0XHQvLyBnZXQgdGhlIG5hbWUgb2YgdGhlIGNvdW50cnlcblx0XHRcdHZhciBuYW1lID0gY3VycmVudEpTT05banNvbk1hcHBpbmcuY291bnRyeV07XG5cdFx0XHQvLyB0aGUgY291bnRyeSBuYW1lIG11c3QgYmUgb24gdGhlIHR3by1kaWdpdCBmb3JtYXRcblx0XHRcdC8vIGdldCB0aGUgY291bnQgLSBXSEFUIElTIFRIRSBDT1VOVD9cblx0XHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XHQvL2dldCB0aGUgZGVzY3JpcHRpb24gLSBXSFQgSVMgVEhFIERFU0NSSVBUSU9OIE9GIEEgTUFSS0VSP1xuXHRcdFx0dmFyIGRlc2NyaXB0aW9uID0gJyc7XG5cdFx0XHQvKlxuXHRcdFx0V0hBVCBBUkUgVEhFIE5BTUVTPz8/XG5cdFx0XHQqL1xuXHRcdFx0Y291bnRyaWVzW2luZGV4XSA9IG5ldyBDb3VudHJ5KCcnLCBuYW1lLCBjb3VudCk7XG5cdFx0fSk7XG5cdFx0bWFwcGluZ0NvdW50cmllcyA9IGNvdW50cmllcztcblx0XHRjb25zb2xlLmxvZyhtYXBwaW5nQ291bnRyaWVzKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGpzb25NYXBNYXJrZXJzKGpzb24sIG1hcmtlcnNNYXBwaW5nSnNvbikge1xuXHR2YXIgbWFya2VycyA9IFtdO1xuXG5cdC8vIGFjY2VzcyB0aGUgSlNPTiBmaWxlIHRoYXQgc3BlY2lmaWVzIHRoZSBtYXBwaW5nXG5cdCQuZ2V0SlNPTihtYXJrZXJzTWFwcGluZ0pzb24sIGZ1bmN0aW9uKGpzb25NYXBwaW5nKSB7XG5cdFx0Ly8gaW4gdGhpcyBjYXNlIHRoZSAnbWFya2VycycgYXJlIGRlZmluZWQgdGhlIHRvcCBsZXZlbFxuXHRcdC8vIGl0ZXJhdGUgdGhyb3VnaCBldmVyeSAnbWFya2VyJ1xuXHRcdCQuZWFjaChqc29uLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEpTT04pIHtcblx0XHRcdC8vIGdldCB0aGUgbmFtZSBvZiB0aGUgY291bnRyeVxuXHRcdFx0dmFyIG5hbWUgPSBjdXJyZW50SlNPTltqc29uTWFwcGluZy5jb3VudHJ5XTtcblx0XHRcdC8vIHRoZSBjb3VudHJ5IG5hbWUgbXVzdCBiZSBvbiB0aGUgdHdvLWRpZ2l0IGZvcm1hdFxuXHRcdFx0Ly8gZ2V0IHRoZSBjb3VudCAtIFdIQVQgSVMgVEhFIENPVU5UP1xuXHRcdFx0dmFyIGNvdW50ID0gMDtcblx0XHRcdC8vIGdldCB0aGUgbGF0aXR1ZGVcblx0XHRcdHZhciBsYXRpdHVkZSA9IGN1cnJlbnRKU09OW2pzb25NYXBwaW5nLkxhdGl0dWRlXTtcblx0XHRcdC8vIGdldCB0aGUgbG9uZ2l0dWRlXG5cdFx0XHR2YXIgbG9uZ2l0dWRlID0gY3VycmVudEpTT05banNvbk1hcHBpbmcuTG9uZ2l0dWRlXTtcblx0XHRcdC8vZ2V0IHRoZSBkZXNjcmlwdGlvbiAtIFdIQVQgSVMgVEhFIERFU0NSSVBUSU9OIE9GIEEgTUFSS0VSP1xuXHRcdFx0dmFyIGRlc2NyaXB0aW9uID0gJyc7XG5cdFx0XHQvKlxuXHRcdFx0V0hBVCBBUkUgVEhFIE5BTUVTPz8/XG5cdFx0XHQqL1xuXHRcdFx0Ly8gY3JlYXRlIGEgbmV3IG1hcmtlclxuXHRcdFx0bWFya2Vyc1tpbmRleF0gPSBuZXcgTWFya2VyKCcnLCBuYW1lLCBjb3VudCwgbGF0aXR1ZGUsIGxvbmdpdHVkZSk7XG5cdFx0fSk7XG5cdFx0bWFwcGluZ01hcmtlcnMgPSBtYXJrZXJzO1xuXHRcdGNvbnNvbGUubG9nKG1hcHBpbmdNYXJrZXJzKTtcblx0fSk7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuZmlsdGVyT25TZXJ2ZXIgPSBmdW5jdGlvbihmaWx0ZXJzKSB7XG4gICAgLy8gcmVhZCB0aGUgZmlsdGVycyBmcm9tIGEgSlNPTiBmaWxlIChqdXN0IGZvciB0ZXN0aW5nKVxuICAgICQuZ2V0SlNPTihcIi4uL2pzb24vc2VydmVyRmlsdGVyLmpzb25cIiwgZnVuY3Rpb24oZmlsdGVyc0pTT04pIHtcbiAgICAgICAgLy8gY29udmVydCB0aGUgZmlsdGVyc0pTT04gdG8gYSBzdHJpbmdcbiAgICAgICAgdmFyIGZpbHRlcnNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShmaWx0ZXJzSlNPTik7XG4gICAgICAgIC8vIGJ1aWxkIHRoZSB1cmwgdG8gc2VuZCB0byB0aGUgc2VydmVyXG4gICAgICAgIHZhciB1cmwgPSAnaHR0cDovL3NlcnZlckZpbHRlcmluZy5jb20vP2RhdGE9JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJzU3RyaW5nKTtcbiAgICAgICAgLy8gRk9SIFRFU1RJTkcgUFVSUE9TRVMgLSB0aGlzIGZpbGUgY29udGFpbnMgYSBkaWZmZXJlbnQgc2V0XG4gICAgICAgIC8vIG9mIGNvdW50cmllcyBhbmQgbWFya2Vyc1xuICAgICAgICB1cmwgPSAnLi4vanNvbi9jb3VudHJpZXNfcGx1c19tYXJrZXJzMi5qc29uJztcbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdG8gZ2V0IHRoZSBtYXJrZXJzIGFuZCBjb3VudHJpZXNcbiAgICAgICAgJC5nZXRKU09OKHVybCwgZnVuY3Rpb24oanNvbikge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBUSElTIENPREUgSVMgU0VSVkVSIFNJREVcbiAgICAgICAgICAgIHZhciBteVBhcmFtID0gdXJsLnNwbGl0KCdkYXRhPScpWzFdO1xuICAgICAgICAgICAgdmFyIHJldHVybkpTT04gPSBkZWNvZGVVUklDb21wb25lbnQobXlQYXJhbSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKHJldHVybkpTT04pKTtcbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBKU09OIHRvIGdldCB0aGUgY291bnRyaWVzIGFuZCBtYXJrZXJzXG4gICAgICAgICAgICBqc29uQ291bnRyaWVzID0gcmVhZENvdW50cmllc0Zyb21KU09OKGpzb24uY291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgY29sb3VycyBmb3IgdGhlIGNvdW50cmllc1xuICAgICAgICAgICAgdmFyIGNvdW50cnlDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyhqc29uQ291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGNvdW50cmllcyBvbiB0aGUgbWFwXG4gICAgICAgICAgICByZWxvYWRNYXAoY291bnRyeUNvbG9ycyk7XG5cbiAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UgYWxzbyBoYXZlIG1hcmtlcnNcbiAgICAgICAgICAgIGlmIChqc29uLm1hcmtlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyByZWFkIHRoZSBtYXJrZXJzIGZyb20gdGhlIEpTT04gZmlsZVxuICAgICAgICAgICAgICAgIGpzb25NYXJrZXJzID0gcmVhZE1hcmtlcnNGcm9tSlNPTihqc29uLm1hcmtlcnMpO1xuICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXJzIHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJmdW5jdGlvbiBmaW5kTWFwQnlJZChpZClcbntcbiAgICB2YXIgcmV0ID0gbnVsbDtcbiAgICAkLmVhY2godk1hcHMsIGZ1bmN0aW9uKGluZGV4LCBtYXApIHtcbiAgICAgICAgaWYobWFwLmlkID09IGlkKVxuICAgICAgICAgICAgcmV0ID0gbWFwO1xuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG59XG5cblxuLy8gcmVkcmF3IHRoZSBtYXBcblZlY3RvcmlhbE1hcC5wcm90b3R5cGUucmVsb2FkTWFwID0gZnVuY3Rpb24oY291bnRyaWVzKSB7XG4gICAgdmFyIHZNYXAgPSB0aGlzO1xuICAgIGlmICh2TWFwLmpzb25Db3VudHJpZXMubGVuZ3RoID4gMClcbiAgICB7XG4gICAgICAgIC8vIHVwZGF0ZSBtaW4gYW5kIG1heCBDb3VudCBvZiB0aGUgY291bnRyaWVzXG4gICAgICAgIHZNYXAucmVhZE1pbk1heChjb3VudHJpZXMpO1xuICAgICAgICBjb2xvcnMgPSB2TWFwLmdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzKGNvdW50cmllcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb2xvcnMgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBlcmFzZSB0aGUgbWFwXG4gICAgJChcIiNcIiArIHZNYXAubURpdikuZW1wdHkoKTtcblxuICAgIHZNYXAubWFwID0gbmV3IGp2bS5NYXAoe1xuICAgICAgICBtYXA6IHZNYXAubVR5cGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdk1hcC5iYWNrZ3JvdW5kLFxuICAgICAgICBjb250YWluZXI6ICQoJyMnICsgdk1hcC5tRGl2KSxcbiAgICAgICAgb25SZWdpb25DbGljazogZnVuY3Rpb24oZSwgY29kZSkge1xuICAgICAgICAgICAgY291bnRyeUNvZGUgPSBjb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgbmV3TWFwID0gY291bnRyeUNvZGUgKyAnX21pbGxfZW4nO1xuICAgICAgICAgICAgLy8gc3dpdGggdG8gbmV3IG1hcFxuICAgICAgICAgICAgdk1hcC5zd2l0Y2hNYXAobmV3TWFwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZE1hcmtlclRvb2x0aXAodk1hcC5qc29uTWFya2VycywgaW5kZXgpO1xuICAgICAgICAgICAgbGFiZWwuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICB9LFxuICAgICAgICBvblJlZ2lvblRpcFNob3c6IGZ1bmN0aW9uKGUsIGNvdW50cnlOYW1lLCBjb2RlKSB7XG4gICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSBjb3VudHJ5IChpLmUuLCBQVCwgRVMsIEZSLCBldGMpXG4gICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgQ291bnRyeSAtIGxvb2sgZm9yIHRoZSBjb3VudHJ5XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRDb3VudHJ5ID0gLTE7XG4gICAgICAgICAgICAkLmVhY2godk1hcC5qc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkubmFtZSA9PT0gY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ291bnRyeSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZENvdW50cnlUb29sdGlwKGNvdW50cnlOYW1lLCBzZWxlY3RlZENvdW50cnkpO1xuICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoY291bnRyeU5hbWUuaHRtbCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICBtYXJrZXJzOiBbZmluYWxNYXJrZXJzSW5NYXBdLFxuICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgY291bnRcbiAgICAgICAgICAgICAgICBzY2FsZTogW3ZNYXAubWluQ29sb3JNYXAsIHZNYXAubWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ2ZpbGwnLFxuICAgICAgICAgICAgICAgIHZhbHVlczogY29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgdGhlIG1hcmtlcyB0byB0aGUgbWFwXG4gICAgaWYgKHZNYXAudGhlcmVBcmVNYXJrZXJzKVxuICAgICAgICB2TWFwLmFkZE1hcmtlcnNUb01hcCgpO1xufVxuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLnJlbW92ZVRvb2x0aXAgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBlcmFzZSB0aGUgcHJldmlvdXMgbWFwIHRvb2x0aXBcbiAgICAkKCcuanZlY3Rvcm1hcC10aXAnKS5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQmFja0J1dHRvbigpIHtcbiAgICAvLyBlcmFzZSB0aGUgcHJldmlvdXMgbWFwIHRvb2x0aXBcbiAgICAkKCcuanZlY3Rvcm1hcC1nb2JhY2snKS5yZW1vdmUoKTtcbn1cblxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5zd2l0Y2hNYXAgPSBmdW5jdGlvbihuZXdNYXApIHtcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIHdoZW4gYSBjb3VudHJ5IG9uIHRoZSB3b3JsZCBtYXAgaXMgY2xpY2tlZFxuICAgIC8vIGVyYXNlIHRoZSBwcmV2aW91cyBtYXBcbiAgICAkKCcjJyArIHRoaXMubURpdikuZW1wdHkoKTtcbiAgICB0aGlzLnJlbW92ZVRvb2x0aXAoKTtcbiAgICB2YXIgcmVnaW9uQ29sb3JzID0gKChkYXRhVHlwZSA9PSAnY291bnRyaWVzJykgPyB0aGlzLmdlbmVyYXRlQ29sb3JzRm9yVGhlQ291bnRyaWVzKHRoaXMuanNvbkNvdW50cmllcykgOiBbXSk7XG4gICAgdmFyIHZNYXAgPSB0aGlzO1xuXG4gICAgdGhpcy5tYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgIG1hcDogbmV3TWFwLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZNYXAuYmFja2dyb3VuZCxcbiAgICAgICAgY29udGFpbmVyOiAkKCcjJyArIHZNYXAubURpdiksXG4gICAgICAgIG9uTWFya2VyVGlwU2hvdzogZnVuY3Rpb24oZSwgbGFiZWwsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRNYXJrZXJUb29sdGlwKHZNYXAuanNvbk1hcmtlcnMsIGluZGV4KTtcbiAgICAgICAgICAgIGxhYmVsLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCByZWdpb25OYW1lLCBjb2RlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudE1hcCA9IG5ld01hcC5zcGxpdCgnXycpWzBdLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSByZWdpb24gKGkuZS4sIFBULTEsIEVTLU0sIGV0YylcbiAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgUmVnaW9uIC0gbG9vayBmb3IgdGhlIFJlZ2lvblxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgY29ycmVzcG9uZGluZyBjb3VudHJ5XG4gICAgICAgICAgICAkLmVhY2godk1hcC5qc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkuY291bnRyeSA9PSBjdXJyZW50TWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyeSA9IGN1cnJlbnRDb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2VsZWN0ZWQgcmVnaW9uIGhhcyBhbnkgZGF0YSBpbnNpZGUgdGhhdCBjb3VudHJ5XG4gICAgICAgICAgICB2YXIgcmVnaW9uRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJlZ2lvbjtcbiAgICAgICAgICAgICQuZWFjaCh2TWFwLm1hcC5yZWdpb25zLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFJlZ2lvbikge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVnaW9uLm5hbWUgPT0gY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJlZ2lvbiA9IGN1cnJlbnRSZWdpb247XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlZ2lvbkZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVnaW9uTmFtZS5odG1sKGJ1aWxkUmVnaW9uVG9vbHRpcChzZWxlY3RlZFJlZ2lvbikpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgcmVnaW9uTmFtZS5odG1sKHJlZ2lvbk5hbWUuaHRtbCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICBtYXJrZXJzOiBbZmluYWxNYXJrZXJzSW5NYXBdLFxuICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAvLyBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgY291bnRcbiAgICAgICAgICAgICAgICBzY2FsZTogW3ZNYXAubWluQ29sb3JNYXAsIHZNYXAubWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ2ZpbGwnLFxuICAgICAgICAgICAgICAgIHZhbHVlczogcmVnaW9uQ29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgYmFjayBidXR0b25cbiAgICAkKCcjbXlfbWFwJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwianZlY3Rvcm1hcC1nb2JhY2tcIj5CYWNrPC9kaXY+Jyk7XG4gICAgJChcIi5qdmVjdG9ybWFwLWdvYmFja1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZXJhc2UgdGhlIHByZXZpb3VzIG1hcFxuICAgICAgICAkKCcjJyArIHRoaXMubURpdikuZW1wdHkoKTtcbiAgICAgICAgdk1hcC5yZW1vdmVUb29sdGlwKCk7XG4gICAgICAgIHZNYXAucmVsb2FkTWFwKHZNYXAuYXV4Q29sb3JzKTtcbiAgICB9KTtcblxuICAgIC8vIGFkZCB0aGUgbWFya2VzIHRvIHRoZSBtYXBcbiAgICBpZiAodGhpcy50aGVyZUFyZU1hcmtlcnMpIHtcbiAgICAgICAgdGhpcy5hZGRNYXJrZXJzVG9NYXAodGhpcy5maWx0ZXJlZE1hcmtlcnMpO1xuICAgIH1cbn1cbiIsIi8vIE1hcmtlciBkZWZpbml0aW9uXG52YXIgTWFya2VyID0gZnVuY3Rpb24obWFya2VyT2JqZWN0KSB7XG4gICAgLy8gYWRkIGF0dHJpYnV0ZXNcbiAgICB2YXIgYXR0cmlidXRlcyA9IG1hcmtlck9iamVjdFtcImF0dHJpYnV0ZXNcIl07XG4gICAgdmFyIG1hcmtlciA9IHRoaXM7XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLCBmdW5jdGlvbihpbmRleCwgYXR0cikge1xuICAgICAgICBtYXJrZXJbYXR0cl0gPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb3VudHJ5ID0gbWFya2VyT2JqZWN0LmNvdW50cnk7XG4gICAgdGhpcy5jb3VudCA9ICttYXJrZXJPYmplY3QuY291bnQ7XG4gICAgdGhpcy5sYXRpdHVkZSA9IG1hcmtlck9iamVjdC5sYXRpdHVkZTtcbiAgICB0aGlzLmxvbmdpdHVkZSA9IG1hcmtlck9iamVjdC5sb25naXR1ZGU7XG4gICAgdGhpcy5pY29uID0gbWFya2VyT2JqZWN0Lmljb247XG4gICAgLy8gVE9ETyAtIGFkZCBlc2NyaXB0aW9uIHRvIGEgTWFya2VyIGZyb20gdGhlIEpTT04gZmlsZVxuICAgIHRoaXMuZGVzYyA9ICdhYmMnO1xufTtcblxuLy8gcmVhZCB0aGUgbWFya2VycyBmcm9tIGEgSlNPTiBmaWxlXG5mdW5jdGlvbiByZWFkTWFya2Vyc0Zyb21KU09OKGpzb25NYXJrZXJzKSB7XG4gICAgdmFyIG1hcmtlcnMgPSBbXTtcblxuICAgIG1pbkNvdW50ID0gSW5maW5pdHk7XG4gICAgbWF4Q291bnQgPSAtSW5maW5pdHk7XG5cbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50SlNPTk1hcmtlcikge1xuICAgICAgICBtYXJrZXJzLnB1c2gobmV3IE1hcmtlcihjdXJyZW50SlNPTk1hcmtlcikpO1xuICAgICAgICB2YXIgY3VycmVudENvdW50VmFsdWUgPSBtYXJrZXJzW2luZGV4XS5Db3VudDtcblxuICAgICAgICBpZiAoY3VycmVudENvdW50VmFsdWUgPiBtYXhDb3VudCkge1xuICAgICAgICAgICAgbWF4Q291bnQgPSBjdXJyZW50Q291bnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudENvdW50VmFsdWUgPCBtaW5Db3VudClcbiAgICAgICAgICAgIG1pbkNvdW50ID0gY3VycmVudENvdW50VmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcmtlcnM7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuYWRkTWFya2Vyc1RvTWFwID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgbWFya2Vyc0pTT05BcnJheSA9IFtdO1xuICAgICQuZWFjaCh0aGlzLmZpbHRlcmVkTWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRNYXJrZXJKU09OID0ge1xuICAgICAgICAgICAgbGF0TG5nOiBbY3VycmVudE1hcmtlci5sYXRpdHVkZSwgY3VycmVudE1hcmtlci5sb25naXR1ZGVdLFxuICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuICAgICAgICAgICAgLy8gc2V0IHRoZSBzdHlsZSBmb3IgdGhpcyBtYXJrZXJcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5jb3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cyksXG4gICAgICAgICAgICAgICAgaW1hZ2U6ICcuLi9pbWcvJyArIGN1cnJlbnRNYXJrZXIuaWNvbiArICcucG5nJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtYXJrZXJzSlNPTkFycmF5LnB1c2goY3VycmVudE1hcmtlckpTT04pO1xuICAgIH0pO1xuICAgIHRoaXMubWFwLmFkZE1hcmtlcnMobWFya2Vyc0pTT05BcnJheSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTWFya2VyVG9vbHRpcChqc29uTWFya2VycywgbWFya2VyKSB7XG4gICAgdmFyIGZpbmFsVG9vbHRpcCA9IG1hcmtlclRvb2x0aXA7XG4gICAgJC5lYWNoKE9iamVjdC5rZXlzKG1hcmtlciksIGZ1bmN0aW9uKGluZGV4LCBhdHRyKSB7XG4gICAgICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKGF0dHIsIG1hcmtlclthdHRyXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbmFsVG9vbHRpcDtcbn1cbiIsIkZpbHRlcnNCb3gucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uKGlucHV0QXJncykge1xuICAgIHZhciBmQm94ID0gdGhpcztcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXRBcmdzKVxuICAgIHZhciBudW1iZXJLZXlzID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHZhbGlkRmlsdGVycyA9IDA7XG5cbiAgICB2YXIgY291bnRyaWVzQnlGaWx0ZXIgPSBuZXcgQXJyYXkoKTtcbiAgICB2YXIgbWFya2Vyc0J5RmlsdGVyID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bWJlcktleXM7IGkrKykge1xuICAgICAgICBjb3VudHJpZXNCeUZpbHRlcltpXSA9IG5ldyBBcnJheSgpO1xuICAgIH1cblxuXG4gICAgLy8gY2hlY2sgaWYgYW55IG9mIHRoZSBuYW1lcyBpcyBhbGwgKHJlc2V0IGFsbCBhcHBsaWVkIGZpbHRlcnNcdClcbiAgICB2YXIgZXhpdCA9IGZhbHNlO1xuICAgICQuZWFjaChrZXlzLCBmdW5jdGlvbihpbmRleCwgZmlsdGVyTmFtZSkge1xuICAgICAgICBpZiAoZmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpID09ICdhbGwnKSB7XG4gICAgICAgICAgICBleGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZCb3gucmVzZXRGaWx0ZXJzKCk7XG4gICAgICAgICAgICBmQm94LnJlc2V0RmlsdGVyc0JveCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGV4aXQpXG4gICAgICAgIHJldHVybjtcblxuICAgIC8vIGFjY2VzcyB0aGUgbWFwIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlsdGVycyBib3hcbiAgICB2YXIgbWFwID0gZmluZE1hcEJ5SWQodGhpcy5tYXApO1xuXG4gICAgLy8gZm9yIGV2ZXJ5IGtleS9maWx0ZXJcbiAgICAkLmVhY2goa2V5cywgZnVuY3Rpb24oaW5kZXgsIGZpbHRlck5hbWUpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGZpbHRlck5hbWUgaXMgdmFsaWRcbiAgICAgICAgaWYgKCFmQm94LmNoZWNrRmlsdGVyTmFtZUlzVmFsaWQoZmlsdGVyTmFtZSkpIHtcbiAgICAgICAgICAgIC8vIGludmFsaWQgZmlsdGVyIG5hbWVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIGZpbHRlciBuYW1lISgnICsgZmlsdGVyTmFtZSArICcpJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBnZXQgdGhlIGZpbHRlciB2YWx1ZSAoY2FuIGNvbnRhaW4gZW51bWVyYXRpb24gYW5kIHJhbmdlKVxuICAgICAgICAgICAgLy8gJzIwMDQtMjAwNicgLCAnRixNJywgZXRjXG4gICAgICAgICAgICB2YXIgZmlsdGVyVmFsdWUgPSBpbnB1dEFyZ3NbZmlsdGVyTmFtZV07XG4gICAgICAgICAgICAvLyBnZXQgYWxsIHNpbmdsZSBmaWx0ZXIgdmFsdWVzXG4gICAgICAgICAgICB2YXIgZmluYWxQYXJ0cyA9IGZCb3guZ2V0QWxsRmlsdGVyVmFsdWVzKGZpbHRlclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChmaW5hbFBhcnRzLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgbWFya2Vyc0J5RmlsdGVyW2luZGV4XSA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgICAgIC8vIGZvciBldmVyeSBzaW5nbGUgdmFsdWUgZ2V0IGFsbCB0aGUgY291bnRydWVzIGFuZCBtYXJrZXJzXG4gICAgICAgICAgICAgICAgJC5lYWNoKGZpbmFsUGFydHMsIGZ1bmN0aW9uKGksIHBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrUmV0dXJuID0gZkJveC5jaGVja1doYXRDb3VudHJpZXNNYXJrZXJzVG9BZGQoZmlsdGVyT2JqZWN0LCBwYXJ0LCBtYXApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyaWVzQXV4ID0gY2hlY2tSZXR1cm5bMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzQXV4ID0gY2hlY2tSZXR1cm5bMV07XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBldmVyeSBjb3VudHJ5IHRvIHRoZSBsaXN0IG9mIGNvdW50cmllc0J5RmlsdGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBldmVyeSBtYXJrZXIgdG8gdGhlIGxpc3Qgb2YgbWFya2Vyc0J5RmlsdGVyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNBdXgpLCBmdW5jdGlvbihqLCBjdXJyZW50S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY29sb3JzIHRoYXQgYXJlIHJldHVybmVkIGFyZSBpbiBhIGpzb24gZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBjb3VudHJpZXNBdXhbY3VycmVudEtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUZpbHRlcltpbmRleF1bY3VycmVudEtleV0gPSBrZXlWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgbWFya2Vyc1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWFya2Vyc0F1eCwgZnVuY3Rpb24oaiwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0J5RmlsdGVyW2luZGV4XS5wdXNoKGN1cnJlbnRNYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKG1hcC5kYXRhdHlwZSA9PSAnY291bnRyaWVzJykge1xuICAgICAgICAvLyBnZXQgdGhlIGZpbmFsIGNvdW50cmllc1xuICAgICAgICB2YXIgZmluYWxDb3VudHJpZXMgPSBbXTtcbiAgICAgICAgaWYgKGNvdW50cmllc0J5RmlsdGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZpbmFsQ291bnRyaWVzID0gY291bnRyaWVzQnlGaWx0ZXJbMF07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50cmllc0J5RmlsdGVyLmxlbmd0aCAtIDE7IGkrKylcbiAgICAgICAgICAgICAgICBmaW5hbENvdW50cmllcyA9IGdldENvdW50cmllc0ludGVyc2VjdGlvbihmaW5hbENvdW50cmllcywgY291bnRyaWVzQnlGaWx0ZXJbaSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgY291bnRyaWVzIHRvIE1hcFxuICAgICAgICBtYXAucmVsb2FkTWFwKGZpbmFsQ291bnRyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobWFya2Vyc0J5RmlsdGVyLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZE1hcmtlcnMgPSBbXTtcbiAgICAgICAgICAgIGlmIChtYXJrZXJzQnlGaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkTWFya2VycyA9IG1hcmtlcnNCeUZpbHRlclswXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtlcnNCeUZpbHRlci5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRNYXJrZXJzID0gZ2V0TWFya2Vyc0ludGVyc2VjdGlvbihmaWx0ZXJlZE1hcmtlcnMsIG1hcmtlcnNCeUZpbHRlcltpICsgMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5maWx0ZXJlZE1hcmtlcnMgPSBmaWx0ZXJlZE1hcmtlcnM7XG4gICAgICAgICAgICBtYXAucmVsb2FkTWFwKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldE1hcmtlcnNJbnRlcnNlY3Rpb24obWFya2Vyc0dyb3VwMSwgbWFya2Vyc0dyb3VwMikge1xuICAgIHZhciBtYXJrZXJzID0gW107XG5cbiAgICAvLyBtYXJrZXJzIHRoYXQgYmVsb25nIHRvIHRoZSB0d28gZ3JvdXBzXG4gICAgJC5lYWNoKG1hcmtlcnNHcm91cDEsIGZ1bmN0aW9uKGluZGV4LCBtYXJrZXIxKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgbWFya2VyIG5hbWUgaXMgaW5zaWRlIHRoZSBzZWNvbmQgZ3JvdXBcbiAgICAgICAgdmFyIG1hcmtlcjFDb3VudHJ5ID0gbWFya2VyMS5jb3VudHJ5O1xuICAgICAgICAkLmVhY2gobWFya2Vyc0dyb3VwMiwgZnVuY3Rpb24oaW5kZXgsIG1hcmtlcjIpIHtcbiAgICAgICAgICAgIHZhciBtYXJrZXIyQ291bnRyeSA9IG1hcmtlcjIuY291bnRyeTtcbiAgICAgICAgICAgIGlmIChtYXJrZXIxQ291bnRyeSA9PSBtYXJrZXIyQ291bnRyeSlcbiAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2gobWFya2VyMSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcmtlcnM7XG59XG5cbmZ1bmN0aW9uIGdldENvdW50cmllc0ludGVyc2VjdGlvbihjb3VudHJpZXNHcm91cDEsIGNvdW50cmllc0dyb3VwMikge1xuICAgIC8vIGNvdW50cmllcyB0aGF0IGJlbG9uZyB0byB0aGUgdHdvIGdyb3Vwc1xuICAgIHZhciBjb3VudHJpZXMgPSBbXTtcblxuICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNHcm91cDEpLCBmdW5jdGlvbihpbmRleCwgY291bnRyeU5hbWUxKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgY291bnRyeSBuYW1lIGlzIGluc2lkZSB0aGUgc2Vjb25kIGdyb3VwXG4gICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNHcm91cDIpLCBmdW5jdGlvbihpbmRleCwgY291bnRyeU5hbWUyKSB7XG4gICAgICAgICAgICBpZiAoY291bnRyeU5hbWUxID09IGNvdW50cnlOYW1lMilcbiAgICAgICAgICAgICAgICBjb3VudHJpZXNbY291bnRyeU5hbWUxXSA9IGNvdW50cmllc0dyb3VwMVtjb3VudHJ5TmFtZTFdO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnRyaWVzO1xufVxuXG5mdW5jdGlvbiBhcHBseU11bHRpcGxlRmlsdGVyc1Byb2dyYW1hdHRpY2FsbHkoZmlsdGVyc1RvQXBwbHkpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZpbHRlcnNUb0FwcGx5KVxuICAgIHZhciBudW1GaWx0ZXJzVG9BcHBseSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBjb3VudHJpZXNIYXZlRmlsdGVyID0gW107XG4gICAgdmFyIG1hcmtlcnNIYXZlRmlsdGVyID0gW107XG5cbiAgICAvLyBmb3IgZXZlcnkga2V5XG4gICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBmaWx0ZXJOYW1lKSB7XG4gICAgICAgIHZhciBmaWx0ZXJWYWx1ZSA9IGZpbHRlcnNUb0FwcGx5W2ZpbHRlck5hbWVdO1xuICAgIH0pO1xuICAgIHZhciBjb2xvcnMgPSBbXTtcblxuICAgIC8vIHJlbW92ZSBhbGwgbWFya2VycyBmcm9tIHRoZSBtYXBcbiAgICBtYXAucmVtb3ZlQWxsTWFya2VycygpO1xuXG4gICAgLy8gZm9yIGVhY2ggb2YgdGhlIGNvdW50cmllc1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihjb3VudHJ5SW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIC8vIHNldCB0byAwIHRoZSBudW1iZXIgb2YgZmlsdGVyc1xuICAgICAgICBjb3VudHJpZXNIYXZlRmlsdGVyW2NvdW50cnlJbmRleF0gPSAwO1xuICAgICAgICAvLyBjaGVjayBpZiBpdCBoYXMgdGhlIG5lZWRlZCB2YWx1ZXNcbiAgICAgICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyTmFtZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXS50b0xvd2VyQ2FzZSgpID09IGN1cnJlbnRGaWx0ZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYnkgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyc1RvQXBwbHlbY3VycmVudEZpbHRlck5hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBjb2xvdXIgb25seSB0aGUgY291bnRyaXMgd2hvc2UgY291bnRyaWVzSGF2ZUZpbHRlcltpbmRleF0gPT0gbnVtYmVyRmlsdGVyc1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihjb3VudHJ5SW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIGlmIChjb3VudHJpZXNIYXZlRmlsdGVyW2NvdW50cnlJbmRleF0gPT0gbnVtRmlsdGVyc1RvQXBwbHkpXG4gICAgICAgICAgICBjb2xvcnNbY3VycmVudENvdW50cnkuY291bnRyeV0gPSBjdXJyZW50Q291bnRyeS5Db3VudDtcbiAgICB9KTtcbiAgICByZWxvYWRNYXAoY29sb3JzKTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLypcbiAgICBNYXJrZXJzXG4gICAgKi9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLy8gZm9yIGVhY2ggb2YgdGhlIG1hcmtlcnNcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKG1hcmtlckluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIC8vIHNldCB0byAwIHRoZSBudW1iZXIgb2YgZmlsdGVyc1xuICAgICAgICBtYXJrZXJzSGF2ZUZpbHRlclttYXJrZXJJbmRleF0gPSAwO1xuICAgICAgICAvLyBjaGVjayBpZiBpdCBoYXMgdGhlIG5lZWRlZCB2YWx1ZXNcbiAgICAgICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyTmFtZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10udG9Mb3dlckNhc2UoKSA9PSBjdXJyZW50RmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyc1RvQXBwbHlbY3VycmVudEZpbHRlck5hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gc2F0aXNmeSB0aGUgY3JpdGVyaWFcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIGlmIChtYXJrZXJzSGF2ZUZpbHRlcltpbmRleF0gPT0gbnVtRmlsdGVyc1RvQXBwbHkpIHtcbiAgICAgICAgICAgIG1hcC5hZGRNYXJrZXIoaW5kZXgsIHtcbiAgICAgICAgICAgICAgICBsYXRMbmc6IFtjdXJyZW50TWFya2VyLkxhdGl0dWRlLCBjdXJyZW50TWFya2VyLkxvbmdpdHVkZV0sXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBzdHlsZSBmb3IgdGhpcyBtYXJrZXJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgICAgICByOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gYXBwbHlNdWx0aXBsZUZpbHRlcnMoc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMsIGpzb25GaWx0ZXJzKSB7XG5cbiAgICAvLyBudW1iZXIgb2YgZmlsdGVycyB0byBiZSBhcHBsaWVkXG4gICAgdmFyIG51bUZpbHRlcnNUb0FwcGx5ID0gc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgfSkubGVuZ3RoO1xuXG4gICAgdmFyIGNvdW50cmllc0hhdmVGaWx0ZXIgPSBbXTtcbiAgICB2YXIgbWFya2Vyc0hhdmVGaWx0ZXIgPSBbXTtcblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBjb3VudHJpZXNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChzZWxlY3RlZE11bHRpcGxlRmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50TmFtZVRvQ2hlY2tdID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXSA9PT0ganNvbkZpbHRlcnNbaW5kZXhdLk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYnkgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gY3VycmVudEZpbHRlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNIYXZlRmlsdGVyW2NvdW50cnlJbmRleF0rKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGNvbG9ycyA9IFtdO1xuXG4gICAgLy8gY29sb3VyIG9ubHkgdGhlIGNvdW50cmlzIHdob3NlIGNvdW50cmllc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bWJlckZpbHRlcnNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBpZiAoY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KVxuICAgICAgICAgICAgY29sb3JzW2N1cnJlbnRDb3VudHJ5LmNvdW50cnldID0gY3VycmVudENvdW50cnkuQ291bnQ7XG4gICAgfSk7XG5cbiAgICAvLyBjb2xvdXIgdGhlIGNvdW50cmllc1xuICAgIHJlbG9hZE1hcChjb2xvcnMpO1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8qXG4gICAgTWFya2Vyc1xuICAgICovXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBtYXJrZXJzXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihtYXJrZXJJbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChzZWxlY3RlZE11bHRpcGxlRmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10udG9Mb3dlckNhc2UoKSA9PSBqc29uRmlsdGVyc1tpbmRleF0uTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnRWYWx1ZV0gPT0gY3VycmVudEZpbHRlclZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gc2F0aXNmeSB0aGUgY3JpdGVyaWFcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIGlmIChtYXJrZXJzSGF2ZUZpbHRlcltpbmRleF0gPT0gbnVtRmlsdGVyc1RvQXBwbHkpIHtcbiAgICAgICAgICAgIG1hcC5hZGRNYXJrZXIoaW5kZXgsIHtcbiAgICAgICAgICAgICAgICBsYXRMbmc6IFtjdXJyZW50TWFya2VyLkxhdGl0dWRlLCBjdXJyZW50TWFya2VyLkxvbmdpdHVkZV0sXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBzdHlsZSBmb3IgdGhpcyBtYXJrZXJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgICAgICByOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJ2YXIgUmVnaW9uID0gZnVuY3Rpb24ocmVnaW9uT2JqZWN0LCBjb3VudHJ5KSB7XG4gICAgLy8gcmVhZCBmcm9tIHRoZSBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgdGhpcy5yZWdpb24gPSByZWdpb25PYmplY3QubmFtZTtcbiAgICB0aGlzLmNvdW50cnkgPSBjb3VudHJ5O1xuICAgIC8vICsgaXMgdXNlZCB0byBhc3N1cmUgdGhhdCBhIE51bWJlciBpcyBiZWluZyByZWFkXG4gICAgdGhpcy5kZXNjID0gJ2p1c3QgYSByZWdpb24uLi4nO1xufTtcblxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5yZWFkUmVnaW9uc0Zyb21KU09OID0gZnVuY3Rpb24ocmVnaW9ucywgY291bnRyeSkge1xuICAgIHZhciByZWdpb25zQXJyID0gW107XG4gICAgJC5lYWNoKHJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgIHJlZ2lvbnNBcnIucHVzaChuZXcgUmVnaW9uKGN1cnJlbnRSZWdpb24sIGNvdW50cnkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVnaW9ucztcbn1cblxuVmVjdG9yaWFsTWFwLnByb3RvdHlwZS5nZW5lcmF0ZUNvbG9yc0ZvclRoZVJlZ2lvbnMgPSBmdW5jdGlvbihjb3VudHJ5KXtcbiAgICB2YXIgaXNvQ29kZSA9IGNvdW50cnkuc3BsaXQoXCJfXCIpWzBdLnRvVXBwZXJDYXNlKCk7XG4gICAgLy8gZmluZCB0aGUgY291bnRyeSB3aXRoIHRoYXQgaXNvQ29kZVxuICAgIHZhciByZWdpb25Db2xvcnMgPSBbXTtcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5jb3VudHJ5ID09IGlzb0NvZGUpIHtcbiAgICAgICAgICAgIC8vIGNvdW50cnkgd2FzIGZvdW5kLCBjaGVjayBpZiBpdCBoYXMgYW55IHJlZ2lvblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LlJlZ2lvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9ucyA9IGN1cnJlbnRDb3VudHJ5LlJlZ2lvbnM7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSByZWdpb25zIG9mIHRoZSBjb3VudHJ5XG4gICAgICAgICAgICBcdCQuZWFjaChyZWdpb25zLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFJlZ2lvbikge1xuICAgICAgICAgICAgXHRcdHJlZ2lvbkNvbG9yc1tjdXJyZW50UmVnaW9uLm5hbWVdID0gMTAwO1xuICAgICAgICAgICAgXHR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXHRyZXR1cm4gcmVnaW9uQ29sb3JzO1xufVxuXG5cbmZ1bmN0aW9uIGJ1aWxkUmVnaW9uVG9vbHRpcChyZWdpb24pIHtcbiAgICB2YXIgZmluYWxUb29sdGlwID0gcmVnaW9uVG9vbHRpcDtcbiAgICBmaW5hbFRvb2x0aXAgPSBmaW5hbFRvb2x0aXAucmVwbGFjZSgnbmFtZScsIHJlZ2lvbi5uYW1lKTtcbiAgICByZXR1cm4gZmluYWxUb29sdGlwO1xufVxuXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLmFkZFJlZ2lvbnNUb01hcCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIC8vIGNoZWNrIGlmIHRoZSBoaWdobGlnaHRlZCBjb3VudHJ5IGhhcyBhbnkgcmVnaW9uXG4gICAgdmFyIGlzb0NvZGUgPSBrZXkuc3BsaXQoXCJfXCIpWzBdLnRvVXBwZXJDYXNlKCk7XG4gICAgLy8gZmluZCB0aGUgY291bnRyeSB3aXRoIHRoYXQgaXNvQ29kZVxuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LmNvdW50cnkgPT0gaXNvQ29kZSkge1xuICAgICAgICAgICAgLy8gY291bnRyeSB3YXMgZm91bmQsIGNoZWNrIGlmIGl0IGhhcyBhbnkgcmVnaW9uXG4gICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkuUmVnaW9ucykge1xuICAgICAgICAgICAgICAgIHZhciByZWdpb25zID0gY3VycmVudENvdW50cnkuUmVnaW9ucztcbiAgICAgICAgICAgICAgICB2YXIgcGFsZXR0ZSA9IFsnIzY2QzJBNScsICcjRkM4RDYyJywgJyM4REEwQ0InLCAnI0U3OEFDMycsICcjQTZEODU0J107XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVDb2xvcnMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvcnMgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzW21hcHMucmVnaW9uXVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIG1hcHMucmVnaW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzW2tleV0gPSBwYWxldHRlW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhbGV0dGUubGVuZ3RoKV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9ycztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGdlbmVyYXRlQ29sb3JzKCkpO1xuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgY29sb3JzIG9mIHRoZSByZWdpb25zXG4gICAgICAgICAgICAgICAgbWFwcy5zZXJpZXMucmVnaW9uc1swXS5zZXRWYWx1ZXMoZ2VuZXJhdGVDb2xvcnMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsInZhciBGaWx0ZXJzQm94ID0gZnVuY3Rpb24oaWQsIG1hcCwgZmlsdGVyVHlwZSkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICB0aGlzLmZpbHRlclR5cGUgPSBmaWx0ZXJUeXBlO1xufVxuXG5GaWx0ZXJzQm94LnByb3RvdHlwZS5yZXNldEZpbHRlcnNCb3ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZkJveCA9IHRoaXM7XG4gICAgLy8gcmVzZXQgYWxsIHRoZSAnZmJveGVzJ1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50SWQgPSAnI2Zib3gnICsgaSArICctJytmQm94Lm1hcDtcbiAgICAgICAgJChjdXJyZW50SWQpLnRleHQoJycpO1xuICAgICAgICAkKGN1cnJlbnRJZCkudmFsKCcnKTtcbiAgICB9XG5cbiAgICB2YXIgbWFwID0gZmluZE1hcEJ5SWQodGhpcy5tYXApO1xuXG4gICAgLy8gcmVsb2FkIHRoZSBtYXBcbiAgICBtYXAuZmlsdGVyZWRNYXJrZXJzID0gbWFwLmpzb25NYXJrZXJzO1xuICAgIG1hcC5yZWxvYWRNYXAobWFwLmpzb25Db3VudHJpZXMpO1xuICAgIGlmKG1hcC5kYXRhdHlwZSA9PSAnbWFya2VycycpXG4gICAgICAgIG1hcC5hZGRNYXJrZXJzVG9NYXAoKTtcbn1cblxuRmlsdGVyc0JveC5wcm90b3R5cGUuY3JlYXRlRmlsdGVyc0JveFdpdGhFbnVtZXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmQm94ID0gdGhpcztcbiAgICAkLmVhY2godGhpcy5maWx0ZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuXG4gICAgICAgIHZhciBmaWx0ZXJOYW1lID0gY3VycmVudEZpbHRlci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGZpbHRlck5hbWUgPSBmaWx0ZXJOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZmlsdGVyTmFtZS5zbGljZSgxKTtcbiAgICAgICAgdmFyIGJ1dHRvbklkID0gJ2Ryb3Bkb3duJyArIGluZGV4ICsgJ2J1dHRvbic7XG4gICAgICAgIHZhciB1bElkID0gJ2Ryb3Bkb3duJyArIGluZGV4O1xuICAgICAgICB2YXIgdG9BcHBlbmQgPSAnJztcblxuICAgICAgICAvLyBmaWx0ZXIgdGV4dFxuICAgICAgICB0b0FwcGVuZCArPSAnPHA+PGI+JyArIGZpbHRlck5hbWUgKyAnOjwvYj48L3A+JztcbiAgICAgICAgdG9BcHBlbmQgKz0gJzxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+JztcbiAgICAgICAgdG9BcHBlbmQgKz0gJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJmYm94JyArIGluZGV4ICsgJy0nK2ZCb3gubWFwKydcIic7XG5cbiAgICAgICAgLy8gYnVpbGQgdGhlIHBsYWNlaG9sZGVyIC0gY2hlY2sgaWYgd2UgaGF2ZSBjb250aW51b3VzIG9yIGRpc2NyZXRlIHZhbHVlc1xuICAgICAgICBpZiAoY3VycmVudEZpbHRlci5jb250aW51b3VzKVxuICAgICAgICAgICAgdG9BcHBlbmQgKz0gJ3BsYWNlaG9sZGVyPVwiJyArIGN1cnJlbnRGaWx0ZXIubWluICsgJy4uLicgKyBjdXJyZW50RmlsdGVyLm1heCArICdcIiArPic7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRvQXBwZW5kICs9ICdwbGFjZWhvbGRlcj1cIicgKyBjdXJyZW50RmlsdGVyLnZhbHVlcy5qb2luKCkgKyAnXCIgKz4nO1xuICAgICAgICB0b0FwcGVuZCArPSAnPC9kaXY+JztcblxuICAgICAgICAkKCcjJytmQm94LmlkKS5hcHBlbmQodG9BcHBlbmQpO1xuXG4gICAgICAgIC8vIGFkZCBCb290c3RyYXAgdG9vbHRpcCB0byB0aGUgZmlsdGVycyBib3hcbiAgICAgICAgLypcbiAgICAgICAgJCgnIycrZkJveC5pZCkudG9vbHRpcCh7XG4gICAgICAgICAgICB0aXRsZTogXCJVc2UgdGhpcyBmaWx0ZXIgYm94IHRvIGZpbHRlciBieSBtdWx0aXBsZSBmaWx0ZXJzXCIsXG4gICAgICAgICAgICBwbGFjZW1lbnQ6IFwiYm90dG9tXCJcbiAgICAgICAgfSk7XG4gICAgICAgICovXG4gICAgfSk7XG5cbiAgICAvLyBhZGQgdGhlIGJ1dHRvbnNcbiAgICB2YXIgdGV4dFRvQXBwZW5kID0gJzxidXR0b24gaWQ9XCInK2ZCb3guaWQrJ19hcHBseV9maWx0ZXJzXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGNvbC1zbS00IGNvbC1zbS1vZmZzZXQtMVwiPkZpbHRlcjwvYnV0dG9uPicgK1xuICAgICAgICAnPGJ1dHRvbiBpZD1cIicrZkJveC5pZCsnX3Jlc2V0X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+UmVzZXQ8L2J1dHRvbj4nO1xuICAgICQoJyMnK2ZCb3guaWQpLmFwcGVuZCh0ZXh0VG9BcHBlbmQpO1xuXG4gICAgLy8gdHJpZ2dlcmVkIHdoZW4gdGhlIHNlYXJjaCBidXR0b24gaXMgY2xpY2tlZFxuICAgICQoJyMnK2ZCb3guaWQrJ19hcHBseV9maWx0ZXJzJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgdGhlICdoYXMtZXJyb3InIGlucHV0IGJveGVzXG4gICAgICAgIGZCb3gucmVzdG9yZUlucHV0Qm94ZXMoKTtcbiAgICAgICAgdmFyIGpzb25PYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIG51bUZpbHRlcnMgPSBmQm94LmZpbHRlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgZW1wdHlGaWx0ZXJzID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GaWx0ZXJzOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIG5leHQgZmlsdGVyIGlkJ3NcbiAgICAgICAgICAgIHZhciBjdXJyZW50RmlsdGVyID0gJyNmYm94JyArIGkgKyAnLScrZkJveC5tYXA7XG4gICAgICAgICAgICAvLyBjdXJyZW50IGFuZCBuZXh0IGZpbHRlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhciBjdXJyZW50RmlsdGVyVmFsdWUgPSAkKGN1cnJlbnRGaWx0ZXIpLnZhbCgpO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbnkgZmlsdGVyaW5nIHRvIGFwcGx5IG9yIG5vdFxuICAgICAgICAgICAgaWYgKGN1cnJlbnRGaWx0ZXJWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBqc29uT2JqZWN0W2ZCb3guZmlsdGVyc1tpXS5uYW1lXSA9IGN1cnJlbnRGaWx0ZXJWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1wdHlGaWx0ZXJzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgdGhlIHVzZXIgc2VsZWN0aW5nIHRoZSBGaWx0ZXIgYnV0dG9uIHdpdGhvdXQgaW5wdXRpbmcgYW55IGRhdGFcbiAgICAgICAgaWYgKGVtcHR5RmlsdGVycyAhPSBudW1GaWx0ZXJzKSB7XG4gICAgICAgICAgICBmQm94LmZpbHRlcihqc29uT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdHJpZ2dlcmVkIHdoZW4gdGhlIHJlc2V0IGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJCgnIycrZkJveC5pZCsnX3Jlc2V0X2ZpbHRlcnMnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgZkJveC5yZXN0b3JlSW5wdXRCb3hlcygpO1xuICAgICAgICBmQm94LnJlc2V0RmlsdGVyc0JveCgpO1xuICAgIH0pO1xufVxuXG5cbkZpbHRlcnNCb3gucHJvdG90eXBlLmNyZWF0ZUZpbHRlcnNCb3hDaGVja2JveGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAkKCdmaWx0ZXItYm94JykuYXBwZW5kKCc8dWwgY2xhc3M9XCJuYXYgbmF2YmFyLW5hdlwiIGlkPVwiZmlsdGVyQm94Q2hlY2tib3hlc1wiIHN0eWxlPVwiYm9yZGVyLXN0eWxlOiBzb2xpZDsgYm9yZGVyLXdpZHRoOiAycHg7XCI+PC91bD4nKTtcblxuICAgIC8vIGdldCBhbGwgdGhlIGZpbHRlcnNcbiAgICAkLmVhY2godGhpcy5maWx0ZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuICAgICAgICB2YXIgYm94SUQgPSAnI2JveCcgKyAoaW5kZXggKyAxKTtcbiAgICAgICAgLy8gYXBwZW5kIHRvIHRoZSBIVE1MXG4gICAgICAgICQoJyNmaWx0ZXJCb3hDaGVja2JveGVzJykuYXBwZW5kKCc8bGkgY2xhc3M9XCJjb2wtc20tNlwiIGlkPVwiYm94JyArIChpbmRleCArIDEpICsgJ1wiIGNsYXNzPVwiZHJvcGRvd24tY2hlY2tib3gtZXhhbXBsZSBkcm9wZG93bi1jaGVja2JveCBkcm9wZG93blwiPjwvbGk+Jyk7XG5cbiAgICAgICAgLy8gZmlsbCB0aGUgdGFicyBmb3IgdGhlIHllYXIgZmlsdGVyXG4gICAgICAgIHZhciB0YWIgPSBbXTtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlcyBhcmUgY29udGludW91cyBvciBkaXNjcmV0ZVxuICAgICAgICBpZiAoY3VycmVudEZpbHRlci5jb250aW51b3VzKSB7XG4gICAgICAgICAgICAvLyBjb250aW51b3VzIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZGlzY3JldGUgdmFsdWVzXG4gICAgICAgICAgICAkLmVhY2goY3VycmVudEZpbHRlci52YWx1ZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0YWIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICdpZCc6IGluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzogY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAnaXNDaGVja2VkJzogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcCh3YXQpIHtcbiAgICAgICAgICAgIHJldHVybiAnPHA+JyArIEpTT04uc3RyaW5naWZ5KHdhdCkgKyAnPC9wPic7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVTdGF0dXMoKSB7XG4gICAgICAgICAgICB2YXIgJHAgPSAkKCdwLnN0YXR1cycpLmVtcHR5KCk7XG4gICAgICAgICAgICAkcC5hcHBlbmQocCh3aWRnZXQuY2hlY2tlZCgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkcm9wZG93biB3aXRoIGNoZWNrYm94ZXMgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgdmFyIG5hbWUgPSBjdXJyZW50RmlsdGVyLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbmFtZSA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICAkKGJveElEKS5kcm9wZG93bkNoZWNrYm94KHtcbiAgICAgICAgICAgIGRhdGE6IHRhYixcbiAgICAgICAgICAgIGF1dG9zZWFyY2g6IHRydWUsXG4gICAgICAgICAgICBoaWRlSGVhZGVyOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIHNob3cgbnVtYmVyIG9mIHNlbGVjdGVkIGl0ZW1zXG4gICAgICAgICAgICBzaG93TmJTZWxlY3RlZDogZmFsc2UsXG4gICAgICAgICAgICB0ZW1wbGF0ZUJ1dHRvbjogJzxhIGNsYXNzPVwiZHJvcGRvd24tY2hlY2tib3gtdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGhyZWY9XCIjXCI+JyArIG5hbWUgKyAnPHNwYW4gY2xhc3M9XCJkcm9wZG93bi1jaGVja2JveC1uYnNlbGVjdGVkXCI+PC9zcGFuPjxiIGNsYXNzPVwiY2FyZXRcIj48L2I+J1xuICAgICAgICB9KTtcbiAgICAgICAgd2lkZ2V0ID0gJChib3hJRCkuZGF0YSgnZHJvcGRvd25DaGVja2JveCcpO1xuXG4gICAgICAgICQoJ2JvZHknKS5vbignY2hhbmdlOmRyb3Bkb3duLWNoZWNrYm94IGNoZWNrZWQgY2hlY2tlZDphbGwgY2hlY2s6YWxsIHVuY2hlY2s6YWxsIGNoZWNrOmNoZWNrZWQgdW5jaGVjazpjaGVja2VkJywgdXBkYXRlU3RhdHVzKCkpO1xuICAgICAgICB1cGRhdGVTdGF0dXMoKTtcbiAgICB9KTtcblxuICAgIC8vIGFwcGVuZCBmaWx0ZXIgYW5kIHJlc2V0IGJ1dHRvblxuICAgIHZhciB0ZXh0VG9BcHBlbmQgPSAnPGRpdiBpZD1cImZpbHRlcnNfYm94XCIgY2xhc3M9XCJyb3cgY29sLXNtLTEyXCI+JyArXG4gICAgICAgICc8YnV0dG9uIGlkPVwiZmlsdGVyX2JveF9hcHBseV9maWx0ZXJzXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGNvbC1zbS00IGNvbC1zbS1vZmZzZXQtMVwiPkZpbHRlcjwvYnV0dG9uPicgK1xuICAgICAgICAnPGJ1dHRvbiBpZD1cImZpbHRlcl9ib3hfcmVzZXRfZmlsdGVyc1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBjb2wtc20tNCBjb2wtc20tb2Zmc2V0LTFcIj5SZXNldDwvYnV0dG9uPjwvZGl2Pic7XG4gICAgJCgnI2ZpbHRlckJveENoZWNrYm94ZXMnKS5hcHBlbmQodGV4dFRvQXBwZW5kKTtcblxuICAgIC8vIHRyaWdnZXJlZCB3aGVuIHRoZSBzZWFyY2ggYnV0dG9uIGlzIGNsaWNrZWRcbiAgICAkKFwiI2ZpbHRlcl9ib3hfYXBwbHlfZmlsdGVyc1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGFsbCB0aGUgJ2hhcy1lcnJvcicgaW5wdXQgYm94ZXNcbiAgICAgICAgcmVzdG9yZUlucHV0Qm94ZXMoKTtcbiAgICAgICAgdmFyIGpzb25PYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIG51bUZpbHRlcnMgPSBqc29uRmlsdGVyc0FycmF5Lmxlbmd0aDtcbiAgICAgICAgdmFyIGVtcHR5RmlsdGVycyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbkZpbHRlcnNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgaWQnc1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRGaWx0ZXIgPSBcIiNib3hcIiArIChpICsgMSk7XG4gICAgICAgICAgICAvLyBjdXJyZW50IGZpbHRlciB2YWx1ZXMgLSBzZWxlY3RlZCBpdGVtc1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSXRlbXMgPSBnZXRTZWxlY3RlZEl0ZW1zKGN1cnJlbnRGaWx0ZXIpO1xuICAgICAgICAgICAgdmFyIGl0ZW1zQXJyYXkgPSBbXTtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0ZWRJdGVtcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpdGVtc0FycmF5LnB1c2goc2VsZWN0ZWRJdGVtc1trZXlzW2pdXS5sYWJlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBoYXZlIGFueSBmaWx0ZXJpbmcgdG8gYXBwbHkgb3Igbm90XG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAganNvbk9iamVjdFtqc29uRmlsdGVyc0FycmF5W2ldLm5hbWVdID0gaXRlbXNBcnJheS5qb2luKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtcHR5RmlsdGVycysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGF2b2lkIHRoZSB1c2VyIHNlbGVjdGluZyB0aGUgRmlsdGVyIGJ1dHRvbiB3aXRob3V0IGlucHV0aW5nIGFueSBkYXRhXG4gICAgICAgIGlmIChlbXB0eUZpbHRlcnMgIT0gbnVtRmlsdGVycykge1xuICAgICAgICAgICAgZmlsdGVyKGpzb25PYmplY3QpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgcmVzZXQgYnV0dG9uIGlzIGNsaWNrZWRcbiAgICAkKFwiI2ZpbHRlcl9ib3hfcmVzZXRfZmlsdGVyc1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzZXRGaWx0ZXJzQm94KCk7XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=