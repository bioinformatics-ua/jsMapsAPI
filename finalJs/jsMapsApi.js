function buildCountryTooltip(e,r){var o=countryTooltip;return o=o.replace("name",e.html()),o=o.replace("count",r.Count)}function buildMarkerTooltip(e,r){var o=markerTooltip;return o=o.replace("description",e[r].desc),o=o.replace("latitude",e[r].Latitude),o=o.replace("longitude",e[r].Longitude)}function buildRegionTooltip(e){var r=regionTooltip;return r=r.replace("name",e.name)}function mapRange(e,r,o,n,t){return n+(t-n)*(e-r)/(o-r)}function generateColorsForTheCountries(e){e||(e=jsonCountries);var r=[];return $.each(e,function(e,o){r[o.Country]=o.Count}),r}function readCountriesFromJSON(e){{var r=[];e.length}return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r[e]=new Country(o),r[e].Count>maxCount&&(maxCount=r[e].Count),r[e].Count<minCount&&(minCount=r[e].Count)}),r}function findCountryByName(e){var r=null;return $.each(jsonCountries,function(o,n){return n.Country==e?r=n:void 0}),r}function readMinMax(e){minCount=1/0,maxCount=-(1/0);var r=[];for(var o in e)e.hasOwnProperty(o)&&r.push(o);$.each(r,function(e,r){var o=findCountryByName(r);o.Count>maxCount&&(maxCount=o.Count),o.Count<minCount&&(minCount=o.Count)})}function createFiltersBoxCheckboxes(){$("filter-box").append('<ul class="nav navbar-nav" id="filterBoxCheckboxes" style="border-style: solid; border-width: 2px;"></ul>'),$.each(jsonFiltersArray,function(e,r){function o(e){return"<p>"+JSON.stringify(e)+"</p>"}function n(){var e=$("p.status").empty();e.append(o(widget.checked()))}var t="#box"+(e+1);$("#filterBoxCheckboxes").append('<li class="col-sm-6" id="box'+(e+1)+'" class="dropdown-checkbox-example dropdown-checkbox dropdown"></li>');var a=[];$.each(r.Values,function(e,r){a.push({id:e+1,label:r,isChecked:!1})});var i=r.Name.toLowerCase();i=i.charAt(0).toUpperCase()+i.slice(1),$(t).dropdownCheckbox({data:a,autosearch:!0,hideHeader:!1,showNbSelected:!1,templateButton:'<a class="dropdown-checkbox-toggle" data-toggle="dropdown" href="#">'+i+'<span class="dropdown-checkbox-nbselected"></span><b class="caret"></b>'}),widget=$(t).data("dropdownCheckbox"),$("body").on("change:dropdown-checkbox checked checked:all check:all uncheck:all check:checked uncheck:checked",n()),n()});var e='<div id="filters_box" class="row col-sm-12"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("#filterBoxCheckboxes").append(e),$("#filter_box_apply_filters").click(function(){for(var e={},r=jsonFiltersArray.length,o=0,n=0;n<jsonFiltersArray.length;n++){for(var t="#box"+(n+1),a=getSelectedItems(t),i=[],s=Object.keys(a),l=0;l<s.length;l++)i.push(a[s[l]].label);s.length>0?e[jsonFiltersArray[n].Name]=i.join():o++}o!=r&&filter(e)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getSelectedItems(e){return $(e).dropdownCheckbox("checked")}function createFiltersBoxWithEnumeration(e){e.length;$.each(e,function(e,r){var o=r.Name.toLowerCase();o=o.charAt(0).toUpperCase()+o.slice(1);var n="";n+="<p><b>"+o+":</b></p>",n+='<div class="form-group">',n+='<input type="text" class="form-control" id="fbox'+e+'"';var t=r.Values;n+='placeholder="'+t+'" +>',n+="</div>",$("filter-box").append(n),$("#filter-box").tooltip({title:"Use this filter box to filter by multiple filters",placement:"bottom"})});var r='<div id="filters_box"><button id="filter_box_apply_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Filter</button><button id="filter_box_reset_filters" type="button" class="btn btn-primary col-sm-4 col-sm-offset-1">Reset</button></div>';$("filter-box").append(r),$("#filter_box_apply_filters").click(function(){for(var r={},o=e.length,n=0,t=0;t<e.length;t++){var a="#fbox"+t,i=$(a).val();""!==i?r[e[t].Name]=i:n++}n!=o&&filter(r)}),$("#filter_box_reset_filters").click(function(){resetFiltersBox()})}function getAllFilterValues(e){var r=[];if(-1!=String(e).indexOf(",")){var o=String(e).split(",");$.each(o,function(e,o){if(-1!=o.indexOf("-")){var n=String(o).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(o)})}else if(-1!=e.indexOf("-")){var n=String(e).split("-");checkFilterValuesAreValid(filterObject,n);for(var t=n[0],a=n[1];a>=t;t++)r.push(t)}else r.push(e);return r}function checkWhatCountriesToAdd(e,r){var o=[];return $.each(jsonCountries,function(e,n){for(var t=0;;){t++;var a="Name"+t,i="Value"+t;if(!n[a])break;n[i]==r&&(countryValueToCheck=i,n[i]==r&&(o[n.Country]=n.Count))}}),o}function checkWhatMarkersToAdd(e,r){var o=[];return $.each(jsonMarkers,function(n,t){for(var a=0;;){a++;var i="Name"+a,s="Value"+a;if(!t[i])break;t[i]==e.Name&&t[s]==r&&o.push(t)}}),o}function checkWhatCountriesMarkersToAdd(e,r){var o=[],n=[];return o=checkWhatCountriesToAdd(e,r),n=checkWhatMarkersToAdd(e,r),[o,n]}function checkFilterNameIsValid(e){var r=!1;return $.each(jsonFiltersArray,function(o,n){return n.Name.toLowerCase()===e.toLowerCase()?(filterObject=n,void(r=!0)):void 0}),r}function checkFilterValuesAreValid(e,r){var o=!1;return $.each(r,function(e,r){return $.each(filterObject.Values,function(e,n){return n==r?void(o=!0):void 0}),o?void 0:void console.log("Invalid value for the filter: "+r)}),o}function addMarkersToMap(e){$.each(e,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function resetFilters(){var e=generateColorsForTheCountries();reloadMap(e),$.each(jsonMarkers,function(e,r){map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function filterFromMenuSelected(e,r){currentFilter=e;var o=checkWhatCountriesToAdd(e,r);if(reloadMap(o),$.each(jsonMarkers,function(o,n){for(var t=0;;){t++;var a="Name"+t,i="Value"+t;if(!n[a])break;n[a]===e.Name&&n[i]===r&&map.addMarker(o,{latLng:[n.Latitude,n.Longitude],name:n.desc,style:{fill:"green",r:mapRange(n.Count,minCount,maxCount,minRadius,maxRadius)}})}}),isNaN(e.Values[0]))$("#slider").hide(),$("#minSlider").hide(),$("#maxSlider").hide();else{$("#slider").show(),$("#minSlider").show(),$("#maxSlider").show();var n=$("#slider").slider(),t=e.Values[0],a=e.Values[e.Values.length-1];n.slider("option","min",t),n.slider("option","max",a),$("#minSlider").text(t),$("#maxSlider").text(a)}}function sliderChanged(){var e=slider.slider("option","values"),r=e[0],o=e[1],n=currentFilter.Name;$("#minSlider").text(r),$("#maxSlider").text(o);var t=[];$.each(jsonCountries,function(e,n){var a=+n[countryValueToCheck];a>=r&&o>=a&&(t[n.Country]=n.Count)}),reloadMap(t);for(var a,i=jsonCountries[0],s=0;;){s++;var l="Name"+s,u="Value"+s;if(i[l]===n){a=u;break}}$.each(jsonMarkers,function(e,n){n[a]>=r&&n[a]<=o&&map.addMarker(e,{latLng:[n.Latitude,n.Longitude],name:n.desc,style:{fill:"green",r:mapRange(n.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readFiltersFromJSON(e){for(var r=[],o=0;o<e.values.length;o++){currentFilter=e.values[o];for(var n=currentFilter.name,t=currentFilter.value,a=[],i=0;i<currentFilter.values.length;i++)a.push(currentFilter.values[i]);r[o]=new Filter(n,t,a)}return numFilters=r.length,r}function jsonMapCountries(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.Country],a=0;o[e]=new Country("",t,a)}),mappingCountries=o,console.log(mappingCountries)})}function jsonMapMarkers(e,r){var o=[];$.getJSON(r,function(r){$.each(e,function(e,n){var t=n[r.Country],a=0,i=n[r.Latitude],s=n[r.Longitude];o[e]=new Marker("",t,a,i,s)}),mappingMarkers=o,console.log(mappingMarkers)})}function reloadMap(e){if(map.params.map==mType){jsonCountries.length>0&&readMinMax(e);var r={vertical:!0},o={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:r},n={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]};finalMarkersInMap=o,"markers"==dataType&&(finalMarkersInMap=n),$("#"+mDiv).empty(),map=new jvm.Map({map:mType,backgroundColor:background,container:$("#"+mDiv),onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.Country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:e}]}})}else jsonCountries.length>0&&readMinMax(e),$("#"+mDiv).empty(),removeTooltip(),switchMap(mapType)}function removeTooltip(){$(".jvectormap-tip").remove()}function switchMap(e){$("#"+mDiv).empty(),removeTooltip();var r=generateColorsForTheRegions(e);map=new jvm.Map({map:e,backgroundColor:background,container:$("#"+mDiv),onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(r,o,n){var t=e.split("_")[0].toUpperCase(),a=-1;$.each(jsonCountries,function(e,r){return r.Country==t?void(a=r):void 0});var i,s=!1;$.each(map.regions,function(e,r){return r.name==n?(console.log("+"),i=r,void(s=!0)):void 0}),o.html(s?buildRegionTooltip(i):o.html())},series:{markers:[{scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:{vertical:!0}}],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:r}]}}),$("#my_map").append('<div class="jvectormap-goback">Back</div>'),$(".jvectormap-goback").click(function(){$("#"+mDiv).empty(),removeTooltip(),map=new jvm.Map({container:$("#"+mDiv),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.Country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[{scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:{vertical:!0}}],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),thereAreMarkers&&addMarkersToMap()}),thereAreMarkers&&addMarkersToMap(),jsonCountries}function addMarkersToMap(){var e=[];$.each(filteredMarkers,function(r,o){var n={latLng:[o.Latitude,o.Longitude],name:o.desc,style:{fill:"green",r:mapRange(o.Count,minCount,maxCount,minRadius,maxRadius)}};e.push(n)}),map.addMarkers(e)}function readMarkersFromJSON(e){var r=[];return minCount=1/0,maxCount=-(1/0),$.each(e,function(e,o){r[e]=new Marker(o);var n=r[e].Count;n>maxCount&&(maxCount=n),n<minCount&&(minCount=n)}),r}function filter(e){var r=Object.keys(e),o=r.length,n=0,t=new Array,a=new Array;for(l=0;o>l;l++)t[l]=new Array,a[l]=new Array;var i=!1;if($.each(r,function(e,r){return"all"==r.toLowerCase()?(i=!0,resetFilters(),void resetFiltersBox()):void 0}),!i){$.each(r,function(r,o){if(!checkFilterNameIsValid(o))return void console.log("Invalid filter name!("+o+")");var i=e[o],s=getAllFilterValues(i);n++,$.each(s,function(e,o){var n=checkWhatCountriesMarkersToAdd(filterObject,o),i=n[0],s=n[1];$.each(Object.keys(i),function(e,o){var n=i[o];t[r][o]=n}),$.each(s,function(e,o){a[r].push(o)})})});var s=[];if(t.length>0){s=t[0];for(var l=0;l<t.length-1;l++)s=getCountriesIntersection(s,t[l+1])}if(reloadMap(s),filteredMarkers=[],a.length>0){filteredMarkers=a[0];for(var l=0;l<a.length-1;l++)filteredMarkers=getMarkersIntersection(filteredMarkers,a[l+1])}addMarkersToMap()}}function getMarkersIntersection(e,r){var o=[];return $.each(e,function(e,n){var t=n.Country;$.each(r,function(e,r){var a=r.Country;t==a&&o.push(n)})}),o}function getCountriesIntersection(e,r){var o=[];return $.each(Object.keys(e),function(n,t){$.each(Object.keys(r),function(r,n){t==n&&(o[t]=e[t])})}),o}function applyMultipleFiltersProgramattically(e){var r=Object.keys(e),o=r.length,n=[],t=[];$.each(r,function(r,o){e[o]});var a=[];map.removeAllMarkers(),$.each(jsonCountries,function(o,t){n[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!t[s])break;t[s].toLowerCase()==a.toLowerCase()&&t[l]==e[a]&&n[o]++}})}),$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.Country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(r,function(r,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!n[s])break;n[s].toLowerCase()==a.toLowerCase()&&n[l]==e[a]&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function applyMultipleFilters(e,r){var o=e.filter(function(e){return void 0!==e}).length,n=[],t=[];$.each(jsonCountries,function(o,t){n[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(void 0==t[s])break;t[s]===r[e].Name&&t[l]==a&&n[o]++}})});var a=[];$.each(jsonCountries,function(e,r){n[e]==o&&(a[r.Country]=r.Count)}),reloadMap(a),$.each(jsonMarkers,function(o,n){t[o]=0,$.each(e,function(e,a){for(var i=0;;){i++;var s="Name"+i,l="Value"+i;if(!n[s])break;n[s].toLowerCase()==r[e].Name.toLowerCase()&&n[l]==a&&t[o]++}})}),$.each(jsonMarkers,function(e,r){t[e]==o&&map.addMarker(e,{latLng:[r.Latitude,r.Longitude],name:r.desc,style:{fill:"green",r:mapRange(r.Count,minCount,maxCount,minRadius,maxRadius)}})})}function readRegionsFromJSON(e,r){var o=[];return $.each(e,function(e,n){o[e]=new Region(n,r)}),e}function generateColorsForTheRegions(e){var r=e.split("_")[0].toUpperCase(),o=[];return $.each(jsonCountries,function(e,n){if(n.Country==r&&n.Regions){var t=n.Regions;$.each(t,function(e,r){o[r.name]=100})}}),o}function addRegionsToMap(e){var r=e.split("_")[0].toUpperCase();$.each(jsonCountries,function(e,o){function n(){var e,r={};r[maps.region];for(e in maps.regions)r[e]=t[Math.floor(Math.random()*t.length)];return r}if(o.Country==r&&o.Regions){var t=(o.Regions,["#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854"]);console.log(n()),maps.series.regions[0].setValues(n())}})}var vectorMap,jsonFilters=[],minColorMap,maxColorMap,mDiv,mType,background,filteredMarkers,thereAreMarkers=!1,VectorialMap=function(){};VectorialMap.prototype.createMap=function(e,r,o,n,t,a,i,s,l){if(background=s,mType=i,jsonCountries=[],jsonMarkers=[],mDiv=n,minColorMap=t,maxColorMap=a,"countries"==l)jsonCountries=readCountriesFromJSON(e);else{if("markers"!=l)return void console.error("You must give as input a list of markers or countries!");thereAreMarkers=!0,jsonMarkers=readMarkersFromJSON(e),filteredMarkers=jsonMarkers,numMarkers=jsonMarkers.length}auxColors=generateColorsForTheCountries(),jQuery.ajax({url:"../tooltip-templates/country_tooltip.html",success:function(e){countryTooltip=e},async:!1}),jQuery.ajax({url:"./tooltip-templates/marker_tooltip.html",success:function(e){markerTooltip=e},async:!1}),jQuery.ajax({url:"./tooltip-templates/region_tooltip.html",success:function(e){regionTooltip=e},async:!1});var u={vertical:!0},c={scale:[minColorMap,maxColorMap],values:[minCount,maxCount],legend:u},d={scale:[minColorMap,maxColorMap],values:[minCount,maxCount]};finalMarkersInMap=c,"markers"==l&&(finalMarkersInMap=d),map=new jvm.Map({container:$("#"+n),map:mType,backgroundColor:background,onRegionClick:function(e,r){countryCode=r.toLowerCase();var o=countryCode+"_mill_en";switchMap(o)},onMarkerTipShow:function(e,r,o){var n=buildMarkerTooltip(jsonMarkers,o);r.html(n)},onRegionTipShow:function(e,r,o){var n=-1;if($.each(jsonCountries,function(e,r){return r.Country===o?void(n=r):void 0}),-1!=n){var t=buildCountryTooltip(r,n);r.html(t)}else r.html(r.html())},series:{markers:[finalMarkersInMap],regions:[{scale:[minColorMap,maxColorMap],attribute:"fill",values:auxColors}]}}),"markers"==l&&(filteredMarkers=jsonMarkers,addMarkersToMap())},VectorialMap.prototype.filterOnServer=function(e){$.getJSON("../json/serverFilter.json",function(e){var r=JSON.stringify(e),o="http://serverFiltering.com/?data="+encodeURIComponent(r);o="../json/countries_plus_markers2.json",$.getJSON(o,function(e){jsonCountries=readCountriesFromJSON(e.countries);var r=generateColorsForTheCountries(jsonCountries);reloadMap(r),e.markers&&(jsonMarkers=readMarkersFromJSON(e.markers),addMarkersToMap())})})};var Country=function(e,r,o){if(""==e)this.Country=r,this.Count=+o,this.Var=0,this.desc="abc";else{var n=!0,t=0;do{t++;var a="Name"+t,i="Value"+t;void 0===e[a]?n=!1:(this[a]=e[a],this[i]=e[i])}while(n);e.Regions&&(this.Regions=readRegionsFromJSON(e.Regions,e.Country)),this.Country=e.Country,this.Count=+e.Count,this.Var=e.Var,this.desc="abc"}},resetFiltersBox=function(){for(var e=0;numFilters>e;e++)$("#fbox"+e).text(""),$("#fbox"+e).val("");var r=generateColorsForTheCountries();reloadMap(r),filteredMarkers=jsonMarkers,addMarkersToMap()},Filter=function(e,r,o){this.Name=e,this.Value=r,this.Values=o},numFilters,currentFilter,countryValueToCheck;VectorialMap.prototype.createSlider=function(){slider=$("#slider").slider(),slider.slider("option","min",minRadius),slider.slider("option","max",maxRadius),slider.slider("option","range",!0),slider.slider("option","animate","slow"),slider.on("slidechange",function(e,r){sliderChanged()}),$("#slider").hide(),$("#minSlider").hide(),$("#maxSlider").hide()};var mappingMarkers=[],mappingCountries=[];VectorialMap.prototype.registerTransformer=function(e,r,o){var r="../mappingJSON/mappingCountriesSample.json",o="../mappingJSON/mappingMarkersSample.json";return r?o?(e="../json/espid-spain.json",void $.getJSON(e,function(e){jsonMapCountries(e,r),jsonMapMarkers(e,o)})):void console.error("you must specify a markers mapping json"):void console.error("you must specify a countries mapping json")};var Marker=function(e,r,o,n,t){if(""==e)this.Country=r,this.Count=+o,this.Var="",this.Latitude=n,this.Longitude=t,this.desc="abc";else{var a=!0,i=0;do{i++;var s="Name"+i,l="Value"+i;e[s]?(this[s]=e[s],this[l]=e[l]):a=!1}while(a);this.Country=e.Country,this.Count=+e.Count,this.Var=e.Var,this.Latitude=e.Latitude,this.Longitude=e.Longitude,this.desc="abc"}},Region=function(e,r){this.Region=e.name,this.Country=r,this.desc="just a region..."};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJjb3VudHJpZXMuanMiLCJjcmVhdGVGaWx0ZXJzLmpzIiwiZmlsdGVycy1hdXhpbGlhcnkuanMiLCJmaWx0ZXJzLmpzIiwianNvbi1tYXBwaW5nLmpzIiwibWFwcy1hdXhpbGlhcnkuanMiLCJtYXJrZXJzLmpzIiwibXVsdGlwbGUtZmlsdGVycy5qcyIsInJlZ2lvbnMuanMiXSwibmFtZXMiOlsiYnVpbGRDb3VudHJ5VG9vbHRpcCIsImNvdW50cnlOYW1lIiwic2VsZWN0ZWRDb3VudHJ5IiwiZmluYWxUb29sdGlwIiwiY291bnRyeVRvb2x0aXAiLCJyZXBsYWNlIiwiaHRtbCIsIkNvdW50IiwiYnVpbGRNYXJrZXJUb29sdGlwIiwianNvbk1hcmtlcnMiLCJpbmRleCIsIm1hcmtlclRvb2x0aXAiLCJkZXNjIiwiTGF0aXR1ZGUiLCJMb25naXR1ZGUiLCJidWlsZFJlZ2lvblRvb2x0aXAiLCJyZWdpb24iLCJyZWdpb25Ub29sdGlwIiwibmFtZSIsIm1hcFJhbmdlIiwidmFsdWUiLCJsb3cxIiwiaGlnaDEiLCJsb3cyIiwiaGlnaDIiLCJnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyIsImNvdW50cmllcyIsImpzb25Db3VudHJpZXMiLCJjb3VudHJ5Q29sb3JzIiwiJCIsImVhY2giLCJjdXJyZW50Q291bnRyeSIsIkNvdW50cnkiLCJyZWFkQ291bnRyaWVzRnJvbUpTT04iLCJtYXJrZXJzIiwibGVuZ3RoIiwibWluQ291bnQiLCJJbmZpbml0eSIsIm1heENvdW50IiwiZmluZENvdW50cnlCeU5hbWUiLCJyZXR1cm5Db3VudHJ5IiwicmVhZE1pbk1heCIsImNvdW50cmllc05hbWVzIiwia2V5cyIsImtleSIsImhhc093blByb3BlcnR5IiwicHVzaCIsImN1cnJlbnRDb3VudHJ5TmFtZSIsImNyZWF0ZUZpbHRlcnNCb3hDaGVja2JveGVzIiwiYXBwZW5kIiwianNvbkZpbHRlcnNBcnJheSIsImN1cnJlbnRGaWx0ZXIiLCJwIiwid2F0IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZVN0YXR1cyIsIiRwIiwiZW1wdHkiLCJ3aWRnZXQiLCJjaGVja2VkIiwiYm94SUQiLCJ0YWIiLCJWYWx1ZXMiLCJjdXJyZW50VmFsdWUiLCJpZCIsImxhYmVsIiwiaXNDaGVja2VkIiwiTmFtZSIsInRvTG93ZXJDYXNlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImRyb3Bkb3duQ2hlY2tib3giLCJkYXRhIiwiYXV0b3NlYXJjaCIsImhpZGVIZWFkZXIiLCJzaG93TmJTZWxlY3RlZCIsInRlbXBsYXRlQnV0dG9uIiwib24iLCJ0ZXh0VG9BcHBlbmQiLCJjbGljayIsImpzb25PYmplY3QiLCJudW1GaWx0ZXJzIiwiZW1wdHlGaWx0ZXJzIiwiaSIsInNlbGVjdGVkSXRlbXMiLCJnZXRTZWxlY3RlZEl0ZW1zIiwiaXRlbXNBcnJheSIsIk9iamVjdCIsImoiLCJqb2luIiwiZmlsdGVyIiwicmVzZXRGaWx0ZXJzQm94IiwiY3JlYXRlRmlsdGVyc0JveFdpdGhFbnVtZXJhdGlvbiIsImpzb25GaWx0ZXJzIiwiZmlsdGVyTmFtZSIsInRvQXBwZW5kIiwicGxhY2Vob2xkZXIiLCJ0b29sdGlwIiwidGl0bGUiLCJwbGFjZW1lbnQiLCJjdXJyZW50RmlsdGVyVmFsdWUiLCJ2YWwiLCJnZXRBbGxGaWx0ZXJWYWx1ZXMiLCJmaWx0ZXJWYWx1ZSIsInJldHVyblBhcnRzIiwiU3RyaW5nIiwiaW5kZXhPZiIsImVudW1lcmF0aW9uUGFydHMiLCJzcGxpdCIsImN1cnJlbnRFbnVtZXJhdGlvbiIsInJhbmdlUGFydHMiLCJjaGVja0ZpbHRlclZhbHVlc0FyZVZhbGlkIiwiZmlsdGVyT2JqZWN0IiwibWluIiwibWF4Iiwic3ViUGFydHMiLCJjaGVja1doYXRDb3VudHJpZXNUb0FkZCIsInNlbGVjdGVkRmlsdGVyIiwiY3VycmVudE5hbWVUb0NoZWNrIiwiY291bnRyeVZhbHVlVG9DaGVjayIsImNoZWNrV2hhdE1hcmtlcnNUb0FkZCIsImN1cnJlbnRNYXJrZXIiLCJjaGVja1doYXRDb3VudHJpZXNNYXJrZXJzVG9BZGQiLCJjb3VudHJpZXNUb0FkZCIsIm1hcmtlcnNUb0FkZCIsImNoZWNrRmlsdGVyTmFtZUlzVmFsaWQiLCJ2YWxpZCIsImZpbHRlclZhbHVlcyIsInBhcnQiLCJjb25zb2xlIiwibG9nIiwiYWRkTWFya2Vyc1RvTWFwIiwibWFwIiwiYWRkTWFya2VyIiwibGF0TG5nIiwic3R5bGUiLCJmaWxsIiwiciIsIm1pblJhZGl1cyIsIm1heFJhZGl1cyIsInJlc2V0RmlsdGVycyIsImNvbG9ycyIsInJlbG9hZE1hcCIsImZpbHRlckZyb21NZW51U2VsZWN0ZWQiLCJpc05hTiIsImhpZGUiLCJzaG93Iiwic2xpZGVyIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsInRleHQiLCJzbGlkZXJDaGFuZ2VkIiwiY3VycmVudFJhbmdlIiwiY3VycmVudEZpbHRlck5hbWUiLCJmaWx0ZXJWYWx1ZUZvckNvdW50cnkiLCJzZWxlY3RlZE5hbWUiLCJyZWFkRmlsdGVyc0Zyb21KU09OIiwiaW5wdXRGaWx0ZXJzIiwiZmlsdGVycyIsInZhbHVlcyIsIkZpbHRlciIsImpzb25NYXBDb3VudHJpZXMiLCJqc29uIiwiY291bnRyaWVzTWFwcGluZ0pzb24iLCJnZXRKU09OIiwianNvbk1hcHBpbmciLCJjdXJyZW50SlNPTiIsImNvdW50IiwibWFwcGluZ0NvdW50cmllcyIsImpzb25NYXBNYXJrZXJzIiwibWFya2Vyc01hcHBpbmdKc29uIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJNYXJrZXIiLCJtYXBwaW5nTWFya2VycyIsInBhcmFtcyIsIm1UeXBlIiwibGVnZW5kVmFyIiwidmVydGljYWwiLCJtYXJrZXJzV2l0aExlZ2VuZCIsInNjYWxlIiwibWluQ29sb3JNYXAiLCJtYXhDb2xvck1hcCIsImxlZ2VuZCIsIm1hcmtlcnNXaXRob3V0TGVnZW5kIiwiZmluYWxNYXJrZXJzSW5NYXAiLCJkYXRhVHlwZSIsIm1EaXYiLCJqdm0iLCJNYXAiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kIiwiY29udGFpbmVyIiwib25SZWdpb25DbGljayIsImUiLCJjb2RlIiwiY291bnRyeUNvZGUiLCJuZXdNYXAiLCJzd2l0Y2hNYXAiLCJvbk1hcmtlclRpcFNob3ciLCJvblJlZ2lvblRpcFNob3ciLCJzZXJpZXMiLCJyZWdpb25zIiwiYXR0cmlidXRlIiwicmVtb3ZlVG9vbHRpcCIsIm1hcFR5cGUiLCJyZW1vdmUiLCJyZWdpb25Db2xvcnMiLCJnZW5lcmF0ZUNvbG9yc0ZvclRoZVJlZ2lvbnMiLCJyZWdpb25OYW1lIiwiY3VycmVudE1hcCIsInNlbGVjdGVkUmVnaW9uIiwicmVnaW9uRm91bmQiLCJjdXJyZW50UmVnaW9uIiwiYXV4Q29sb3JzIiwidGhlcmVBcmVNYXJrZXJzIiwibWFya2Vyc0pTT05BcnJheSIsImZpbHRlcmVkTWFya2VycyIsImN1cnJlbnRNYXJrZXJKU09OIiwiYWRkTWFya2VycyIsInJlYWRNYXJrZXJzRnJvbUpTT04iLCJjdXJyZW50SlNPTk1hcmtlciIsImN1cnJlbnRDb3VudFZhbHVlIiwiaW5wdXRBcmdzIiwibnVtYmVyS2V5cyIsInZhbGlkRmlsdGVycyIsImNvdW50cmllc0J5RmlsdGVyIiwiQXJyYXkiLCJtYXJrZXJzQnlGaWx0ZXIiLCJleGl0IiwiZmluYWxQYXJ0cyIsImNoZWNrUmV0dXJuIiwiY291bnRyaWVzQXV4IiwibWFya2Vyc0F1eCIsImN1cnJlbnRLZXkiLCJrZXlWYWx1ZSIsImZpbmFsQ291bnRyaWVzIiwiZ2V0Q291bnRyaWVzSW50ZXJzZWN0aW9uIiwiZ2V0TWFya2Vyc0ludGVyc2VjdGlvbiIsIm1hcmtlcnNHcm91cDEiLCJtYXJrZXJzR3JvdXAyIiwibWFya2VyMSIsIm1hcmtlcjFDb3VudHJ5IiwibWFya2VyMiIsIm1hcmtlcjJDb3VudHJ5IiwiY291bnRyaWVzR3JvdXAxIiwiY291bnRyaWVzR3JvdXAyIiwiY291bnRyeU5hbWUxIiwiY291bnRyeU5hbWUyIiwiYXBwbHlNdWx0aXBsZUZpbHRlcnNQcm9ncmFtYXR0aWNhbGx5IiwiZmlsdGVyc1RvQXBwbHkiLCJudW1GaWx0ZXJzVG9BcHBseSIsImNvdW50cmllc0hhdmVGaWx0ZXIiLCJtYXJrZXJzSGF2ZUZpbHRlciIsInJlbW92ZUFsbE1hcmtlcnMiLCJjb3VudHJ5SW5kZXgiLCJtYXJrZXJJbmRleCIsImFwcGx5TXVsdGlwbGVGaWx0ZXJzIiwic2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMiLCJ1bmRlZmluZWQiLCJyZWFkUmVnaW9uc0Zyb21KU09OIiwiY291bnRyeSIsInJlZ2lvbnNBcnIiLCJSZWdpb24iLCJpc29Db2RlIiwiUmVnaW9ucyIsImFkZFJlZ2lvbnNUb01hcCIsImdlbmVyYXRlQ29sb3JzIiwibWFwcyIsInBhbGV0dGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzZXRWYWx1ZXMiLCJ2ZWN0b3JNYXAiLCJWZWN0b3JpYWxNYXAiLCJwcm90b3R5cGUiLCJjcmVhdGVNYXAiLCJpbnB1dEpTT04iLCJtYXBEaXYiLCJtaW5Db2xvciIsIm1heENvbG9yIiwiZXJyb3IiLCJudW1NYXJrZXJzIiwialF1ZXJ5IiwiYWpheCIsInVybCIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJhc3luYyIsImZpbHRlck9uU2VydmVyIiwiZmlsdGVyc0pTT04iLCJmaWx0ZXJzU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY291bnRyeU9iamVjdCIsInRoaXMiLCJWYXIiLCJoYXNOYW1lIiwiVmFsdWUiLCJjcmVhdGVTbGlkZXIiLCJldmVudCIsInVpIiwicmVnaXN0ZXJUcmFuc2Zvcm1lciIsImpzb25Mb2NhdGlvbiIsIm1hcmtlck9iamVjdCIsInJlZ2lvbk9iamVjdCJdLCJtYXBwaW5ncyI6IkFBc0pBLFFBQUFBLHFCQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEdBQUFDLGNBR0EsT0FGQUQsR0FBQUEsRUFBQUUsUUFBQSxPQUFBSixFQUFBSyxRQUNBSCxFQUFBQSxFQUFBRSxRQUFBLFFBQUFILEVBQUFLLE9BSUEsUUFBQUMsb0JBQUFDLEVBQUFDLEdBQ0EsR0FBQVAsR0FBQVEsYUFJQSxPQUhB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LEVBQUF1SixFQUFBSSxFQUFBQyxHQUNBLEdBQUEsSUFBQW9JLEVBRUFULEtBQUF6USxRQUFBZCxFQUNBdVIsS0FBQWxTLE9BQUFrSyxFQUNBZ0ksS0FBQUMsSUFBQSxHQUNBRCxLQUFBNVIsU0FBQWdLLEVBQ0E0SCxLQUFBM1IsVUFBQWdLLEVBRUEySCxLQUFBN1IsS0FBQSxVQUVBLENBRUEsR0FBQStSLElBQUEsRUFDQXROLEVBQUEsQ0FDQSxHQUFBLENBQ0FBLEdBQ0EsSUFBQW1DLEdBQUEsT0FBQW5DLEVBQ0FyQixFQUFBLFFBQUFxQixDQUNBNk4sR0FBQTFMLElBR0FpTCxLQUFBakwsR0FBQTBMLEVBQUExTCxHQUNBaUwsS0FBQXpPLEdBQUFrUCxFQUFBbFAsSUFIQTJPLEdBQUEsUUFLQUEsRUFFQUYsTUFBQXpRLFFBQUFrUixFQUFBbFIsUUFDQXlRLEtBQUFsUyxPQUFBMlMsRUFBQTNTLE1BQ0FrUyxLQUFBQyxJQUFBUSxFQUFBUixJQUNBRCxLQUFBNVIsU0FBQXFTLEVBQUFyUyxTQUNBNFIsS0FBQTNSLFVBQUFvUyxFQUFBcFMsVUFFQTJSLEtBQUE3UixLQUFBLFFFbENBNlAsT0FBQSxTQUFBMEMsRUFBQTVDLEdBRUFrQyxLQUFBaEMsT0FBQTBDLEVBQUFqUyxLQUNBdVIsS0FBQXpRLFFBQUF1TyxFQUVBa0MsS0FBQTdSLEtBQUEiLCJmaWxlIjoianNNYXBzQXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHZlY3Rvck1hcDtcbnZhciBqc29uRmlsdGVycyA9IFtdO1xudmFyIG1pbkNvbG9yTWFwO1xudmFyIG1heENvbG9yTWFwO1xudmFyIG1EaXY7XG52YXIgbVR5cGU7XG52YXIgYmFja2dyb3VuZDtcbnZhciBmaWx0ZXJlZE1hcmtlcnM7XG52YXIgdGhlcmVBcmVNYXJrZXJzID0gZmFsc2U7XG5cbnZhciBWZWN0b3JpYWxNYXAgPSBmdW5jdGlvbigpIHt9O1xuXG4vLyBWZWN0b3JpYWxNYXAgUHJvdG90eXBlXG5WZWN0b3JpYWxNYXAucHJvdG90eXBlLmNyZWF0ZU1hcCA9IGZ1bmN0aW9uKGlucHV0SlNPTiwgbWluUmFkaXVzLCBtYXhSYWRpdXMsIG1hcERpdiwgbWluQ29sb3IsIG1heENvbG9yLCBtYXBUeXBlLCBiYWNrZ3JvdW5kQ29sb3IsIGRhdGFUeXBlKSB7XG4gICAgYmFja2dyb3VuZCA9IGJhY2tncm91bmRDb2xvcjtcbiAgICBtVHlwZSA9IG1hcFR5cGU7XG4gICAgLy8gY291bnRyaWVzIGxpc3RcbiAgICBqc29uQ291bnRyaWVzID0gW107XG4gICAgLy8gbWFya2VycyBsaXN0XG4gICAganNvbk1hcmtlcnMgPSBbXTtcbiAgICAvLyBpZCBvZiB0aGUgbWFwXG4gICAgbURpdiA9IG1hcERpdjtcbiAgICAvLyBhc3NpZ24gdGhlIGNvbG9ycyBmb3IgdGhlIHJhbmdlXG4gICAgbWluQ29sb3JNYXAgPSBtaW5Db2xvcjtcbiAgICBtYXhDb2xvck1hcCA9IG1heENvbG9yO1xuXG4gICAgaWYgKGRhdGFUeXBlID09ICdjb3VudHJpZXMnKSB7XG4gICAgICAgIGpzb25Db3VudHJpZXMgPSByZWFkQ291bnRyaWVzRnJvbUpTT04oaW5wdXRKU09OKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09ICdtYXJrZXJzJykge1xuICAgICAgICB0aGVyZUFyZU1hcmtlcnMgPSB0cnVlO1xuICAgICAgICBqc29uTWFya2VycyA9IHJlYWRNYXJrZXJzRnJvbUpTT04oaW5wdXRKU09OKTtcbiAgICAgICAgZmlsdGVyZWRNYXJrZXJzID0ganNvbk1hcmtlcnM7XG4gICAgICAgIG51bU1hcmtlcnMgPSBqc29uTWFya2Vycy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignWW91IG11c3QgZ2l2ZSBhcyBpbnB1dCBhIGxpc3Qgb2YgbWFya2VycyBvciBjb3VudHJpZXMhJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBnZXQgdGhlIENvdW50IHZhbHVlIGZvciBlYWNoIENvdW50cnlcbiAgICBhdXhDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpO1xuXG4gICAgLy8gZ2V0IHRoZSB0b29sdGlwIHRlbXBsYXRlc1xuICAgIC8vIENPVU5UUlkgdG9vbHRpcFxuICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgdXJsOiAnLi4vdG9vbHRpcC10ZW1wbGF0ZXMvY291bnRyeV90b29sdGlwLmh0bWwnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGNvdW50cnlUb29sdGlwID0gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYzogZmFsc2VcbiAgICB9KTtcblxuICAgIC8vIE1BUktFUiB0b29sdGlwXG4gICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICB1cmw6ICcuL3Rvb2x0aXAtdGVtcGxhdGVzL21hcmtlcl90b29sdGlwLmh0bWwnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIG1hcmtlclRvb2x0aXAgPSByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gUkVHSU9OIHRvb2x0aXBcbiAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgIHVybDogJy4vdG9vbHRpcC10ZW1wbGF0ZXMvcmVnaW9uX3Rvb2x0aXAuaHRtbCcsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgcmVnaW9uVG9vbHRpcCA9IHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmM6IGZhbHNlXG4gICAgfSk7XG5cbiAgICB2YXIgbGVnZW5kVmFyID0ge1xuICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgICAgLy90aXRsZTogJ0NvdW50cmllcycsXG4gICAgfTtcblxuICAgIHZhciBtYXJrZXJzV2l0aExlZ2VuZCA9IHtcbiAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAvLyByYW5nZSBvZiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBDb3VudFxuICAgICAgICB2YWx1ZXM6IFttaW5Db3VudCwgbWF4Q291bnRdLFxuICAgICAgICAvLyBhZGQgYSBsZWdlbmRcbiAgICAgICAgbGVnZW5kOiBsZWdlbmRWYXJcbiAgICB9O1xuXG4gICAgdmFyIG1hcmtlcnNXaXRob3V0TGVnZW5kID0ge1xuICAgICAgICBzY2FsZTogW21pbkNvbG9yTWFwLCBtYXhDb2xvck1hcF0sXG4gICAgICAgIC8vIHJhbmdlIG9mIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIENvdW50XG4gICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF1cbiAgICB9O1xuXG4gICAgZmluYWxNYXJrZXJzSW5NYXAgPSBtYXJrZXJzV2l0aExlZ2VuZDtcbiAgICBpZiAoZGF0YVR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgIGZpbmFsTWFya2Vyc0luTWFwID0gbWFya2Vyc1dpdGhvdXRMZWdlbmQ7XG4gICAgfVxuXG5cbiAgICBtYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgIGNvbnRhaW5lcjogJCgnIycgKyBtYXBEaXYpLFxuICAgICAgICAvLyBjb25maWd1cmF0aW9uIG9mIHRoZSBtYWluIG1hcFxuICAgICAgICAvLyB0eXBlIG9mIG1hcCAod29ybGQsIEV1cm9wZSwgVVNBLCBldGMpXG4gICAgICAgIG1hcDogbVR5cGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZCxcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHdoZW4gYSBtYXJrZXIgaXMgaG92ZXJlZFxuICAgICAgICBvblJlZ2lvbkNsaWNrOiBmdW5jdGlvbihlLCBjb2RlKSB7XG4gICAgICAgICAgICAvLyByZWxvYWQgYSBuZXcgbWFwXG4gICAgICAgICAgICBjb3VudHJ5Q29kZSA9IGNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIC8vIHdhaXRUb0FkZE1hcmtlcnMoMTAwKTtcbiAgICAgICAgICAgIHZhciBuZXdNYXAgPSBjb3VudHJ5Q29kZSArICdfbWlsbF9lbic7XG4gICAgICAgICAgICAvLyBzd2l0aCB0byBuZXcgbWFwXG4gICAgICAgICAgICBzd2l0Y2hNYXAobmV3TWFwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIHNlbGVjdCB3aGF0IHRleHQgdG8gZGlzcGxheSB3aGVuIG1hcmtlciBpcyBob3ZlcmVkXG4gICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRNYXJrZXJUb29sdGlwKGpzb25NYXJrZXJzLCBpbmRleCk7XG4gICAgICAgICAgICBsYWJlbC5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHRyaWdnZXJlZCB3aGVuIGEgcmVnaW9uIGlzIGhvdmVyZWRcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCBjb3VudHJ5TmFtZSwgY29kZSkge1xuICAgICAgICAgICAgLy8gY29kZSBjb250YWlucyB0aGUgY29kZSBvZiB0aGUgY291bnRyeSAoaS5lLiwgUFQsIEVTLCBGUiwgZXRjKVxuICAgICAgICAgICAgLy8gc2hvdyB0aGUgQ291bnQgYXNzb2NpYXRlZCB0byB0aGF0IENvdW50cnkgLSBsb29rIGZvciB0aGUgY291bnRyeVxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgJC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5Db3VudHJ5ID09PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyeSA9IGN1cnJlbnRDb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRDb3VudHJ5ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gZmluZCBvY2N1cnJlbmNlIG9mIHNldmVyYWwgc3RyaW5ncyBpbnNpZGUgdGhlIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIHNlbGVjdGVkQ291bnRyeSk7XG4gICAgICAgICAgICAgICAgY291bnRyeU5hbWUuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgY291bnRyeU5hbWUuaHRtbChjb3VudHJ5TmFtZS5odG1sKCkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgIG1hcmtlcnM6IFtmaW5hbE1hcmtlcnNJbk1hcF0sXG4gICAgICAgICAgICByZWdpb25zOiBbe1xuICAgICAgICAgICAgICAgIC8vIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiBjb3VudFxuICAgICAgICAgICAgICAgIHNjYWxlOiBbbWluQ29sb3JNYXAsIG1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IGF1eENvbG9yc1xuICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZHJhdyBtYXJrZXJzIG9uIHRoZSBtYXBcbiAgICBpZiAoZGF0YVR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgIGZpbHRlcmVkTWFya2VycyA9IGpzb25NYXJrZXJzO1xuICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBidWlsZENvdW50cnlUb29sdGlwKGNvdW50cnlOYW1lLCBzZWxlY3RlZENvdW50cnkpIHtcbiAgICB2YXIgZmluYWxUb29sdGlwID0gY291bnRyeVRvb2x0aXA7XG4gICAgZmluYWxUb29sdGlwID0gZmluYWxUb29sdGlwLnJlcGxhY2UoJ25hbWUnLCBjb3VudHJ5TmFtZS5odG1sKCkpO1xuICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKCdjb3VudCcsIHNlbGVjdGVkQ291bnRyeS5Db3VudCk7XG4gICAgcmV0dXJuIGZpbmFsVG9vbHRpcDtcbn1cblxuZnVuY3Rpb24gYnVpbGRNYXJrZXJUb29sdGlwKGpzb25NYXJrZXJzLCBpbmRleCkge1xuICAgIHZhciBmaW5hbFRvb2x0aXAgPSBtYXJrZXJUb29sdGlwO1xuICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKCdkZXNjcmlwdGlvbicsIGpzb25NYXJrZXJzW2luZGV4XS5kZXNjKTtcbiAgICBmaW5hbFRvb2x0aXAgPSBmaW5hbFRvb2x0aXAucmVwbGFjZSgnbGF0aXR1ZGUnLCBqc29uTWFya2Vyc1tpbmRleF0uTGF0aXR1ZGUpO1xuICAgIGZpbmFsVG9vbHRpcCA9IGZpbmFsVG9vbHRpcC5yZXBsYWNlKCdsb25naXR1ZGUnLCBqc29uTWFya2Vyc1tpbmRleF0uTG9uZ2l0dWRlKTtcbiAgICByZXR1cm4gZmluYWxUb29sdGlwO1xufVxuXG5mdW5jdGlvbiBidWlsZFJlZ2lvblRvb2x0aXAocmVnaW9uKSB7XG4gICAgdmFyIGZpbmFsVG9vbHRpcCA9IHJlZ2lvblRvb2x0aXA7XG4gICAgZmluYWxUb29sdGlwID0gZmluYWxUb29sdGlwLnJlcGxhY2UoJ25hbWUnLCByZWdpb24ubmFtZSk7XG4gICAgcmV0dXJuIGZpbmFsVG9vbHRpcDtcbn1cblxuLy8gQXV4aWxpYXJ5IGZ1bmN0aW9uIHRvIHRyYW5zcG9zZSBhIHZhbHVlIGZyb20gYW4gaW5pdGlhbCByYW5nZSB0byBhbm90aGVyIHJhbmdlXG5mdW5jdGlvbiBtYXBSYW5nZSh2YWx1ZSwgbG93MSwgaGlnaDEsIGxvdzIsIGhpZ2gyKSB7XG4gICAgcmV0dXJuIGxvdzIgKyAoaGlnaDIgLSBsb3cyKSAqICh2YWx1ZSAtIGxvdzEpIC8gKGhpZ2gxIC0gbG93MSk7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuZmlsdGVyT25TZXJ2ZXIgPSBmdW5jdGlvbihmaWx0ZXJzKSB7XG4gICAgLy8gcmVhZCB0aGUgZmlsdGVycyBmcm9tIGEgSlNPTiBmaWxlIChqdXN0IGZvciB0ZXN0aW5nKVxuICAgICQuZ2V0SlNPTihcIi4uL2pzb24vc2VydmVyRmlsdGVyLmpzb25cIiwgZnVuY3Rpb24oZmlsdGVyc0pTT04pIHtcbiAgICAgICAgLy8gY29udmVydCB0aGUgZmlsdGVyc0pTT04gdG8gYSBzdHJpbmdcbiAgICAgICAgdmFyIGZpbHRlcnNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShmaWx0ZXJzSlNPTik7XG4gICAgICAgIC8vIGJ1aWxkIHRoZSB1cmwgdG8gc2VuZCB0byB0aGUgc2VydmVyXG4gICAgICAgIHZhciB1cmwgPSAnaHR0cDovL3NlcnZlckZpbHRlcmluZy5jb20vP2RhdGE9JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJzU3RyaW5nKTtcbiAgICAgICAgLy8gRk9SIFRFU1RJTkcgUFVSUE9TRVMgLSB0aGlzIGZpbGUgY29udGFpbnMgYSBkaWZmZXJlbnQgc2V0XG4gICAgICAgIC8vIG9mIGNvdW50cmllcyBhbmQgbWFya2Vyc1xuICAgICAgICB1cmwgPSAnLi4vanNvbi9jb3VudHJpZXNfcGx1c19tYXJrZXJzMi5qc29uJztcbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdG8gZ2V0IHRoZSBtYXJrZXJzIGFuZCBjb3VudHJpZXNcbiAgICAgICAgJC5nZXRKU09OKHVybCwgZnVuY3Rpb24oanNvbikge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBUSElTIENPREUgSVMgU0VSVkVSIFNJREVcbiAgICAgICAgICAgIHZhciBteVBhcmFtID0gdXJsLnNwbGl0KCdkYXRhPScpWzFdO1xuICAgICAgICAgICAgdmFyIHJldHVybkpTT04gPSBkZWNvZGVVUklDb21wb25lbnQobXlQYXJhbSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKHJldHVybkpTT04pKTtcbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBKU09OIHRvIGdldCB0aGUgY291bnRyaWVzIGFuZCBtYXJrZXJzXG4gICAgICAgICAgICBqc29uQ291bnRyaWVzID0gcmVhZENvdW50cmllc0Zyb21KU09OKGpzb24uY291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgY29sb3VycyBmb3IgdGhlIGNvdW50cmllc1xuICAgICAgICAgICAgdmFyIGNvdW50cnlDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcyhqc29uQ291bnRyaWVzKTtcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGNvdW50cmllcyBvbiB0aGUgbWFwXG4gICAgICAgICAgICByZWxvYWRNYXAoY291bnRyeUNvbG9ycyk7XG5cbiAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UgYWxzbyBoYXZlIG1hcmtlcnNcbiAgICAgICAgICAgIGlmIChqc29uLm1hcmtlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyByZWFkIHRoZSBtYXJrZXJzIGZyb20gdGhlIEpTT04gZmlsZVxuICAgICAgICAgICAgICAgIGpzb25NYXJrZXJzID0gcmVhZE1hcmtlcnNGcm9tSlNPTihqc29uLm1hcmtlcnMpO1xuICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXJzIHRvIHRoZSBtYXBcbiAgICAgICAgICAgICAgICBhZGRNYXJrZXJzVG9NYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJ2YXIgQ291bnRyeSA9IGZ1bmN0aW9uKGNvdW50cnlPYmplY3QsIG5hbWUsIGNvdW50KSB7XG5cdGlmKGNvdW50cnlPYmplY3QgPT0gJycpIHtcblx0XHQvLyByZWFkIGZyb20gdGhlIGlucHV0IHBhcmFtZXRlcnNcblx0XHR0aGlzLkNvdW50cnkgPSBuYW1lO1xuXHRcdC8vICsgaXMgdXNlZCB0byBhc3N1cmUgdGhhdCBhIE51bWJlciBpcyBiZWluZyByZWFkXG5cdFx0dGhpcy5Db3VudCA9ICtjb3VudDtcblx0XHR0aGlzLlZhciA9IDA7XG5cdFx0dGhpcy5kZXNjID0gJ2FiYyc7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gcmVhZCBmcm9tIHRoZSBKU09OXG5cdFx0dmFyIGhhc05hbWUgPSB0cnVlO1xuXHRcdHZhciBpID0gMDtcblx0XHRkbyB7XG5cdFx0XHRpKys7XG5cdFx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSAnVmFsdWUnICsgaTtcblx0XHRcdGlmKGNvdW50cnlPYmplY3RbY3VycmVudE5hbWVUb0NoZWNrXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGhhc05hbWUgPSBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXNbY3VycmVudE5hbWVUb0NoZWNrXSA9IGNvdW50cnlPYmplY3RbY3VycmVudE5hbWVUb0NoZWNrXTtcblx0XHRcdFx0dGhpc1tjdXJyZW50VmFsdWVdID0gY291bnRyeU9iamVjdFtjdXJyZW50VmFsdWVdO1xuXHRcdFx0fVxuXHRcdH0gd2hpbGUgKGhhc05hbWUpO1xuXG5cdFx0Ly8gdHJ5IHRvIHJlYWQgaXRzIHJlZ2lvbnMgaW4gY2FzZSBoZSBoYXMgYW55XG5cdFx0aWYoY291bnRyeU9iamVjdC5SZWdpb25zKVxuXHRcdFx0dGhpcy5SZWdpb25zID0gcmVhZFJlZ2lvbnNGcm9tSlNPTihjb3VudHJ5T2JqZWN0LlJlZ2lvbnMsIGNvdW50cnlPYmplY3QuQ291bnRyeSk7XG5cblx0XHR0aGlzLkNvdW50cnkgPSBjb3VudHJ5T2JqZWN0LkNvdW50cnk7XG5cdFx0Ly8gKyBpcyB1c2VkIHRvIGFzc3VyZSB0aGF0IGEgTnVtYmVyIGlzIGJlaW5nIHJlYWRcblx0XHR0aGlzLkNvdW50ID0gK2NvdW50cnlPYmplY3QuQ291bnQ7XG5cdFx0dGhpcy5WYXIgPSBjb3VudHJ5T2JqZWN0LlZhcjtcblx0XHR0aGlzLmRlc2MgPSAnYWJjJztcblx0fVxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2xvcnNGb3JUaGVDb3VudHJpZXMoY291bnRyaWVzKSB7XG5cdGlmKCFjb3VudHJpZXMpXG5cdFx0Y291bnRyaWVzID0ganNvbkNvdW50cmllcztcblx0dmFyIGNvdW50cnlDb2xvcnMgPSBbXTtcblx0JC5lYWNoKGNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG5cdFx0Y291bnRyeUNvbG9yc1tjdXJyZW50Q291bnRyeS5Db3VudHJ5XSA9IGN1cnJlbnRDb3VudHJ5LkNvdW50O1xuXHR9KTtcblx0cmV0dXJuIGNvdW50cnlDb2xvcnM7XG59O1xuXG5mdW5jdGlvbiByZWFkQ291bnRyaWVzRnJvbUpTT04obWFya2Vycykge1xuXG5cdHZhciBjb3VudHJpZXMgPSBbXTtcblx0dmFyIG51bUpTT05Db3VudHJpZXMgPSBtYXJrZXJzLmxlbmd0aDtcblxuXHRtaW5Db3VudCA9IEluZmluaXR5O1xuXHRtYXhDb3VudCA9IC1JbmZpbml0eTtcblxuXHQkLmVhY2gobWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG5cdFx0Y291bnRyaWVzW2luZGV4XSA9IG5ldyBDb3VudHJ5KGN1cnJlbnRDb3VudHJ5KTtcblxuXHRcdGlmKGNvdW50cmllc1tpbmRleF0uQ291bnQgPiBtYXhDb3VudClcblx0XHRcdG1heENvdW50ID0gY291bnRyaWVzW2luZGV4XS5Db3VudDtcblxuXHRcdGlmKGNvdW50cmllc1tpbmRleF0uQ291bnQgPCBtaW5Db3VudClcblx0XHRcdG1pbkNvdW50ID0gY291bnRyaWVzW2luZGV4XS5Db3VudDtcblx0fSk7XG5cdHJldHVybiBjb3VudHJpZXM7XG59XG5cbi8vIHJldHVybiB0aGUgY291bnRyeSB3aG9zZSBuYW1lIGlzIHBhc3NlZCBhcyBhbiBhcmd1bWVudFxuZnVuY3Rpb24gZmluZENvdW50cnlCeU5hbWUoY291bnRyeU5hbWUpXG57XG5cdHZhciByZXR1cm5Db3VudHJ5ID0gbnVsbDtcblx0JC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuXHRcdGlmKGN1cnJlbnRDb3VudHJ5LkNvdW50cnkgPT0gY291bnRyeU5hbWUpXG5cdFx0e1xuXHRcdFx0cmV0dXJuQ291bnRyeSA9IGN1cnJlbnRDb3VudHJ5O1xuXHRcdFx0cmV0dXJuIHJldHVybkNvdW50cnk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHJldHVybkNvdW50cnk7XG59XG5cbi8vIHJlYWQgdGhlIG1pbiBhbmQgbWF4IGNvdW50IG9mIHRoZSBjb3VudHJpc1xuZnVuY3Rpb24gcmVhZE1pbk1heChjb3VudHJpZXNOYW1lcylcbntcblx0bWluQ291bnQgPSBJbmZpbml0eTtcblx0bWF4Q291bnQgPSAtSW5maW5pdHk7XG5cblx0Ly8gY291bnRyaWVzIG5hbWVzIGlzIGEgSlNPTiBvYmplY3Rcblx0Ly8gcmVhZCBrZXlzIHRvIGFuIGFycmF5XG5cdHZhciBrZXlzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBjb3VudHJpZXNOYW1lcykge1xuXHQgIGlmIChjb3VudHJpZXNOYW1lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICBrZXlzLnB1c2goa2V5KTtcblx0ICB9XG5cdH1cblxuXHQvLyBmaW5kIGNvdW50cnkgYnkgbmFtZVxuXHQkLmVhY2goa2V5cywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5TmFtZSkge1xuXHRcdC8vIGZpbmQgdGhlIGNvdW50cnkgYnkgaXRzIG5hbWVcblx0XHR2YXIgY3VycmVudENvdW50cnkgPSBmaW5kQ291bnRyeUJ5TmFtZShjdXJyZW50Q291bnRyeU5hbWUpO1xuXHRcdGlmKGN1cnJlbnRDb3VudHJ5LkNvdW50ID4gbWF4Q291bnQpXG5cdFx0XHRtYXhDb3VudCA9IGN1cnJlbnRDb3VudHJ5LkNvdW50O1xuXG5cdFx0aWYoY3VycmVudENvdW50cnkuQ291bnQgPCBtaW5Db3VudClcblx0XHRcdG1pbkNvdW50ID0gY3VycmVudENvdW50cnkuQ291bnQ7XG5cdH0pO1xufVxuIiwidmFyIHJlc2V0RmlsdGVyc0JveCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gcmVzZXQgYWxsIHRoZSAnZmJveGVzJ1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRmlsdGVyczsgaSsrKSB7XG4gICAgICAgICQoXCIjZmJveFwiICsgaSkudGV4dCgnJyk7XG4gICAgICAgICQoXCIjZmJveFwiICsgaSkudmFsKCcnKTtcbiAgICB9XG5cbiAgICAvLyByZWxvYWQgdGhlIG1hcFxuICAgIHZhciBjb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpO1xuICAgIHJlbG9hZE1hcChjb2xvcnMpO1xuXG4gICAgZmlsdGVyZWRNYXJrZXJzID0ganNvbk1hcmtlcnM7XG4gICAgYWRkTWFya2Vyc1RvTWFwKCk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVGaWx0ZXJzQm94Q2hlY2tib3hlcygpIHtcblxuICAgICQoJ2ZpbHRlci1ib3gnKS5hcHBlbmQoJzx1bCBjbGFzcz1cIm5hdiBuYXZiYXItbmF2XCIgaWQ9XCJmaWx0ZXJCb3hDaGVja2JveGVzXCIgc3R5bGU9XCJib3JkZXItc3R5bGU6IHNvbGlkOyBib3JkZXItd2lkdGg6IDJweDtcIj48L3VsPicpO1xuXG4gICAgLy8gZ2V0IGFsbCB0aGUgZmlsdGVyc1xuICAgICQuZWFjaChqc29uRmlsdGVyc0FycmF5LCBmdW5jdGlvbihpbmRleCwgY3VycmVudEZpbHRlcikge1xuICAgICAgICB2YXIgYm94SUQgPSAnI2JveCcgKyAoaW5kZXggKyAxKTtcbiAgICAgICAgLy8gYXBwZW5kIHRvIHRoZSBIVE1MXG4gICAgICAgICQoJyNmaWx0ZXJCb3hDaGVja2JveGVzJykuYXBwZW5kKCc8bGkgY2xhc3M9XCJjb2wtc20tNlwiIGlkPVwiYm94JyArIChpbmRleCArIDEpICsgJ1wiIGNsYXNzPVwiZHJvcGRvd24tY2hlY2tib3gtZXhhbXBsZSBkcm9wZG93bi1jaGVja2JveCBkcm9wZG93blwiPjwvbGk+Jyk7XG5cbiAgICAgICAgLy8gZmlsbCB0aGUgdGFicyBmb3IgdGhlIHllYXIgZmlsdGVyXG4gICAgICAgIHZhciB0YWIgPSBbXTtcbiAgICAgICAgJC5lYWNoKGN1cnJlbnRGaWx0ZXIuVmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0YWIucHVzaCh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaW5kZXggKyAxLFxuICAgICAgICAgICAgICAgICdsYWJlbCc6IGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAnaXNDaGVja2VkJzogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBwKHdhdCkge1xuICAgICAgICAgICAgcmV0dXJuICc8cD4nICsgSlNPTi5zdHJpbmdpZnkod2F0KSArICc8L3A+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cygpIHtcbiAgICAgICAgICAgIHZhciAkcCA9ICQoJ3Auc3RhdHVzJykuZW1wdHkoKTtcbiAgICAgICAgICAgICRwLmFwcGVuZChwKHdpZGdldC5jaGVja2VkKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRyb3Bkb3duIHdpdGggY2hlY2tib3hlcyBpbml0aWFsaXphdGlvblxuICAgICAgICB2YXIgbmFtZSA9IGN1cnJlbnRGaWx0ZXIuTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBuYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gICAgICAgICQoYm94SUQpLmRyb3Bkb3duQ2hlY2tib3goe1xuICAgICAgICAgICAgZGF0YTogdGFiLFxuICAgICAgICAgICAgYXV0b3NlYXJjaDogdHJ1ZSxcbiAgICAgICAgICAgIGhpZGVIZWFkZXI6IGZhbHNlLFxuICAgICAgICAgICAgLy8gc2hvdyBudW1iZXIgb2Ygc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgICAgIHNob3dOYlNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHRlbXBsYXRlQnV0dG9uOiAnPGEgY2xhc3M9XCJkcm9wZG93bi1jaGVja2JveC10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgaHJlZj1cIiNcIj4nICsgbmFtZSArICc8c3BhbiBjbGFzcz1cImRyb3Bkb3duLWNoZWNrYm94LW5ic2VsZWN0ZWRcIj48L3NwYW4+PGIgY2xhc3M9XCJjYXJldFwiPjwvYj4nXG4gICAgICAgIH0pO1xuICAgICAgICB3aWRnZXQgPSAkKGJveElEKS5kYXRhKCdkcm9wZG93bkNoZWNrYm94Jyk7XG5cbiAgICAgICAgJCgnYm9keScpLm9uKCdjaGFuZ2U6ZHJvcGRvd24tY2hlY2tib3ggY2hlY2tlZCBjaGVja2VkOmFsbCBjaGVjazphbGwgdW5jaGVjazphbGwgY2hlY2s6Y2hlY2tlZCB1bmNoZWNrOmNoZWNrZWQnLCB1cGRhdGVTdGF0dXMoKSk7XG4gICAgICAgIHVwZGF0ZVN0YXR1cygpO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwZW5kIGZpbHRlciBhbmQgcmVzZXQgYnV0dG9uXG5cbiAgICB2YXIgdGV4dFRvQXBwZW5kID0gJzxkaXYgaWQ9XCJmaWx0ZXJzX2JveFwiIGNsYXNzPVwicm93IGNvbC1zbS0xMlwiPicgK1xuICAgICAgICAnPGJ1dHRvbiBpZD1cImZpbHRlcl9ib3hfYXBwbHlfZmlsdGVyc1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBjb2wtc20tNCBjb2wtc20tb2Zmc2V0LTFcIj5GaWx0ZXI8L2J1dHRvbj4nICtcbiAgICAgICAgJzxidXR0b24gaWQ9XCJmaWx0ZXJfYm94X3Jlc2V0X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+UmVzZXQ8L2J1dHRvbj48L2Rpdj4nO1xuICAgICQoJyNmaWx0ZXJCb3hDaGVja2JveGVzJykuYXBwZW5kKHRleHRUb0FwcGVuZCk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgc2VhcmNoIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0ganNvbkZpbHRlcnNBcnJheS5sZW5ndGg7XG4gICAgICAgIHZhciBlbXB0eUZpbHRlcnMgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25GaWx0ZXJzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYW5kIG5leHQgZmlsdGVyIGlkJ3NcbiAgICAgICAgICAgIHZhciBjdXJyZW50RmlsdGVyID0gXCIjYm94XCIgKyAoaSArIDEpO1xuICAgICAgICAgICAgLy8gY3VycmVudCBmaWx0ZXIgdmFsdWVzIC0gc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEl0ZW1zID0gZ2V0U2VsZWN0ZWRJdGVtcyhjdXJyZW50RmlsdGVyKTtcbiAgICAgICAgICAgIHZhciBpdGVtc0FycmF5ID0gW107XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdGVkSXRlbXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNBcnJheS5wdXNoKHNlbGVjdGVkSXRlbXNba2V5c1tqXV0ubGFiZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBhbnkgZmlsdGVyaW5nIHRvIGFwcGx5IG9yIG5vdFxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGpzb25PYmplY3RbanNvbkZpbHRlcnNBcnJheVtpXS5OYW1lXSA9IGl0ZW1zQXJyYXkuam9pbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbXB0eUZpbHRlcnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhdm9pZCB0aGUgdXNlciBzZWxlY3RpbmcgdGhlIEZpbHRlciBidXR0b24gd2l0aG91dCBpbnB1dGluZyBhbnkgZGF0YVxuICAgICAgICBpZiAoZW1wdHlGaWx0ZXJzICE9IG51bUZpbHRlcnMpIHtcbiAgICAgICAgICAgIGZpbHRlcihqc29uT2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdHJpZ2dlcmVkIHdoZW4gdGhlIHJlc2V0IGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X3Jlc2V0X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc2V0RmlsdGVyc0JveCgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3RlZEl0ZW1zKGJveElEKSB7XG4gICAgcmV0dXJuICQoYm94SUQpLmRyb3Bkb3duQ2hlY2tib3goXCJjaGVja2VkXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWx0ZXJzQm94V2l0aEVudW1lcmF0aW9uKGpzb25GaWx0ZXJzKSB7XG5cbiAgICB2YXIgbnVtRmlsdGVycyA9IGpzb25GaWx0ZXJzLmxlbmd0aDtcbiAgICAvLyBjcmVhdGUgZmlsdGVycyBib3ggd2l0aCBlbnVtZXJhdGlvblxuICAgICQuZWFjaChqc29uRmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXIpIHtcbiAgICAgICAgdmFyIGZpbHRlck5hbWUgPSBjdXJyZW50RmlsdGVyLk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZmlsdGVyTmFtZSA9IGZpbHRlck5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBmaWx0ZXJOYW1lLnNsaWNlKDEpO1xuICAgICAgICB2YXIgYnV0dG9uSWQgPSAnZHJvcGRvd24nICsgaW5kZXggKyAnYnV0dG9uJztcbiAgICAgICAgdmFyIHVsSWQgPSAnZHJvcGRvd24nICsgaW5kZXg7XG4gICAgICAgIHZhciB0b0FwcGVuZCA9ICcnO1xuXG4gICAgICAgIC8vIGZpbHRlciB0ZXh0XG4gICAgICAgIHRvQXBwZW5kICs9ICc8cD48Yj4nICsgZmlsdGVyTmFtZSArICc6PC9iPjwvcD4nO1xuICAgICAgICB0b0FwcGVuZCArPSAnPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj4nO1xuICAgICAgICB0b0FwcGVuZCArPSAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImZib3gnICsgaW5kZXggKyAnXCInO1xuICAgICAgICAvLyBidWlsZCB0aGUgcGxhY2Vob2xkZXJcbiAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gY3VycmVudEZpbHRlci5WYWx1ZXNcbiAgICAgICAgdG9BcHBlbmQgKz0gJ3BsYWNlaG9sZGVyPVwiJyArIHBsYWNlaG9sZGVyICsgJ1wiICs+JztcbiAgICAgICAgdG9BcHBlbmQgKz0gJzwvZGl2Pic7XG5cbiAgICAgICAgJCgnZmlsdGVyLWJveCcpLmFwcGVuZCh0b0FwcGVuZCk7XG5cbiAgICAgICAgLy8gYWRkIEJvb3RzdHJhcCB0b29sdGlwIHRvIHRoZSBmaWx0ZXJzIGJveFxuICAgICAgICAkKCcjZmlsdGVyLWJveCcpLnRvb2x0aXAoe1xuICAgICAgICAgICAgdGl0bGU6IFwiVXNlIHRoaXMgZmlsdGVyIGJveCB0byBmaWx0ZXIgYnkgbXVsdGlwbGUgZmlsdGVyc1wiLFxuICAgICAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbVwiXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIHRoZSBidXR0b25zXG4gICAgdmFyIHRleHRUb0FwcGVuZCA9ICc8ZGl2IGlkPVwiZmlsdGVyc19ib3hcIj4nICtcbiAgICAgICAgJzxidXR0b24gaWQ9XCJmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgY29sLXNtLTQgY29sLXNtLW9mZnNldC0xXCI+RmlsdGVyPC9idXR0b24+JyArXG4gICAgICAgICc8YnV0dG9uIGlkPVwiZmlsdGVyX2JveF9yZXNldF9maWx0ZXJzXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGNvbC1zbS00IGNvbC1zbS1vZmZzZXQtMVwiPlJlc2V0PC9idXR0b24+PC9kaXY+JztcbiAgICAkKCdmaWx0ZXItYm94JykuYXBwZW5kKHRleHRUb0FwcGVuZCk7XG5cbiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgc2VhcmNoIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgJChcIiNmaWx0ZXJfYm94X2FwcGx5X2ZpbHRlcnNcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBqc29uT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0ganNvbkZpbHRlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgZW1wdHlGaWx0ZXJzID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uRmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgaWQnc1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRGaWx0ZXIgPSBcIiNmYm94XCIgKyBpO1xuICAgICAgICAgICAgLy8gY3VycmVudCBhbmQgbmV4dCBmaWx0ZXIgdmFsdWVzXG4gICAgICAgICAgICB2YXIgY3VycmVudEZpbHRlclZhbHVlID0gJChjdXJyZW50RmlsdGVyKS52YWwoKTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYW55IGZpbHRlcmluZyB0byBhcHBseSBvciBub3RcbiAgICAgICAgICAgIGlmIChjdXJyZW50RmlsdGVyVmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAganNvbk9iamVjdFtqc29uRmlsdGVyc1tpXS5OYW1lXSA9IGN1cnJlbnRGaWx0ZXJWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1wdHlGaWx0ZXJzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgdGhlIHVzZXIgc2VsZWN0aW5nIHRoZSBGaWx0ZXIgYnV0dG9uIHdpdGhvdXQgaW5wdXRpbmcgYW55IGRhdGFcbiAgICAgICAgaWYgKGVtcHR5RmlsdGVycyAhPSBudW1GaWx0ZXJzKSB7XG4gICAgICAgICAgICBmaWx0ZXIoanNvbk9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHRyaWdnZXJlZCB3aGVuIHRoZSByZXNldCBidXR0b24gaXMgY2xpY2tlZFxuICAgICQoXCIjZmlsdGVyX2JveF9yZXNldF9maWx0ZXJzXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNldEZpbHRlcnNCb3goKTtcbiAgICB9KTtcbn1cbiIsImZ1bmN0aW9uIGdldEFsbEZpbHRlclZhbHVlcyhmaWx0ZXJWYWx1ZSkge1xuXHR2YXIgcmV0dXJuUGFydHMgPSBbXTtcblxuXHQvLyBjaGVjayBpZiB3ZSBoYXZlIGFuIGVudW1lcmF0aW9uIChjb21tYS1zZXBhcmF0ZWQgdmFsdWVzIGFuZC9vciByYW5nZXMpXG5cdGlmKFN0cmluZyhmaWx0ZXJWYWx1ZSkuaW5kZXhPZihcIixcIikgIT0gLTEpIHtcblxuXHRcdC8vIGdldCBhbGwgdGhlIGVudW1lcmF0ZWQgdmFsdWVzIChjYW4gYmUgc2luZ3VsYXIgb3IgcmFuZ2UpXG5cdFx0dmFyIGVudW1lcmF0aW9uUGFydHMgPSBTdHJpbmcoZmlsdGVyVmFsdWUpLnNwbGl0KFwiLFwiKTtcblxuXHRcdC8vIGNoZWNrIGlmIHdlIGhhdmUgYSBzaW1wbGUgdmFsdWUgb3IgYSByYW5nZVxuXHRcdCQuZWFjaChlbnVtZXJhdGlvblBhcnRzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEVudW1lcmF0aW9uKSB7XG5cblx0XHRcdC8vIGlmIHdlIGhhdmUgYSByYW5nZS4uLlxuXHRcdFx0aWYoY3VycmVudEVudW1lcmF0aW9uLmluZGV4T2YoXCItXCIpICE9IC0xKSB7XG5cblx0XHRcdFx0Ly8gYWxsIHRoZSByYW5nZSBwYXJ0c1xuXHRcdFx0XHR2YXIgcmFuZ2VQYXJ0cyA9IFN0cmluZyhjdXJyZW50RW51bWVyYXRpb24pLnNwbGl0KFwiLVwiKTtcblxuXHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgZXh0cmVtZSB2YWx1ZXMgYXJlIHZhbGlkXG5cdFx0XHRcdGNoZWNrRmlsdGVyVmFsdWVzQXJlVmFsaWQoZmlsdGVyT2JqZWN0LCByYW5nZVBhcnRzKTtcblxuXHRcdFx0XHQvLyBnZXQgYWxsIHRoZSB2YWx1ZXMgYmV0d2VlbiB0aG9zZSB0d28gbnVtYmVyc1xuXHRcdFx0XHQvLyBhbmQgYWRkIHRoZW1cblx0XHRcdFx0dmFyIG1pbiA9IHJhbmdlUGFydHNbMF07XG5cdFx0XHRcdHZhciBtYXggPSByYW5nZVBhcnRzWzFdO1xuXHRcdFx0XHRmb3IoOyBtaW4gPD0gbWF4OyBtaW4rKylcblx0XHRcdFx0XHRyZXR1cm5QYXJ0cy5wdXNoKG1pbik7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGlmIHdlIGRvbid0IGhhdmUgYSByYW5nZVxuXHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgc2luZ2xlIHZhbHVlIGlzIHZhbGlkXG5cdFx0XHRcdHJldHVyblBhcnRzLnB1c2goY3VycmVudEVudW1lcmF0aW9uKTtcblxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdC8vIGp1c3QgYSBzaW5nbGUgcGFydFxuXHRcdGlmKGZpbHRlclZhbHVlLmluZGV4T2YoXCItXCIpICE9IC0xKSB7XG5cdFx0XHQvLyB3ZSBoYXZlIGEgcmFuZ2Vcblx0XHRcdHZhciBzdWJQYXJ0cyA9IFN0cmluZyhmaWx0ZXJWYWx1ZSkuc3BsaXQoXCItXCIpO1xuXHRcdFx0Ly8gY2hlY2sgaWYgdGhlIGV4dHJlbWUgdmFsdWVzIGFyZSB2YWxpZFxuXHRcdFx0Y2hlY2tGaWx0ZXJWYWx1ZXNBcmVWYWxpZChmaWx0ZXJPYmplY3QsIHN1YlBhcnRzKTtcblx0XHRcdC8vIGdldCBhbGwgdGhlIHZhbHVlcyBiZXR3ZWVuIHRob3NlIHR3byBudW1iZXJzXG5cdFx0XHR2YXIgbWluID0gc3ViUGFydHNbMF07XG5cdFx0XHR2YXIgbWF4ID0gc3ViUGFydHNbMV07XG5cdFx0XHRmb3IoOyBtaW4gPD0gbWF4OyBtaW4rKykge1xuXHRcdFx0XHRyZXR1cm5QYXJ0cy5wdXNoKG1pbik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlXG5cdFx0XHRyZXR1cm5QYXJ0cy5wdXNoKGZpbHRlclZhbHVlKTtcblx0fVxuXHRyZXR1cm4gcmV0dXJuUGFydHM7XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2hhdENvdW50cmllc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSkge1xuXG5cdHZhciBjb3VudHJpZXMgPSBbXTtcblx0JC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuXHRcdC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgbmFtZXMgaXMgZXF1YWwgdG8gdGhlIHNlbGVjdGVkIGZpbHRlclxuXHRcdC8vIHRyeSB0byByZWFkIGFsbCB0aGUgbmFtZXMgYW5kIHZhbHVlc1xuXHRcdHZhciBpID0gMDtcblx0XHRkbyB7XG5cdFx0XHRpKys7XG5cdFx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSAnVmFsdWUnICsgaTtcblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcblx0XHRcdGlmKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10pIHtcblx0XHRcdFx0aWYoY3VycmVudENvdW50cnlbY3VycmVudFZhbHVlXSA9PSBmaWx0ZXJWYWx1ZSkge1xuXHRcdFx0XHRcdGNvdW50cnlWYWx1ZVRvQ2hlY2sgPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdFx0Ly8gY2hlY2sgYnkgdmFsdWVcblx0XHRcdFx0XHRpZihjdXJyZW50Q291bnRyeVtjdXJyZW50VmFsdWVdID09IGZpbHRlclZhbHVlKVxuXHRcdFx0XHRcdFx0Y291bnRyaWVzW2N1cnJlbnRDb3VudHJ5LkNvdW50cnldID0gY3VycmVudENvdW50cnkuQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZVxuXHRcdFx0XHRicmVhaztcblx0XHR9IHdoaWxlICh0cnVlKVxuXHR9KTtcblx0cmV0dXJuIGNvdW50cmllcztcbn07XG5cbmZ1bmN0aW9uIGNoZWNrV2hhdE1hcmtlcnNUb0FkZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUpIHtcblx0dmFyIG1hcmtlcnMgPSBbXTtcblx0Ly8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIGhhdmUgdGhhdCBmaWx0ZXIgdmFsdWVcblx0JC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuXHRcdC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgbmFtZXMgaXMgZXF1YWwgdG8gdGhlIHNlbGVjdGVkIGZpbHRlclxuXHRcdC8vIHRyeSB0byByZWFkIGFsbCB0aGUgbmFtZXMgYW5kIHZhbHVlc1xuXHRcdHZhciBpID0gMDtcblx0XHRkbyB7XG5cdFx0XHRpKys7XG5cdFx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSAnVmFsdWUnICsgaTtcblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcblx0XHRcdGlmKGN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSkge1xuXHRcdFx0XHRpZihjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10gPT0gc2VsZWN0ZWRGaWx0ZXIuTmFtZSkge1xuXHRcdFx0XHRcdGlmKGN1cnJlbnRNYXJrZXJbY3VycmVudFZhbHVlXSA9PSBmaWx0ZXJWYWx1ZSlcblx0XHRcdFx0XHRcdG1hcmtlcnMucHVzaChjdXJyZW50TWFya2VyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSB3aGlsZSAodHJ1ZSlcblx0fSk7XG5cblx0cmV0dXJuIG1hcmtlcnM7XG59O1xuXG5mdW5jdGlvbiBjaGVja1doYXRDb3VudHJpZXNNYXJrZXJzVG9BZGQoc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlKSB7XG5cdHZhciBjb3VudHJpZXNUb0FkZCA9IFtdO1xuXHR2YXIgbWFya2Vyc1RvQWRkID0gW107XG5cblx0Ly8gY2hlY2sgd2hhdCBjb3VudHJpZXMgdG8gY29sb3VyXG5cdGNvdW50cmllc1RvQWRkID0gY2hlY2tXaGF0Q291bnRyaWVzVG9BZGQoc2VsZWN0ZWRGaWx0ZXIsIGZpbHRlclZhbHVlKTtcblx0bWFya2Vyc1RvQWRkID0gY2hlY2tXaGF0TWFya2Vyc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSk7XG5cblx0cmV0dXJuIFtjb3VudHJpZXNUb0FkZCwgbWFya2Vyc1RvQWRkXTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWx0ZXJOYW1lSXNWYWxpZChmaWx0ZXJOYW1lKSB7XG5cdHZhciB2YWxpZCA9IGZhbHNlO1xuXHQkLmVhY2goanNvbkZpbHRlcnNBcnJheSwgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXIpIHtcblx0XHRpZihjdXJyZW50RmlsdGVyLk5hbWUudG9Mb3dlckNhc2UoKSA9PT0gZmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRmaWx0ZXJPYmplY3QgPSBjdXJyZW50RmlsdGVyO1xuXHRcdFx0dmFsaWQgPSB0cnVlO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiB2YWxpZDtcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWx0ZXJWYWx1ZXNBcmVWYWxpZChmaWx0ZXIsIGZpbHRlclZhbHVlcykge1xuXHR2YXIgdmFsaWQgPSBmYWxzZTtcblx0JC5lYWNoKGZpbHRlclZhbHVlcywgZnVuY3Rpb24oaW5kZXgsIHBhcnQpIHtcblx0XHQvLyBjaGVjayBpZiB0aGUgY3VycmVudCB2YWx1ZSBpcyB2YWxpZFxuXHRcdCQuZWFjaChmaWx0ZXJPYmplY3QuVmFsdWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudFZhbHVlKSB7XG5cdFx0XHRpZihjdXJyZW50VmFsdWUgPT0gcGFydCkge1xuXHRcdFx0XHR2YWxpZCA9IHRydWU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZighdmFsaWQpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdJbnZhbGlkIHZhbHVlIGZvciB0aGUgZmlsdGVyOiAnICsgcGFydCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHZhbGlkO1xufVxuXG5mdW5jdGlvbiBhZGRNYXJrZXJzVG9NYXAobWFya2Vycykge1xuXHQkLmVhY2gobWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcblx0XHRtYXAuYWRkTWFya2VyKGluZGV4LCB7XG5cdFx0XHRsYXRMbmc6IFtjdXJyZW50TWFya2VyLkxhdGl0dWRlLCBjdXJyZW50TWFya2VyLkxvbmdpdHVkZV0sXG5cdFx0XHRuYW1lOiBjdXJyZW50TWFya2VyLmRlc2MsXG5cblx0XHRcdC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG5cdFx0XHRzdHlsZToge1xuXHRcdFx0XHRmaWxsOiAnZ3JlZW4nLFxuXHRcdFx0XHRyOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cbiIsIi8vIGNyZWF0ZSBhIG5ldyBGSWx0ZXIgb2JqZWN0XG52YXIgRmlsdGVyID0gZnVuY3Rpb24oTmFtZSwgVmFsdWUsIFZhbHVlcykge1xuXHR0aGlzLk5hbWUgPSBOYW1lO1xuXHR0aGlzLlZhbHVlID0gVmFsdWU7XG5cdHRoaXMuVmFsdWVzID0gVmFsdWVzO1xufTtcblxuLy8gbnVtYmVyIG9mIGZpbHRlcnNcbnZhciBudW1GaWx0ZXJzO1xudmFyIGN1cnJlbnRGaWx0ZXI7XG52YXIgY291bnRyeVZhbHVlVG9DaGVjaztcblxuZnVuY3Rpb24gcmVzZXRGaWx0ZXJzKCkge1xuXHQvLyBjb2xvciB0aGUgb3JpZ2luYWwgbWFwXG5cdHZhciBjb2xvcnMgPSBnZW5lcmF0ZUNvbG9yc0ZvclRoZUNvdW50cmllcygpO1xuXHRyZWxvYWRNYXAoY29sb3JzKTtcblxuXHQvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gaGF2ZSB0aGF0IGZpbHRlciB2YWx1ZVxuXHQkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG5cdFx0bWFwLmFkZE1hcmtlcihpbmRleCwge1xuXHRcdFx0bGF0TG5nOiBbY3VycmVudE1hcmtlci5MYXRpdHVkZSwgY3VycmVudE1hcmtlci5Mb25naXR1ZGVdLFxuXHRcdFx0bmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG5cdFx0XHQvLyBzZXQgdGhlIHN0eWxlIGZvciB0aGlzIG1hcmtlclxuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0ZmlsbDogJ2dyZWVuJyxcblx0XHRcdFx0cjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUuY3JlYXRlU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBqUXVlcnlVSSBzbGlkZXJcbiAgICBzbGlkZXIgPSAkKFwiI3NsaWRlclwiKS5zbGlkZXIoKTtcblxuICAgIC8vIHNldCBtYXggYW5kIG1pbiB2YWx1ZSBmb3IgdGhlIHNsaWRlclxuICAgIHNsaWRlci5zbGlkZXIoXCJvcHRpb25cIiwgXCJtaW5cIiwgbWluUmFkaXVzKTtcbiAgICBzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwibWF4XCIsIG1heFJhZGl1cyk7XG5cbiAgICAvLyBhbGxvdyB0aGUgdXNlciB0byBzZWxlY3QgYSByYW5nZVxuICAgIHNsaWRlci5zbGlkZXIoXCJvcHRpb25cIiwgXCJyYW5nZVwiLCB0cnVlKTtcblxuICAgIC8vIHdoZW4gdXNlciBjbGlja3MgdGhlIHNsaWRlciwgaXQgd2lsbCBhbmltYXRlIHRvIHRoZSBjbGlja2VkIHBvc2l0aW9uXG4gICAgc2xpZGVyLnNsaWRlcihcIm9wdGlvblwiLCBcImFuaW1hdGVcIiwgXCJzbG93XCIpO1xuXG4gICAgLy8gYWZ0ZXIgc2VsZWN0aW5nIGEgbmV3IHNsaWRlciB2YWx1ZVxuICAgIHNsaWRlci5vbihcInNsaWRlY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICBzbGlkZXJDaGFuZ2VkKCk7XG4gICAgfSk7XG5cbiAgICAvLyBoaWRlIGFsbCB0aGUgY29tcG9uZW50cyB1bnRpbCB0aGV5IGFyZSBoaWRkZW5cbiAgICAkKCcjc2xpZGVyJykuaGlkZSgpO1xuICAgICQoJyNtaW5TbGlkZXInKS5oaWRlKCk7XG4gICAgJCgnI21heFNsaWRlcicpLmhpZGUoKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyRnJvbU1lbnVTZWxlY3RlZChzZWxlY3RlZEZpbHRlciwgZmlsdGVyVmFsdWUpIHtcblxuXHRjdXJyZW50RmlsdGVyID0gc2VsZWN0ZWRGaWx0ZXI7XG5cblx0Ly8gY2hlY2sgd2hhdCBjb3VudHJpZXMgdG8gYWRkIHRvIHRoZSBtYXBcblx0dmFyIGNvdW50cmllcyA9IGNoZWNrV2hhdENvdW50cmllc1RvQWRkKHNlbGVjdGVkRmlsdGVyLCBmaWx0ZXJWYWx1ZSk7XG5cblx0Ly8gcmVsb2FkIHRoZSBtYXAgYW5kIGFkZCB0aG9zZSBjb3VudHJpZXNcblx0cmVsb2FkTWFwKGNvdW50cmllcyk7XG5cblx0Ly8gYWRkIG9ubHkgdGhlIG1hcmtlcnMgd2hvIGhhdmUgdGhhdCBmaWx0ZXIgdmFsdWVcblx0JC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudE1hcmtlcikge1xuXHRcdC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgbmFtZXMgaXMgZXF1YWwgdG8gdGhlIHNlbGVjdGVkIGZpbHRlclxuXHRcdC8vIHRyeSB0byByZWFkIGFsbCB0aGUgbmFtZXMgYW5kIHZhbHVlc1xuXHRcdHZhciBpID0gMDtcblx0XHRkbyB7XG5cdFx0XHRpKys7XG5cdFx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSAnVmFsdWUnICsgaTtcblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBDb3VudHJ5IGhhcyB0aGF0IG5hbWVcblx0XHRcdGlmKGN1cnJlbnRNYXJrZXJbY3VycmVudE5hbWVUb0NoZWNrXSkge1xuXHRcdFx0XHRpZihjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10gPT09IHNlbGVjdGVkRmlsdGVyLk5hbWUpIHtcblx0XHRcdFx0XHRpZihjdXJyZW50TWFya2VyW2N1cnJlbnRWYWx1ZV0gPT09IGZpbHRlclZhbHVlKSB7XG5cdFx0XHRcdFx0XHRtYXAuYWRkTWFya2VyKGluZGV4LCB7XG5cdFx0XHRcdFx0XHRcdGxhdExuZzogW2N1cnJlbnRNYXJrZXIuTGF0aXR1ZGUsIGN1cnJlbnRNYXJrZXIuTG9uZ2l0dWRlXSxcblx0XHRcdFx0XHRcdFx0bmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG5cdFx0XHRcdFx0XHRcdC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG5cdFx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdFx0ZmlsbDogJ2dyZWVuJyxcblx0XHRcdFx0XHRcdFx0XHRyOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0gd2hpbGUgKHRydWUpXG5cdH0pO1xuXG5cblx0Ly8gdXBkYXRlIHRoZSBzbGlkZXJcblx0Ly8gY2hlY2sgaWYgYW55IG9mIHRoZSB2YWx1ZXMgaXMgYSBudW1iZXJzLCBpZiBpdCBpcyB3ZSB0aGVuIHVwZGF0ZSB0aGUgc2xpZGVyXG5cdGlmKCFpc05hTihzZWxlY3RlZEZpbHRlci5WYWx1ZXNbMF0pKSB7XG5cdFx0JCgnI3NsaWRlcicpLnNob3coKTtcblx0XHQkKCcjbWluU2xpZGVyJykuc2hvdygpO1xuXHRcdCQoJyNtYXhTbGlkZXInKS5zaG93KCk7XG5cblx0XHQvLyBqUXVlcnlVSSBzbGlkZXJcblx0XHR2YXIgc2xpZGVyID0gJChcIiNzbGlkZXJcIikuc2xpZGVyKCk7XG5cdFx0dmFyIG1pblZhbHVlID0gc2VsZWN0ZWRGaWx0ZXIuVmFsdWVzWzBdO1xuXHRcdHZhciBtYXhWYWx1ZSA9IHNlbGVjdGVkRmlsdGVyLlZhbHVlc1tzZWxlY3RlZEZpbHRlci5WYWx1ZXMubGVuZ3RoIC0gMV07XG5cblx0XHQvLyBzZXQgbWF4IGFuZCBtaW4gdmFsdWUgZm9yIHRoZSBzbGlkZXJcblx0XHRzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwibWluXCIsIG1pblZhbHVlKTtcblx0XHRzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwibWF4XCIsIG1heFZhbHVlKTtcblxuXHRcdC8vIHNldCB0aGUgdGV4dCBvbiB0aGUgVUlcblx0XHQkKCcjbWluU2xpZGVyJykudGV4dChtaW5WYWx1ZSk7XG5cdFx0JCgnI21heFNsaWRlcicpLnRleHQobWF4VmFsdWUpO1xuXHR9IGVsc2Uge1xuXHRcdCQoJyNzbGlkZXInKS5oaWRlKCk7XG5cdFx0JCgnI21pblNsaWRlcicpLmhpZGUoKTtcblx0XHQkKCcjbWF4U2xpZGVyJykuaGlkZSgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHNsaWRlckNoYW5nZWQoKSB7XG5cdC8vIGdldCB0aGUgbWF4IGFuZCBtaW4gdmFsdWVzIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHJhbmdlXG5cdHZhciBjdXJyZW50UmFuZ2UgPSBzbGlkZXIuc2xpZGVyKFwib3B0aW9uXCIsIFwidmFsdWVzXCIpO1xuXHR2YXIgbWluID0gY3VycmVudFJhbmdlWzBdO1xuXHR2YXIgbWF4ID0gY3VycmVudFJhbmdlWzFdO1xuXG5cdHZhciBjdXJyZW50RmlsdGVyTmFtZSA9IGN1cnJlbnRGaWx0ZXIuTmFtZTtcblxuXHQvLyBzZXQgdGhlIHRleHQgb24gdGhlIFVJXG5cdCQoJyNtaW5TbGlkZXInKS50ZXh0KG1pbik7XG5cdCQoJyNtYXhTbGlkZXInKS50ZXh0KG1heCk7XG5cblx0Ly8gZmlsdGVyIHRoZSBDb3VudHJpZXNcblx0dmFyIGNvdW50cmllcyA9IFtdO1xuXHQkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG5cdFx0dmFyIGZpbHRlclZhbHVlRm9yQ291bnRyeSA9ICtjdXJyZW50Q291bnRyeVtjb3VudHJ5VmFsdWVUb0NoZWNrXTtcblx0XHRpZihmaWx0ZXJWYWx1ZUZvckNvdW50cnkgPj0gbWluICYmIGZpbHRlclZhbHVlRm9yQ291bnRyeSA8PSBtYXgpXG5cdFx0XHRjb3VudHJpZXNbY3VycmVudENvdW50cnkuQ291bnRyeV0gPSBjdXJyZW50Q291bnRyeS5Db3VudDtcblx0fSk7XG5cblx0Ly8gZHJhdyB0aGUgY291bnRyaWVzIG9uIHRoZSBtYXBcblx0cmVsb2FkTWFwKGNvdW50cmllcyk7XG5cblx0Ly8gZmlsdGVyIHRoZSBNYXJrZXJzXG5cdHZhciBjdXJyZW50Q291bnRyeSA9IGpzb25Db3VudHJpZXNbMF07XG5cdHZhciBzZWxlY3RlZE5hbWU7XG5cdHZhciBpID0gMDtcblx0ZG8ge1xuXHRcdGkrKztcblx0XHR2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcblx0XHR2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG5cdFx0Ly8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuXHRcdGlmKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnROYW1lVG9DaGVja10gPT09IGN1cnJlbnRGaWx0ZXJOYW1lKSB7XG5cdFx0XHRzZWxlY3RlZE5hbWUgPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH0gd2hpbGUgKHRydWUpO1xuXG5cdC8vIGFkZCBvbmx5IHRoZSBtYXJrZXJzIHdobyBoYXZlIHRoYXQgZmlsdGVyIHZhbHVlXG5cdCQuZWFjaChqc29uTWFya2VycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRNYXJrZXIpIHtcblx0XHQvLyBjaGVjayBpZiB0aGUgQ291bnRyeSBoYXMgdGhhdCBuYW1lXG5cdFx0aWYoY3VycmVudE1hcmtlcltzZWxlY3RlZE5hbWVdID49IG1pbiAmJiBjdXJyZW50TWFya2VyW3NlbGVjdGVkTmFtZV0gPD0gbWF4KSB7XG5cdFx0XHRtYXAuYWRkTWFya2VyKGluZGV4LCB7XG5cdFx0XHRcdGxhdExuZzogW2N1cnJlbnRNYXJrZXIuTGF0aXR1ZGUsIGN1cnJlbnRNYXJrZXIuTG9uZ2l0dWRlXSxcblx0XHRcdFx0bmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG5cdFx0XHRcdC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0ZmlsbDogJ2dyZWVuJyxcblx0XHRcdFx0XHRyOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xufTtcblxuZnVuY3Rpb24gcmVhZEZpbHRlcnNGcm9tSlNPTihpbnB1dEZpbHRlcnMpIHtcblx0dmFyIGZpbHRlcnMgPSBbXTtcblxuXHRmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXRGaWx0ZXJzLnZhbHVlcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIHJlYWQgdGhlIGN1cnJlbnQgZmlsdGVyXG5cdFx0Y3VycmVudEZpbHRlciA9IGlucHV0RmlsdGVycy52YWx1ZXNbaV07XG5cdFx0Ly8gZmllbGRzXG5cdFx0dmFyIG5hbWUgPSBjdXJyZW50RmlsdGVyLm5hbWU7XG5cdFx0dmFyIHZhbHVlID0gY3VycmVudEZpbHRlci52YWx1ZTtcblx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRmb3IodmFyIGogPSAwOyBqIDwgY3VycmVudEZpbHRlci52YWx1ZXMubGVuZ3RoOyBqKyspXG5cdFx0XHR2YWx1ZXMucHVzaChjdXJyZW50RmlsdGVyLnZhbHVlc1tqXSk7XG5cdFx0ZmlsdGVyc1tpXSA9IG5ldyBGaWx0ZXIobmFtZSwgdmFsdWUsIHZhbHVlcyk7XG5cdH1cblx0bnVtRmlsdGVycyA9IGZpbHRlcnMubGVuZ3RoO1xuXHRyZXR1cm4gZmlsdGVycztcbn07XG4iLCJ2YXIgbWFwcGluZ01hcmtlcnMgPSBbXTtcbnZhciBtYXBwaW5nQ291bnRyaWVzID0gW107XG5cblZlY3RvcmlhbE1hcC5wcm90b3R5cGUucmVnaXN0ZXJUcmFuc2Zvcm1lciA9IGZ1bmN0aW9uKGpzb25Mb2NhdGlvbiwgY291bnRyaWVzTWFwcGluZ0pzb24sIG1hcmtlcnNNYXBwaW5nSnNvbikge1xuXHQvLyBqc29uTG9jYXRpb24gLSB1cmwgb2YgdGhlIG5ldyBqc29uXG5cdC8vIGNvdW50cmllc01hcHBpbmdKc29uIC0ganNvbiB0aGF0IGNvbnRhaW5zIHRoZSBqc29uIGNvdW50cnkgbWFwcGluZ1xuXHR2YXIgY291bnRyaWVzTWFwcGluZ0pzb24gPSBcIi4uL21hcHBpbmdKU09OL21hcHBpbmdDb3VudHJpZXNTYW1wbGUuanNvblwiO1xuXHQvLyBtYXJrZXJzTWFwcGluZ0pzb24gLSBqc29uIHRoYXQgY29udGFpbnMgdGhlIGpzb24gbWFya2VycyBtYXBwaW5nXG5cdHZhciBtYXJrZXJzTWFwcGluZ0pzb24gPSBcIi4uL21hcHBpbmdKU09OL21hcHBpbmdNYXJrZXJzU2FtcGxlLmpzb25cIjtcblxuXHRpZighY291bnRyaWVzTWFwcGluZ0pzb24pIHtcblx0XHRjb25zb2xlLmVycm9yKCd5b3UgbXVzdCBzcGVjaWZ5IGEgY291bnRyaWVzIG1hcHBpbmcganNvbicpO1xuXHRcdHJldHVybjtcblx0fVxuXHRpZighbWFya2Vyc01hcHBpbmdKc29uKSB7XG5cdFx0Y29uc29sZS5lcnJvcigneW91IG11c3Qgc3BlY2lmeSBhIG1hcmtlcnMgbWFwcGluZyBqc29uJyk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gZ2V0IHRoZSBKU09OXG5cdGpzb25Mb2NhdGlvbiA9IFwiLi4vanNvbi9lc3BpZC1zcGFpbi5qc29uXCI7XG5cdCQuZ2V0SlNPTihqc29uTG9jYXRpb24sIGZ1bmN0aW9uKGpzb24pIHtcblx0XHQvLyByZWFkIGNvdW50cmllc1xuXHRcdGpzb25NYXBDb3VudHJpZXMoanNvbiwgY291bnRyaWVzTWFwcGluZ0pzb24pO1xuXHRcdC8vIHJlYWQgbWFya2Vyc1xuXHRcdGpzb25NYXBNYXJrZXJzKGpzb24sIG1hcmtlcnNNYXBwaW5nSnNvbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBqc29uTWFwQ291bnRyaWVzKGpzb24sIGNvdW50cmllc01hcHBpbmdKc29uKSB7XG5cdHZhciBjb3VudHJpZXMgPSBbXTtcblx0Ly8gYWNjZXNzIHRoZSBKU09OIGZpbGUgdGhhdCBzcGVjaWZpZXMgdGhlIG1hcHBpbmdcblx0JC5nZXRKU09OKGNvdW50cmllc01hcHBpbmdKc29uLCBmdW5jdGlvbihqc29uTWFwcGluZykge1xuXG5cdFx0Ly8gaW4gdGhpcyBjYXNlIHRoZSAnY291bnRyaWVzJyBhcmUgZGVmaW5lZCB0aGUgdG9wIGxldmVsXG5cdFx0Ly8gaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5ICdjb3VudHJ5J1xuXHRcdCQuZWFjaChqc29uLCBmdW5jdGlvbihpbmRleCwgY3VycmVudEpTT04pIHtcblx0XHRcdHZhciBqc29uQ291bnRyeSA9ICd7Jztcblx0XHRcdC8vIGdldCB0aGUgbmFtZSBvZiB0aGUgY291bnRyeVxuXHRcdFx0dmFyIG5hbWUgPSBjdXJyZW50SlNPTltqc29uTWFwcGluZy5Db3VudHJ5XTtcblx0XHRcdC8vIHRoZSBjb3VudHJ5IG5hbWUgbXVzdCBiZSBvbiB0aGUgdHdvLWRpZ2l0IGZvcm1hdFxuXHRcdFx0Ly8gZ2V0IHRoZSBjb3VudCAtIFdIQVQgSVMgVEhFIENPVU5UP1xuXHRcdFx0dmFyIGNvdW50ID0gMDtcblx0XHRcdC8vZ2V0IHRoZSBkZXNjcmlwdGlvbiAtIFdIVCBJUyBUSEUgREVTQ1JJUFRJT04gT0YgQSBNQVJLRVI/XG5cdFx0XHR2YXIgZGVzY3JpcHRpb24gPSAnJztcblx0XHRcdC8qXG5cdFx0XHRXSEFUIEFSRSBUSEUgTkFNRVM/Pz9cblx0XHRcdCovXG5cdFx0XHRjb3VudHJpZXNbaW5kZXhdID0gbmV3IENvdW50cnkoJycsIG5hbWUsIGNvdW50KTtcblx0XHR9KTtcblx0XHRtYXBwaW5nQ291bnRyaWVzID0gY291bnRyaWVzO1xuXHRcdGNvbnNvbGUubG9nKG1hcHBpbmdDb3VudHJpZXMpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24ganNvbk1hcE1hcmtlcnMoanNvbiwgbWFya2Vyc01hcHBpbmdKc29uKSB7XG5cdHZhciBtYXJrZXJzID0gW107XG5cblx0Ly8gYWNjZXNzIHRoZSBKU09OIGZpbGUgdGhhdCBzcGVjaWZpZXMgdGhlIG1hcHBpbmdcblx0JC5nZXRKU09OKG1hcmtlcnNNYXBwaW5nSnNvbiwgZnVuY3Rpb24oanNvbk1hcHBpbmcpIHtcblx0XHQvLyBpbiB0aGlzIGNhc2UgdGhlICdtYXJrZXJzJyBhcmUgZGVmaW5lZCB0aGUgdG9wIGxldmVsXG5cdFx0Ly8gaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5ICdtYXJrZXInXG5cdFx0JC5lYWNoKGpzb24sIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50SlNPTikge1xuXHRcdFx0Ly8gZ2V0IHRoZSBuYW1lIG9mIHRoZSBjb3VudHJ5XG5cdFx0XHR2YXIgbmFtZSA9IGN1cnJlbnRKU09OW2pzb25NYXBwaW5nLkNvdW50cnldO1xuXHRcdFx0Ly8gdGhlIGNvdW50cnkgbmFtZSBtdXN0IGJlIG9uIHRoZSB0d28tZGlnaXQgZm9ybWF0XG5cdFx0XHQvLyBnZXQgdGhlIGNvdW50IC0gV0hBVCBJUyBUSEUgQ09VTlQ/XG5cdFx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFx0Ly8gZ2V0IHRoZSBsYXRpdHVkZVxuXHRcdFx0dmFyIGxhdGl0dWRlID0gY3VycmVudEpTT05banNvbk1hcHBpbmcuTGF0aXR1ZGVdO1xuXHRcdFx0Ly8gZ2V0IHRoZSBsb25naXR1ZGVcblx0XHRcdHZhciBsb25naXR1ZGUgPSBjdXJyZW50SlNPTltqc29uTWFwcGluZy5Mb25naXR1ZGVdO1xuXHRcdFx0Ly9nZXQgdGhlIGRlc2NyaXB0aW9uIC0gV0hBVCBJUyBUSEUgREVTQ1JJUFRJT04gT0YgQSBNQVJLRVI/XG5cdFx0XHR2YXIgZGVzY3JpcHRpb24gPSAnJztcblx0XHRcdC8qXG5cdFx0XHRXSEFUIEFSRSBUSEUgTkFNRVM/Pz9cblx0XHRcdCovXG5cdFx0XHQvLyBjcmVhdGUgYSBuZXcgbWFya2VyXG5cdFx0XHRtYXJrZXJzW2luZGV4XSA9IG5ldyBNYXJrZXIoJycsIG5hbWUsIGNvdW50LCBsYXRpdHVkZSwgbG9uZ2l0dWRlKTtcblx0XHR9KTtcblx0XHRtYXBwaW5nTWFya2VycyA9IG1hcmtlcnM7XG5cdFx0Y29uc29sZS5sb2cobWFwcGluZ01hcmtlcnMpO1xuXHR9KTtcbn1cbiIsIi8vIHJlZHJhdyB0aGUgbWFwXG5mdW5jdGlvbiByZWxvYWRNYXAoY29sb3JzKSB7XG4gICAgLy8gZ2V0IHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IG1hcFxuICAgIGlmIChtYXAucGFyYW1zLm1hcCA9PSBtVHlwZSkge1xuICAgICAgICAvLyBtYWluIG1hcFxuICAgICAgICAvLyB1cGRhdGUgbWluIGFuZCBtYXggQ291bnQgb2YgdGhlIGNvdW50cmllc1xuICAgICAgICBpZiAoanNvbkNvdW50cmllcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmVhZE1pbk1heChjb2xvcnMpO1xuXG4gICAgICAgIHZhciBsZWdlbmRWYXIgPSB7XG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgICAgICAgIC8vdGl0bGU6ICdDb3VudHJpZXMnLFxuICAgICAgICB9O1xuXG5cbiAgICAgICAgdmFyIG1hcmtlcnNXaXRoTGVnZW5kID0ge1xuICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF0sXG4gICAgICAgICAgICAvLyBhZGQgYSBsZWdlbmRcbiAgICAgICAgICAgIGxlZ2VuZDogbGVnZW5kVmFyXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1hcmtlcnNXaXRob3V0TGVnZW5kID0ge1xuICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF1cbiAgICAgICAgfTtcblxuICAgICAgICBmaW5hbE1hcmtlcnNJbk1hcCA9IG1hcmtlcnNXaXRoTGVnZW5kO1xuICAgICAgICBpZiAoZGF0YVR5cGUgPT0gJ21hcmtlcnMnKSB7XG4gICAgICAgICAgICBmaW5hbE1hcmtlcnNJbk1hcCA9IG1hcmtlcnNXaXRob3V0TGVnZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXJhc2UgdGhlIG1hcFxuICAgICAgICAkKFwiI1wiICsgbURpdikuZW1wdHkoKTtcblxuICAgICAgICBtYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgICAgICBtYXA6IG1UeXBlLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgICAgY29udGFpbmVyOiAkKCcjJyArIG1EaXYpLFxuICAgICAgICAgICAgb25SZWdpb25DbGljazogZnVuY3Rpb24oZSwgY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIHJlbG9hZCBhIG5ldyBtYXBcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZSA9IGNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAvLyB3YWl0VG9BZGRNYXJrZXJzKDEwMCk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld01hcCA9IGNvdW50cnlDb2RlICsgJ19taWxsX2VuJztcbiAgICAgICAgICAgICAgICAvLyBzd2l0aCB0byBuZXcgbWFwXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKG5ld01hcCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxUb29sdGlwID0gYnVpbGRNYXJrZXJUb29sdGlwKGpzb25NYXJrZXJzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgbGFiZWwuaHRtbChmaW5hbFRvb2x0aXApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVnaW9uVGlwU2hvdzogZnVuY3Rpb24oZSwgY291bnRyeU5hbWUsIGNvZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSBjb3VudHJ5IChpLmUuLCBQVCwgRVMsIEZSLCBldGMpXG4gICAgICAgICAgICAgICAgLy8gc2hvdyB0aGUgQ291bnQgYXNzb2NpYXRlZCB0byB0aGF0IENvdW50cnkgLSBsb29rIGZvciB0aGUgY291bnRyeVxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cnkgPSAtMTtcbiAgICAgICAgICAgICAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5Db3VudHJ5ID09PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENvdW50cnkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIHNlbGVjdGVkQ291bnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeU5hbWUuaHRtbChjb3VudHJ5TmFtZS5odG1sKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIG1hcmtlcnM6IFtmaW5hbE1hcmtlcnNJbk1hcF0sXG4gICAgICAgICAgICAgICAgcmVnaW9uczogW3tcbiAgICAgICAgICAgICAgICAgICAgLy8gbWluIGFuZCBtYXggdmFsdWVzIG9mIGNvdW50XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBbbWluQ29sb3JNYXAsIG1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnZmlsbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb2xvcnMgYXJlICdzdHJldGNoZWQnIHRvIGZpbGwgdGhlIHNjYWxlXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogY29sb3JzXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VibWFwXG4gICAgICAgIC8vIHVwZGF0ZSBtaW4gYW5kIG1heCBDb3VudCBvZiB0aGUgY291bnRyaWVzXG4gICAgICAgIGlmIChqc29uQ291bnRyaWVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZWFkTWluTWF4KGNvbG9ycyk7XG5cbiAgICAgICAgLy8gZXJhc2UgdGhlIG1hcFxuICAgICAgICAkKFwiI1wiICsgbURpdikuZW1wdHkoKTtcbiAgICAgICAgcmVtb3ZlVG9vbHRpcCgpO1xuICAgICAgICBzd2l0Y2hNYXAobWFwVHlwZSk7XG4gICAgfVxuXG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcCgpIHtcbiAgICAvLyBlcmFzZSB0aGUgcHJldmlvdXMgbWFwIHRvb2x0aXBcbiAgICAkKCcuanZlY3Rvcm1hcC10aXAnKS5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gc3dpdGNoTWFwKG5ld01hcCkge1xuICAgIC8vIHRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgd2hlbiBhIGNvdW50cnkgb24gdGhlIHdvcmxkIG1hcCBpcyBjbGlja2VkXG4gICAgLy8gZXJhc2UgdGhlIHByZXZpb3VzIG1hcFxuICAgICQoJyMnICsgbURpdikuZW1wdHkoKTtcbiAgICByZW1vdmVUb29sdGlwKCk7XG5cbiAgICB2YXIgcmVnaW9uQ29sb3JzID0gZ2VuZXJhdGVDb2xvcnNGb3JUaGVSZWdpb25zKG5ld01hcCk7XG5cbiAgICBtYXAgPSBuZXcganZtLk1hcCh7XG4gICAgICAgIG1hcDogbmV3TWFwLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmQsXG4gICAgICAgIGNvbnRhaW5lcjogJCgnIycgKyBtRGl2KSxcbiAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZE1hcmtlclRvb2x0aXAoanNvbk1hcmtlcnMsIGluZGV4KTtcbiAgICAgICAgICAgIGxhYmVsLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCByZWdpb25OYW1lLCBjb2RlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudE1hcCA9IG5ld01hcC5zcGxpdCgnXycpWzBdLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGNvbnRhaW5zIHRoZSBjb2RlIG9mIHRoZSByZWdpb24gKGkuZS4sIFBULTEsIEVTLU0sIGV0YylcbiAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgUmVnaW9uIC0gbG9vayBmb3IgdGhlIFJlZ2lvblxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgY29ycmVzcG9uZGluZyBjb3VudHJ5XG4gICAgICAgICAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LkNvdW50cnkgPT0gY3VycmVudE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnkgPSBjdXJyZW50Q291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNlbGVjdGVkIHJlZ2lvbiBoYXMgYW55IGRhdGEgaW5zaWRlIHRoYXQgY291bnRyeVxuICAgICAgICAgICAgdmFyIHJlZ2lvbkZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRSZWdpb247XG4gICAgICAgICAgICAkLmVhY2gobWFwLnJlZ2lvbnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50UmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZWdpb24ubmFtZSA9PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrJyk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUmVnaW9uID0gY3VycmVudFJlZ2lvbjtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVnaW9uRm91bmQpIHtcbiAgICAgICAgICAgICAgICByZWdpb25OYW1lLmh0bWwoYnVpbGRSZWdpb25Ub29sdGlwKHNlbGVjdGVkUmVnaW9uKSk7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICByZWdpb25OYW1lLmh0bWwocmVnaW9uTmFtZS5odG1sKCkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgIG1hcmtlcnM6IFt7XG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSBzY2FsZSB0byBmaXQgdGhlIGN1cnJlbnQgbWluIGFuZCBtYXggdmFsdWVzXG4gICAgICAgICAgICAgICAgc2NhbGU6IFttaW5Db2xvck1hcCwgbWF4Q29sb3JNYXBdLFxuICAgICAgICAgICAgICAgIHZhbHVlczogW21pbkNvdW50LCBtYXhDb3VudF0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICByZWdpb25zOiBbe1xuICAgICAgICAgICAgICAgIC8vIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiBjb3VudFxuICAgICAgICAgICAgICAgIHNjYWxlOiBbbWluQ29sb3JNYXAsIG1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29sb3JzIGFyZSAnc3RyZXRjaGVkJyB0byBmaWxsIHRoZSBzY2FsZVxuICAgICAgICAgICAgICAgIHZhbHVlczogcmVnaW9uQ29sb3JzXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgYmFjayBidXR0b25cbiAgICAkKCcjbXlfbWFwJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwianZlY3Rvcm1hcC1nb2JhY2tcIj5CYWNrPC9kaXY+Jyk7XG4gICAgJChcIi5qdmVjdG9ybWFwLWdvYmFja1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZXJhc2UgdGhlIHByZXZpb3VzIG1hcFxuICAgICAgICAkKCcjJyArIG1EaXYpLmVtcHR5KCk7XG4gICAgICAgIHJlbW92ZVRvb2x0aXAoKTtcbiAgICAgICAgLy8gd2hlbiB0aGUgbGVmdCBidXR0b24gaXMgY2xpY2tlZFxuICAgICAgICAvLyByZXR1cm4gdG8gdGhlIG1haW4gbWFwXG4gICAgICAgIG1hcCA9IG5ldyBqdm0uTWFwKHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJCgnIycgKyBtRGl2KSxcbiAgICAgICAgICAgIC8vIGNvbmZpZ3VyYXRpb24gb2YgdGhlIG1haW4gbWFwXG4gICAgICAgICAgICAvLyB0eXBlIG9mIG1hcCAod29ybGQsIEV1cm9wZSwgVVNBLCBldGMpXG4gICAgICAgICAgICBtYXA6IG1UeXBlLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgICAgLy8gdHJpZ2dlcmVkIHdoZW4gYSBtYXJrZXIgaXMgaG92ZXJlZFxuICAgICAgICAgICAgb25SZWdpb25DbGljazogZnVuY3Rpb24oZSwgY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIHJlbG9hZCBhIG5ldyBtYXBcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZSA9IGNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAvLyB3YWl0VG9BZGRNYXJrZXJzKDEwMCk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld01hcCA9IGNvdW50cnlDb2RlICsgJ19taWxsX2VuJztcbiAgICAgICAgICAgICAgICAvLyBzd2l0aCB0byBuZXcgbWFwXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKG5ld01hcCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25NYXJrZXJUaXBTaG93OiBmdW5jdGlvbihlLCBsYWJlbCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3Qgd2hhdCB0ZXh0IHRvIGRpc3BsYXkgd2hlbiBtYXJrZXIgaXMgaG92ZXJlZFxuICAgICAgICAgICAgICAgIHZhciBmaW5hbFRvb2x0aXAgPSBidWlsZE1hcmtlclRvb2x0aXAoanNvbk1hcmtlcnMsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBsYWJlbC5odG1sKGZpbmFsVG9vbHRpcCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gdHJpZ2dlcmVkIHdoZW4gYSByZWdpb24gaXMgaG92ZXJlZFxuICAgICAgICAgICAgb25SZWdpb25UaXBTaG93OiBmdW5jdGlvbihlLCBjb3VudHJ5TmFtZSwgY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIGNvZGUgY29udGFpbnMgdGhlIGNvZGUgb2YgdGhlIGNvdW50cnkgKGkuZS4sIFBULCBFUywgRlIsIGV0YylcbiAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBDb3VudCBhc3NvY2lhdGVkIHRvIHRoYXQgQ291bnRyeSAtIGxvb2sgZm9yIHRoZSBjb3VudHJ5XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyeSA9IC0xO1xuICAgICAgICAgICAgICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LkNvdW50cnkgPT09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyeSA9IGN1cnJlbnRDb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ291bnRyeSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIG9jY3VycmVuY2Ugb2Ygc2V2ZXJhbCBzdHJpbmdzIGluc2lkZSB0aGUgdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsVG9vbHRpcCA9IGJ1aWxkQ291bnRyeVRvb2x0aXAoY291bnRyeU5hbWUsIHNlbGVjdGVkQ291bnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lLmh0bWwoZmluYWxUb29sdGlwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeU5hbWUuaHRtbChjb3VudHJ5TmFtZS5odG1sKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIG1hcmtlcnM6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBbbWluQ29sb3JNYXAsIG1heENvbG9yTWFwXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gcmFuZ2Ugb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ291bnRcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbbWluQ291bnQsIG1heENvdW50XSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGEgbGVnZW5kXG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIHJlZ2lvbnM6IFt7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiBjb3VudFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogW21pbkNvbG9yTWFwLCBtYXhDb2xvck1hcF0sXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ2ZpbGwnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IGF1eENvbG9yc1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZCB0aGUgbWFya2VzIHRvIHRoZSBtYXBcbiAgICAgICAgaWYgKHRoZXJlQXJlTWFya2Vycykge1xuICAgICAgICAgICAgYWRkTWFya2Vyc1RvTWFwKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGFkZCB0aGUgbWFya2Vyc1xuICAgIGlmICh0aGVyZUFyZU1hcmtlcnMpIHtcbiAgICAgICAgYWRkTWFya2Vyc1RvTWFwKCk7XG4gICAgfVxuXG4gICAgaWYgKGpzb25Db3VudHJpZXMpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNlbGVjdGVkIG1hcCBoYXMgYW55IHJlZ2lvbiB0byBoaWdobGlnaHRcbiAgICAgICAgLy8gYWRkUmVnaW9uc1RvTWFwKG5ld01hcClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZE1hcmtlcnNUb01hcCgpIHtcbiAgICB2YXIgbWFya2Vyc0pTT05BcnJheSA9IFtdO1xuICAgICQuZWFjaChmaWx0ZXJlZE1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIHZhciBjdXJyZW50TWFya2VySlNPTiA9IHtcbiAgICAgICAgICAgIGxhdExuZzogW2N1cnJlbnRNYXJrZXIuTGF0aXR1ZGUsIGN1cnJlbnRNYXJrZXIuTG9uZ2l0dWRlXSxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRNYXJrZXIuZGVzYyxcbiAgICAgICAgICAgIC8vIHNldCB0aGUgc3R5bGUgZm9yIHRoaXMgbWFya2VyXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIGZpbGw6ICdncmVlbicsXG4gICAgICAgICAgICAgICAgcjogbWFwUmFuZ2UoY3VycmVudE1hcmtlci5Db3VudCwgbWluQ291bnQsIG1heENvdW50LCBtaW5SYWRpdXMsIG1heFJhZGl1cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbWFya2Vyc0pTT05BcnJheS5wdXNoKGN1cnJlbnRNYXJrZXJKU09OKTtcbiAgICB9KTtcbiAgICBtYXAuYWRkTWFya2VycyhtYXJrZXJzSlNPTkFycmF5KTtcbn1cbiIsIi8vIE1hcmtlciBkZWZpbml0aW9uXG52YXIgTWFya2VyID0gZnVuY3Rpb24gKG1hcmtlck9iamVjdCxuYW1lLCBjb3VudCwgbGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xuXHRpZihtYXJrZXJPYmplY3QgPT0gJycpXG5cdHtcblx0XHR0aGlzLkNvdW50cnkgPSBuYW1lO1xuXHRcdHRoaXMuQ291bnQgPSArY291bnQ7XG5cdFx0dGhpcy5WYXIgPSAnJztcblx0XHR0aGlzLkxhdGl0dWRlID0gbGF0aXR1ZGU7XG5cdFx0dGhpcy5Mb25naXR1ZGUgPSBsb25naXR1ZGU7XG5cdFx0Ly8gVE9ETyAtIGFkZCBlc2NyaXB0aW9uIHRvIGEgTWFya2VyIGZyb20gdGhlIEpTT04gZmlsZVxuXHRcdHRoaXMuZGVzYyA9ICdhYmMnO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIHRyeSB0byByZWFkIGFsbCB0aGUgbmFtZXMgYW5kIHZhbHVlc1xuXHRcdHZhciBoYXNOYW1lID0gdHJ1ZTtcblx0XHR2YXIgaSA9IDA7XG5cdFx0ZG8ge1xuXHRcdFx0aSsrO1xuXHRcdFx0dmFyIGN1cnJlbnROYW1lVG9DaGVjayA9ICdOYW1lJyArIGk7XG5cdFx0XHR2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG5cdFx0XHRpZighbWFya2VyT2JqZWN0W2N1cnJlbnROYW1lVG9DaGVja10pIHtcblx0XHRcdFx0aGFzTmFtZSA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpc1tjdXJyZW50TmFtZVRvQ2hlY2tdID0gbWFya2VyT2JqZWN0W2N1cnJlbnROYW1lVG9DaGVja107XG5cdFx0XHRcdHRoaXNbY3VycmVudFZhbHVlXSA9IG1hcmtlck9iamVjdFtjdXJyZW50VmFsdWVdO1xuXHRcdFx0fVxuXHRcdH0gd2hpbGUgKGhhc05hbWUpXG5cblx0XHR0aGlzLkNvdW50cnkgPSBtYXJrZXJPYmplY3QuQ291bnRyeTtcblx0XHR0aGlzLkNvdW50ID0gK21hcmtlck9iamVjdC5Db3VudDtcblx0XHR0aGlzLlZhciA9IG1hcmtlck9iamVjdC5WYXI7XG5cdFx0dGhpcy5MYXRpdHVkZSA9IG1hcmtlck9iamVjdC5MYXRpdHVkZTtcblx0XHR0aGlzLkxvbmdpdHVkZSA9IG1hcmtlck9iamVjdC5Mb25naXR1ZGU7XG5cdFx0Ly8gVE9ETyAtIGFkZCBlc2NyaXB0aW9uIHRvIGEgTWFya2VyIGZyb20gdGhlIEpTT04gZmlsZVxuXHRcdHRoaXMuZGVzYyA9ICdhYmMnO1xuXHR9XG59O1xuXG4vLyByZWFkIHRoZSBtYXJrZXJzIGZyb20gYSBKU09OIGZpbGVcbmZ1bmN0aW9uIHJlYWRNYXJrZXJzRnJvbUpTT04oanNvbk1hcmtlcnMpIHtcblx0dmFyIG1hcmtlcnMgPSBbXTtcblxuXHRtaW5Db3VudCA9IEluZmluaXR5O1xuXHRtYXhDb3VudCA9IC1JbmZpbml0eTtcblxuXHQkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uIChpbmRleCwgY3VycmVudEpTT05NYXJrZXIpIHtcblx0XHRtYXJrZXJzW2luZGV4XSA9IG5ldyBNYXJrZXIoY3VycmVudEpTT05NYXJrZXIpO1xuXHRcdHZhciBjdXJyZW50Q291bnRWYWx1ZSA9IG1hcmtlcnNbaW5kZXhdLkNvdW50O1xuXG5cdFx0aWYoY3VycmVudENvdW50VmFsdWUgPiBtYXhDb3VudCkge1xuXHRcdFx0bWF4Q291bnQgPSBjdXJyZW50Q291bnRWYWx1ZTtcblx0XHR9XG5cdFx0aWYoY3VycmVudENvdW50VmFsdWUgPCBtaW5Db3VudClcblx0XHRcdG1pbkNvdW50ID0gY3VycmVudENvdW50VmFsdWU7XG5cdH0pO1xuXHRyZXR1cm4gbWFya2Vycztcbn1cbiIsImZ1bmN0aW9uIGZpbHRlcihpbnB1dEFyZ3MpIHtcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXRBcmdzKVxuICAgIHZhciBudW1iZXJLZXlzID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHZhbGlkRmlsdGVycyA9IDA7XG5cbiAgICB2YXIgY291bnRyaWVzQnlGaWx0ZXIgPSBuZXcgQXJyYXkoKTtcbiAgICB2YXIgbWFya2Vyc0J5RmlsdGVyID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bWJlcktleXM7IGkrKykge1xuICAgICAgICBjb3VudHJpZXNCeUZpbHRlcltpXSA9IG5ldyBBcnJheSgpO1xuICAgICAgICBtYXJrZXJzQnlGaWx0ZXJbaV0gPSBuZXcgQXJyYXkoKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBhbnkgb2YgdGhlIG5hbWVzIGlzIGFsbCAocmVzZXQgYWxsIGFwcGxpZWQgZmlsdGVyc1x0KVxuICAgIHZhciBleGl0ID0gZmFsc2U7XG4gICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBmaWx0ZXJOYW1lKSB7XG4gICAgICAgIGlmIChmaWx0ZXJOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIGV4aXQgPSB0cnVlO1xuICAgICAgICAgICAgLy8gcmVsb2FkcyB0aGUgb3JpZ2luYWwgbWFya2VycyBhbmQgY291bnRyaWVzIG9uIHRoZSBtYXBcbiAgICAgICAgICAgIHJlc2V0RmlsdGVycygpO1xuICAgICAgICAgICAgLy8gZXJhc2UgdGhlIHRleHQgZnJvbSB0aGUgZmlsdGVycyBib3hcbiAgICAgICAgICAgIHJlc2V0RmlsdGVyc0JveCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGV4aXQpXG4gICAgICAgIHJldHVybjtcblxuICAgIC8vIGZvciBldmVyeSBrZXkvZmlsdGVyXG4gICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBmaWx0ZXJOYW1lKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSBmaWx0ZXJOYW1lIGlzIHZhbGlkXG4gICAgICAgIGlmICghY2hlY2tGaWx0ZXJOYW1lSXNWYWxpZChmaWx0ZXJOYW1lKSkge1xuICAgICAgICAgICAgLy8gaW52YWxpZCBmaWx0ZXIgbmFtZVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgZmlsdGVyIG5hbWUhKCcgKyBmaWx0ZXJOYW1lICsgJyknKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSBmaWx0ZXIgdmFsdWUgKGNhbiBjb250YWluIGVudW1lcmF0aW9uIGFuZCByYW5nZSlcbiAgICAgICAgICAgIC8vICcyMDA0LTIwMDYnICwgJ0YsTScsIGV0Y1xuICAgICAgICAgICAgdmFyIGZpbHRlclZhbHVlID0gaW5wdXRBcmdzW2ZpbHRlck5hbWVdO1xuICAgICAgICAgICAgLy8gZ2V0IGFsbCBzaW5nbGUgZmlsdGVyIHZhbHVlc1xuICAgICAgICAgICAgdmFyIGZpbmFsUGFydHMgPSBnZXRBbGxGaWx0ZXJWYWx1ZXMoZmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhmaW5hbFBhcnRzKTtcbiAgICAgICAgICAgIHZhbGlkRmlsdGVycysrO1xuXG4gICAgICAgICAgICAvLyBmb3IgZXZlcnkgc2luZ2xlIHZhbHVlIGdldCBhbGwgdGhlIGNvdW50cnVlcyBhbmQgbWFya2Vyc1xuICAgICAgICAgICAgJC5lYWNoKGZpbmFsUGFydHMsIGZ1bmN0aW9uKGksIHBhcnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tSZXR1cm4gPSBjaGVja1doYXRDb3VudHJpZXNNYXJrZXJzVG9BZGQoZmlsdGVyT2JqZWN0LCBwYXJ0KTtcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyaWVzQXV4ID0gY2hlY2tSZXR1cm5bMF07XG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlcnNBdXggPSBjaGVja1JldHVyblsxXTtcbiAgICAgICAgICAgICAgICAvLyBhZGQgZXZlcnkgY291bnRyeSB0byB0aGUgbGlzdCBvZiBjb3VudHJpZXNCeUZpbHRlclxuICAgICAgICAgICAgICAgIC8vIGFkZCBldmVyeSBtYXJrZXIgdG8gdGhlIGxpc3Qgb2YgbWFya2Vyc0J5RmlsdGVyXG4gICAgICAgICAgICAgICAgJC5lYWNoKE9iamVjdC5rZXlzKGNvdW50cmllc0F1eCksIGZ1bmN0aW9uKGosIGN1cnJlbnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGNvbG9ycyB0aGF0IGFyZSByZXR1cm5lZCBhcmUgaW4gYSBqc29uIGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBjb3VudHJpZXNBdXhbY3VycmVudEtleV07XG4gICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5RmlsdGVyW2luZGV4XVtjdXJyZW50S2V5XSA9IGtleVZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgbWFya2Vyc1xuICAgICAgICAgICAgICAgICQuZWFjaChtYXJrZXJzQXV4LCBmdW5jdGlvbihqLCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnNCeUZpbHRlcltpbmRleF0ucHVzaChjdXJyZW50TWFya2VyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBnZXQgdGhlIGZpbmFsIGNvdW50cmllc1xuICAgIHZhciBmaW5hbENvdW50cmllcyA9IFtdO1xuICAgIGlmIChjb3VudHJpZXNCeUZpbHRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZpbmFsQ291bnRyaWVzID0gY291bnRyaWVzQnlGaWx0ZXJbMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnRyaWVzQnlGaWx0ZXIubGVuZ3RoIC0gMTsgaSsrKVxuICAgICAgICAgICAgZmluYWxDb3VudHJpZXMgPSBnZXRDb3VudHJpZXNJbnRlcnNlY3Rpb24oZmluYWxDb3VudHJpZXMsIGNvdW50cmllc0J5RmlsdGVyW2kgKyAxXSk7XG4gICAgfVxuXG4gICAgLy8gYWRkIGNvdW50cmllcyB0byBNYXBcbiAgICByZWxvYWRNYXAoZmluYWxDb3VudHJpZXMpO1xuXG4gICAgLy8gZ2V0IHRoZSBmaW5hbCBtYXJrZXJzXG4gICAgZmlsdGVyZWRNYXJrZXJzID0gW107XG4gICAgaWYgKG1hcmtlcnNCeUZpbHRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZpbHRlcmVkTWFya2VycyA9IG1hcmtlcnNCeUZpbHRlclswXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrZXJzQnlGaWx0ZXIubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZE1hcmtlcnMgPSBnZXRNYXJrZXJzSW50ZXJzZWN0aW9uKGZpbHRlcmVkTWFya2VycywgbWFya2Vyc0J5RmlsdGVyW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhZGQgbWFya2VycyB0byB0aGUgbWFwXG4gICAgYWRkTWFya2Vyc1RvTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGdldE1hcmtlcnNJbnRlcnNlY3Rpb24obWFya2Vyc0dyb3VwMSwgbWFya2Vyc0dyb3VwMikge1xuICAgIHZhciBtYXJrZXJzID0gW107XG5cbiAgICAvLyBtYXJrZXJzIHRoYXQgYmVsb25nIHRvIHRoZSB0d28gZ3JvdXBzXG4gICAgJC5lYWNoKG1hcmtlcnNHcm91cDEsIGZ1bmN0aW9uKGluZGV4LCBtYXJrZXIxKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgbWFya2VyIG5hbWUgaXMgaW5zaWRlIHRoZSBzZWNvbmQgZ3JvdXBcbiAgICAgICAgdmFyIG1hcmtlcjFDb3VudHJ5ID0gbWFya2VyMS5Db3VudHJ5O1xuICAgICAgICAkLmVhY2gobWFya2Vyc0dyb3VwMiwgZnVuY3Rpb24oaW5kZXgsIG1hcmtlcjIpIHtcbiAgICAgICAgICAgIHZhciBtYXJrZXIyQ291bnRyeSA9IG1hcmtlcjIuQ291bnRyeTtcbiAgICAgICAgICAgIGlmIChtYXJrZXIxQ291bnRyeSA9PSBtYXJrZXIyQ291bnRyeSlcbiAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2gobWFya2VyMSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcmtlcnM7XG59XG5cbmZ1bmN0aW9uIGdldENvdW50cmllc0ludGVyc2VjdGlvbihjb3VudHJpZXNHcm91cDEsIGNvdW50cmllc0dyb3VwMikge1xuICAgIC8vIGNvdW50cmllcyB0aGF0IGJlbG9uZyB0byB0aGUgdHdvIGdyb3Vwc1xuICAgIHZhciBjb3VudHJpZXMgPSBbXTtcblxuICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNHcm91cDEpLCBmdW5jdGlvbihpbmRleCwgY291bnRyeU5hbWUxKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgY291bnRyeSBuYW1lIGlzIGluc2lkZSB0aGUgc2Vjb25kIGdyb3VwXG4gICAgICAgICQuZWFjaChPYmplY3Qua2V5cyhjb3VudHJpZXNHcm91cDIpLCBmdW5jdGlvbihpbmRleCwgY291bnRyeU5hbWUyKSB7XG4gICAgICAgICAgICBpZiAoY291bnRyeU5hbWUxID09IGNvdW50cnlOYW1lMilcbiAgICAgICAgICAgICAgICBjb3VudHJpZXNbY291bnRyeU5hbWUxXSA9IGNvdW50cmllc0dyb3VwMVtjb3VudHJ5TmFtZTFdO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gY291bnRyaWVzO1xufVxuXG5mdW5jdGlvbiBhcHBseU11bHRpcGxlRmlsdGVyc1Byb2dyYW1hdHRpY2FsbHkoZmlsdGVyc1RvQXBwbHkpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZpbHRlcnNUb0FwcGx5KVxuICAgIHZhciBudW1GaWx0ZXJzVG9BcHBseSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBjb3VudHJpZXNIYXZlRmlsdGVyID0gW107XG4gICAgdmFyIG1hcmtlcnNIYXZlRmlsdGVyID0gW107XG5cbiAgICAvLyBmb3IgZXZlcnkga2V5XG4gICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBmaWx0ZXJOYW1lKSB7XG4gICAgICAgIHZhciBmaWx0ZXJWYWx1ZSA9IGZpbHRlcnNUb0FwcGx5W2ZpbHRlck5hbWVdO1xuICAgIH0pO1xuICAgIHZhciBjb2xvcnMgPSBbXTtcblxuICAgIC8vIHJlbW92ZSBhbGwgbWFya2VycyBmcm9tIHRoZSBtYXBcbiAgICBtYXAucmVtb3ZlQWxsTWFya2VycygpO1xuXG4gICAgLy8gZm9yIGVhY2ggb2YgdGhlIGNvdW50cmllc1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihjb3VudHJ5SW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIC8vIHNldCB0byAwIHRoZSBudW1iZXIgb2YgZmlsdGVyc1xuICAgICAgICBjb3VudHJpZXNIYXZlRmlsdGVyW2NvdW50cnlJbmRleF0gPSAwO1xuICAgICAgICAvLyBjaGVjayBpZiBpdCBoYXMgdGhlIG5lZWRlZCB2YWx1ZXNcbiAgICAgICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyTmFtZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXS50b0xvd2VyQ2FzZSgpID09IGN1cnJlbnRGaWx0ZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYnkgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyc1RvQXBwbHlbY3VycmVudEZpbHRlck5hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBjb2xvdXIgb25seSB0aGUgY291bnRyaXMgd2hvc2UgY291bnRyaWVzSGF2ZUZpbHRlcltpbmRleF0gPT0gbnVtYmVyRmlsdGVyc1xuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihjb3VudHJ5SW5kZXgsIGN1cnJlbnRDb3VudHJ5KSB7XG4gICAgICAgIGlmIChjb3VudHJpZXNIYXZlRmlsdGVyW2NvdW50cnlJbmRleF0gPT0gbnVtRmlsdGVyc1RvQXBwbHkpXG4gICAgICAgICAgICBjb2xvcnNbY3VycmVudENvdW50cnkuQ291bnRyeV0gPSBjdXJyZW50Q291bnRyeS5Db3VudDtcbiAgICB9KTtcbiAgICByZWxvYWRNYXAoY29sb3JzKTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLypcbiAgICBNYXJrZXJzXG4gICAgKi9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLy8gZm9yIGVhY2ggb2YgdGhlIG1hcmtlcnNcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKG1hcmtlckluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIC8vIHNldCB0byAwIHRoZSBudW1iZXIgb2YgZmlsdGVyc1xuICAgICAgICBtYXJrZXJzSGF2ZUZpbHRlclttYXJrZXJJbmRleF0gPSAwO1xuICAgICAgICAvLyBjaGVjayBpZiBpdCBoYXMgdGhlIG5lZWRlZCB2YWx1ZXNcbiAgICAgICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50RmlsdGVyTmFtZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10udG9Mb3dlckNhc2UoKSA9PSBjdXJyZW50RmlsdGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnRWYWx1ZV0gPT0gZmlsdGVyc1RvQXBwbHlbY3VycmVudEZpbHRlck5hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gc2F0aXNmeSB0aGUgY3JpdGVyaWFcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIGlmIChtYXJrZXJzSGF2ZUZpbHRlcltpbmRleF0gPT0gbnVtRmlsdGVyc1RvQXBwbHkpIHtcbiAgICAgICAgICAgIG1hcC5hZGRNYXJrZXIoaW5kZXgsIHtcbiAgICAgICAgICAgICAgICBsYXRMbmc6IFtjdXJyZW50TWFya2VyLkxhdGl0dWRlLCBjdXJyZW50TWFya2VyLkxvbmdpdHVkZV0sXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBzdHlsZSBmb3IgdGhpcyBtYXJrZXJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgICAgICByOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn1cblxuZnVuY3Rpb24gYXBwbHlNdWx0aXBsZUZpbHRlcnMoc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMsIGpzb25GaWx0ZXJzKSB7XG5cbiAgICAvLyBudW1iZXIgb2YgZmlsdGVycyB0byBiZSBhcHBsaWVkXG4gICAgdmFyIG51bUZpbHRlcnNUb0FwcGx5ID0gc2VsZWN0ZWRNdWx0aXBsZUZpbHRlcnMuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgfSkubGVuZ3RoO1xuXG4gICAgdmFyIGNvdW50cmllc0hhdmVGaWx0ZXIgPSBbXTtcbiAgICB2YXIgbWFya2Vyc0hhdmVGaWx0ZXIgPSBbXTtcblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBjb3VudHJpZXNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChzZWxlY3RlZE11bHRpcGxlRmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeVtjdXJyZW50TmFtZVRvQ2hlY2tdID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnlbY3VycmVudE5hbWVUb0NoZWNrXSA9PT0ganNvbkZpbHRlcnNbaW5kZXhdLk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYnkgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5W2N1cnJlbnRWYWx1ZV0gPT0gY3VycmVudEZpbHRlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNIYXZlRmlsdGVyW2NvdW50cnlJbmRleF0rKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGNvbG9ycyA9IFtdO1xuXG4gICAgLy8gY29sb3VyIG9ubHkgdGhlIGNvdW50cmlzIHdob3NlIGNvdW50cmllc0hhdmVGaWx0ZXJbaW5kZXhdID09IG51bWJlckZpbHRlcnNcbiAgICAkLmVhY2goanNvbkNvdW50cmllcywgZnVuY3Rpb24oY291bnRyeUluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBpZiAoY291bnRyaWVzSGF2ZUZpbHRlcltjb3VudHJ5SW5kZXhdID09IG51bUZpbHRlcnNUb0FwcGx5KVxuICAgICAgICAgICAgY29sb3JzW2N1cnJlbnRDb3VudHJ5LkNvdW50cnldID0gY3VycmVudENvdW50cnkuQ291bnQ7XG4gICAgfSk7XG5cbiAgICAvLyBjb2xvdXIgdGhlIGNvdW50cmllc1xuICAgIHJlbG9hZE1hcChjb2xvcnMpO1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8qXG4gICAgTWFya2Vyc1xuICAgICovXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIGZvciBlYWNoIG9mIHRoZSBtYXJrZXJzXG4gICAgJC5lYWNoKGpzb25NYXJrZXJzLCBmdW5jdGlvbihtYXJrZXJJbmRleCwgY3VycmVudE1hcmtlcikge1xuICAgICAgICAvLyBzZXQgdG8gMCB0aGUgbnVtYmVyIG9mIGZpbHRlcnNcbiAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdID0gMDtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBuZWVkZWQgdmFsdWVzXG4gICAgICAgICQuZWFjaChzZWxlY3RlZE11bHRpcGxlRmlsdGVycywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRGaWx0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5hbWVUb0NoZWNrID0gJ05hbWUnICsgaTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJ1ZhbHVlJyArIGk7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIENvdW50cnkgaGFzIHRoYXQgbmFtZVxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudE1hcmtlcltjdXJyZW50TmFtZVRvQ2hlY2tdKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnROYW1lVG9DaGVja10udG9Mb3dlckNhc2UoKSA9PSBqc29uRmlsdGVyc1tpbmRleF0uTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyW2N1cnJlbnRWYWx1ZV0gPT0gY3VycmVudEZpbHRlclZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0hhdmVGaWx0ZXJbbWFya2VySW5kZXhdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgb25seSB0aGUgbWFya2VycyB3aG8gc2F0aXNmeSB0aGUgY3JpdGVyaWFcbiAgICAkLmVhY2goanNvbk1hcmtlcnMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50TWFya2VyKSB7XG4gICAgICAgIGlmIChtYXJrZXJzSGF2ZUZpbHRlcltpbmRleF0gPT0gbnVtRmlsdGVyc1RvQXBwbHkpIHtcbiAgICAgICAgICAgIG1hcC5hZGRNYXJrZXIoaW5kZXgsIHtcbiAgICAgICAgICAgICAgICBsYXRMbmc6IFtjdXJyZW50TWFya2VyLkxhdGl0dWRlLCBjdXJyZW50TWFya2VyLkxvbmdpdHVkZV0sXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudE1hcmtlci5kZXNjLFxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBzdHlsZSBmb3IgdGhpcyBtYXJrZXJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnZ3JlZW4nLFxuICAgICAgICAgICAgICAgICAgICByOiBtYXBSYW5nZShjdXJyZW50TWFya2VyLkNvdW50LCBtaW5Db3VudCwgbWF4Q291bnQsIG1pblJhZGl1cywgbWF4UmFkaXVzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJ2YXIgUmVnaW9uID0gZnVuY3Rpb24ocmVnaW9uT2JqZWN0LCBjb3VudHJ5KSB7XG4gICAgLy8gcmVhZCBmcm9tIHRoZSBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgdGhpcy5SZWdpb24gPSByZWdpb25PYmplY3QubmFtZTtcbiAgICB0aGlzLkNvdW50cnkgPSBjb3VudHJ5O1xuICAgIC8vICsgaXMgdXNlZCB0byBhc3N1cmUgdGhhdCBhIE51bWJlciBpcyBiZWluZyByZWFkXG4gICAgdGhpcy5kZXNjID0gJ2p1c3QgYSByZWdpb24uLi4nO1xufTtcblxuZnVuY3Rpb24gcmVhZFJlZ2lvbnNGcm9tSlNPTihyZWdpb25zLCBjb3VudHJ5KSB7XG4gICAgdmFyIHJlZ2lvbnNBcnIgPSBbXTtcbiAgICAkLmVhY2gocmVnaW9ucywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRSZWdpb24pIHtcbiAgICAgICAgcmVnaW9uc0FycltpbmRleF0gPSBuZXcgUmVnaW9uKGN1cnJlbnRSZWdpb24sIGNvdW50cnkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZWdpb25zO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbG9yc0ZvclRoZVJlZ2lvbnMoY291bnRyeSl7XG4gICAgdmFyIGlzb0NvZGUgPSBjb3VudHJ5LnNwbGl0KFwiX1wiKVswXS50b1VwcGVyQ2FzZSgpO1xuICAgIC8vIGZpbmQgdGhlIGNvdW50cnkgd2l0aCB0aGF0IGlzb0NvZGVcbiAgICB2YXIgcmVnaW9uQ29sb3JzID0gW107XG4gICAgJC5lYWNoKGpzb25Db3VudHJpZXMsIGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50Q291bnRyeSkge1xuICAgICAgICBpZiAoY3VycmVudENvdW50cnkuQ291bnRyeSA9PSBpc29Db2RlKSB7XG4gICAgICAgICAgICAvLyBjb3VudHJ5IHdhcyBmb3VuZCwgY2hlY2sgaWYgaXQgaGFzIGFueSByZWdpb25cbiAgICAgICAgICAgIGlmIChjdXJyZW50Q291bnRyeS5SZWdpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lvbnMgPSBjdXJyZW50Q291bnRyeS5SZWdpb25zO1xuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgcmVnaW9ucyBvZiB0aGUgY291bnRyeVxuICAgICAgICAgICAgXHQkLmVhY2gocmVnaW9ucywgZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRSZWdpb24pIHtcbiAgICAgICAgICAgIFx0XHRyZWdpb25Db2xvcnNbY3VycmVudFJlZ2lvbi5uYW1lXSA9IDEwMDtcbiAgICAgICAgICAgIFx0fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblx0cmV0dXJuIHJlZ2lvbkNvbG9ycztcbn1cblxuZnVuY3Rpb24gYWRkUmVnaW9uc1RvTWFwKGtleSkge1xuICAgIC8vIGNoZWNrIGlmIHRoZSBoaWdobGlnaHRlZCBjb3VudHJ5IGhhcyBhbnkgcmVnaW9uXG4gICAgdmFyIGlzb0NvZGUgPSBrZXkuc3BsaXQoXCJfXCIpWzBdLnRvVXBwZXJDYXNlKCk7XG4gICAgLy8gZmluZCB0aGUgY291bnRyeSB3aXRoIHRoYXQgaXNvQ29kZVxuICAgICQuZWFjaChqc29uQ291bnRyaWVzLCBmdW5jdGlvbihpbmRleCwgY3VycmVudENvdW50cnkpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudHJ5LkNvdW50cnkgPT0gaXNvQ29kZSkge1xuICAgICAgICAgICAgLy8gY291bnRyeSB3YXMgZm91bmQsIGNoZWNrIGlmIGl0IGhhcyBhbnkgcmVnaW9uXG4gICAgICAgICAgICBpZiAoY3VycmVudENvdW50cnkuUmVnaW9ucykge1xuICAgICAgICAgICAgICAgIHZhciByZWdpb25zID0gY3VycmVudENvdW50cnkuUmVnaW9ucztcblxuICAgICAgICAgICAgICAgIHZhciBwYWxldHRlID0gWycjNjZDMkE1JywgJyNGQzhENjInLCAnIzhEQTBDQicsICcjRTc4QUMzJywgJyNBNkQ4NTQnXTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ29sb3JzKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3JzID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yc1ttYXBzLnJlZ2lvbl1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBtYXBzLnJlZ2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc1trZXldID0gcGFsZXR0ZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYWxldHRlLmxlbmd0aCldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnZW5lcmF0ZUNvbG9ycygpKTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGNvbG9ycyBvZiB0aGUgcmVnaW9uc1xuICAgICAgICAgICAgICAgIG1hcHMuc2VyaWVzLnJlZ2lvbnNbMF0uc2V0VmFsdWVzKGdlbmVyYXRlQ29sb3JzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=